{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LILACS ( Lilacs Is a Learning And Comprehension Subsystem ) you are a curious one, this is a toy project, dont expect to use it there's lots of non sense and TODOS nothing is ready you cant use it if it is not ready there are no docs there is no purpose im taking notes as i go, read on if you must memory data nervous system understanding context emotions neurotransmitters reactions references LILACS for analyzing emotions detect emotions, politeness, sentiment and assign emojis TEST_SENTENCES = ['I love mom\\'s cooking', 'I love how you never reply back..', 'I love cruising with my homies', 'I love messing with yo mind!!', 'I love you and now you\\'re just gone..', 'Thank you for your help', 'This is shit', 'This is the shit'] LILACS = LILACSEmotionalReactor() for text in TEST_SENTENCES: print(\"\\n\" + text) pprint(LILACS.sentiment_analysis(text)) pprint(LILACS.emotion_analysis(text)) pprint(LILACS.politeness_analysis(text)) pprint(LILACS.emoji_reaction(text)) # output \"\"\" I love mom's cooking 3.0 ['Zeal', 'Love', 'Joy', 'Remorse'] {'confidence': '91%', 'isrequest': False, 'label': 'neutral', 'text': \"I love mom's cooking\"} [':stuck_out_tongue_closed_eyes:', ':heart_eyes:', ':heart:', ':blush:', ':yellow_heart:'] I love how you never reply back.. 3.0 ['Annoyance', 'boredom', 'Despair'] {'confidence': '95%', 'isrequest': False, 'label': 'neutral', 'text': 'I love how you never reply back..'} [':unamused:', ':expressionless:', ':angry:', ':neutral_face:', ':broken_heart:'] I love cruising with my homies 3.0 ['Serenity', 'Optimism', 'Awe'] {'confidence': '99%', 'isrequest': False, 'label': 'neutral', 'text': 'I love cruising with my homies'} [':sunglasses:', ':ok_hand:', ':v:', ':relieved:', ':100:'] I love messing with yo mind!! 3.0 ['Delight', 'Pride', 'Bemusement', 'Zeal', 'Disfavor'] {'confidence': '98%', 'isrequest': False, 'label': 'neutral', 'text': 'I love messing with yo mind!!'} [':stuck_out_tongue_winking_eye:', ':smiling_imp:', ':smirk:', ':wink:', ':speak_no_evil:'] I love you and now you're just gone.. 3.0 ['Despair', 'Disappointment', 'boredom', 'Sadness', 'Pessimism'] {'confidence': '93%', 'isrequest': False, 'label': 'neutral', 'text': \"I love you and now you're just gone..\"} [':broken_heart:', ':pensive:', ':disappointed:', ':sleepy:', ':cry:'] Thank you for your help 4.0 ['Pride', 'Joy', 'Optimism', 'Delight'] {'confidence': '83%', 'isrequest': False, 'label': 'polite', 'text': 'Thank you for your help'} [':pray:', ':relaxed:', ':blush:', ':relieved:', ':+1:'] This is shit -4.0 ['Annoyance', 'Outrage', 'boredom', 'Cynicism'] {'confidence': '81%', 'isrequest': False, 'label': 'impolite', 'text': 'This is shit'} [':angry:', ':rage:', ':disappointed:', ':unamused:', ':triumph:'] This is the shit -4.0 ['Zeal', 'Delight', 'Optimism', 'Serenity', 'Bemusement'] {'confidence': '80%', 'isrequest': False, 'label': 'impolite', 'text': 'This is the shit'} [':headphones:', ':notes:', ':ok_hand:', ':sunglasses:', ':smirk:'] \"\"\" LILACS for analyzing text ask LILACS things about text test_text = \"\"\"London is the capital and most populous city of England and the United Kingdom. Standing on the River Thames in the south east of the island of Great Britain, London has been a major settlement for two millennia. It was founded by the Romans, who named it Londinium. London's ancient core, the City of London, which covers an area of only 1.12 square miles (2.9 km2), largely retains its medieval boundaries. Since at least the 19th century, \"London\" has also referred to the metropolis around this core, historically split between Middlesex, Essex, Surrey, Kent and Hertfordshire, which today largely makes up Greater London, a region governed by the Mayor of London and the London Assembly.\"\"\" LILACS = LILACSTextAnalyzer() assert LILACS.coreference_resolution(\"My sister has a dog. She loves him.\") == 'My sister has a dog. My sister loves a dog.' pprint(LILACS.possible_relations(test_text.split(\".\"))) \"\"\" [('London', 'country', 'United Kingdom'), ('London', 'instance of', 'capital'), ('London', 'instance of', 'populous city'), ('England', 'instance of', 'capital'), ('England', 'instance of', 'populous city')] \"\"\" pprint(LILACS.extract_facts(\"London\", test_text)) \"\"\" ['the capital and most populous city of england and the united kingdom', 'a major settlement for 2 millennium'] \"\"\" #pprint(LILACS.extract_triples(test_text)) pprint(LILACS.interesting_triples(test_text)) \"\"\" [('london', 'is', 'capital'), ('london', 'is', 'city'), ('london', 'is', 'kingdom')] \"\"\" #pprint(LILACS.extract_nouns(test_text)) question = \"what is the capital of england\" assert LILACS.answer_question(question, test_text) == \"london\" question = \"what is the most populous city of england\" assert LILACS.answer_question(question, test_text) == \"london\" question = \"who founded london\" assert LILACS.answer_question(question, test_text) == \"the romans\" premise = \"London is the capital and most populous city of England and the United Kingdom\" hypothesys = \"Humans live in London\" pprint(LILACS.validity_of_hypothesys(premise, hypothesys)) \"\"\" {'contradiction': 0.009316228330135345, 'entailment': 0.936576783657074, 'neutral': 0.05410700663924217} \"\"\" premise = \"Romans named London Londinium\" hypothesys = \"Romans never went to London\" pprint(LILACS.validity_of_hypothesys(premise, hypothesys)) \"\"\" {'contradiction': 0.9378615617752075, 'entailment': 0.007486931513994932, 'neutral': 0.054651517421007156} \"\"\" LILACS for extracting data from text Extract numbers and dates from text # NOTE 1 number per sentence only assert LILACS.extract_number(\"it's over nine thousand\") == 9000 now = datetime.datetime.now() print(now) pprint(LILACS.extract_date(\"tomorrow i will finish LILACS\", now)) # output # 2018-09-11 01:55:07.639843 # [datetime.datetime(2018, 9, 12, 0, 0), 'i will finish lilacs'] assert LILACS.extract_date_range(\"From March 5 until April 7 1988\") == [[datetime.datetime(1988, 3, 5, 0, 0), datetime.datetime(1988, 4, 8, 0, 0)]] Extract entities and external data about them from text LILACS = LILACSextractor() test_text = \"\"\"London is the capital and most populous city of England and the United Kingdom. Standing on the River Thames in the south east of the island of Great Britain, London has been a major settlement for 2 millennia. It was founded by the Romans, who named it Londinium. London's ancient core, the City of London, which covers an area of only 1.12 square miles (2.9 km2), largely retains its medieval boundaries. Since at least the 19th century, \"London\" has also referred to the metropolis around this core, historically split between Middlesex, Essex, Surrey, Kent and Hertfordshire, which today largely makes up Greater London, a region governed by the Mayor of London and the London Assembly.\"\"\" entities = LILACS.extract_entities(test_text) pprint(entities) # output # [('London', 'gpe'), # ('England', 'gpe'), # ('the United Kingdom', 'gpe'), # ('the River Thames', 'fac'), # ('Great Britain', 'gpe'), # ('London', 'gpe'), # ('two millennia', 'date'), # ('Romans', 'norp'), # ('Romans', 'norp'), # ('Londinium', 'gpe'), # ('London', 'gpe'), # ('the City of London', 'gpe'), # ('only 1.12 square miles', 'quantity'), # ('2.9 km2', 'quantity'), # ('at least the 19th century', 'date'), # ('London', 'gpe'), # ('Middlesex', 'gpe'), # ('Essex', 'gpe'), # ('Surrey', 'gpe'), # ('Kent', 'gpe'), # ('Hertfordshire', 'gpe'), # ('today', 'date'), # ('Greater London', 'loc'), # ('London', 'gpe'), # ('the London Assembly', 'org')] locations = LILACSextractor.extract_location(test_text) pprint(locations) # output # [{'accuracy': 0.975489576540198, # 'address': 'London, Greater London, England, SW1A 2DU, UK', # 'bbox': {'northeast': [51.6673219, 0.0323526], # 'southwest': [51.3473219, -0.2876474]}, # 'city': 'London', # 'confidence': 1, # 'country': 'UK', # 'country_code': 'gb', # 'icon': 'https://nominatim.openstreetmap.org/images/mapicons/poi_place_city.p.20.png', # 'importance': 0.975489576540198, # 'lat': 51.5073219, # 'lng': -0.1276474, # 'ok': True, # 'osm_id': '107775', # 'osm_type': 'node', # 'place_id': '100145', # 'place_rank': '15', # 'postal': 'SW1A 2DU', # 'quality': 'city', # 'raw': {'address': {'city': 'London', # 'country': 'UK', # 'country_code': 'gb', # 'postcode': 'SW1A 2DU', # 'state': 'England', # 'state_district': 'Greater London'}, # 'boundingbox': ['51.3473219', # '51.6673219', # '-0.2876474', # '0.0323526'], # 'category': 'place', # 'display_name': 'London, Greater London, England, SW1A 2DU, UK', # 'icon': 'https://nominatim.openstreetmap.org/images/mapicons/poi_place_city.p.20.png', # 'importance': 0.975489576540198, # 'lat': '51.5073219', # 'licence': 'Data \u00a9 OpenStreetMap contributors, ODbL 1.0. ' # 'https://osm.org/copyright', # 'lon': '-0.1276474', # 'osm_id': '107775', # 'osm_type': 'node', # 'place_id': '100145', # 'place_rank': '15', # 'type': 'city'}, # 'region': 'England', # 'state': 'England', # 'status': 'OK', # 'type': 'city'}, # ... # }] annotations = LILACS.annotate(test_text) pprint(annotations) # output \"\"\" [{'URI': 'http://dbpedia.org/resource/Greater_London', 'offset': 0, 'percentageOfSecondRank': 2.0763189316436016e-05, 'similarityScore': 0.9999778324259112, 'support': 4571, 'surfaceForm': 'London', 'types': 'Wikidata:Q3455524,Schema:Place,Schema:AdministrativeArea,DBpedia:Region,DBpedia:PopulatedPlace,DBpedia:Place,DBpedia:Location,DBpedia:AdministrativeRegion'}, {'URI': 'http://dbpedia.org/resource/Capital_city', 'offset': 14, 'percentageOfSecondRank': 2.143566429464659e-07, 'similarityScore': 0.9999995979453287, 'support': 8100, 'surfaceForm': 'capital', 'types': ''}, ... {'URI': 'http://dbpedia.org/resource/Mayor', 'offset': 658, 'percentageOfSecondRank': 0.00023661355713781133, 'similarityScore': 0.999708913147703, 'support': 19123, 'surfaceForm': 'Mayor', 'types': ''}, {'URI': 'http://dbpedia.org/resource/London_Assembly', 'offset': 682, 'percentageOfSecondRank': 7.363265257106634e-09, 'similarityScore': 0.9999999926367309, 'support': 775, 'surfaceForm': 'London Assembly', 'types': 'Wikidata:Q43229,Wikidata:Q24229398,Wikidata:Q11204,DUL:SocialPerson,DUL:Agent,Schema:Organization,DBpedia:Organisation,DBpedia:Legislature,DBpedia:Agent'}] \"\"\" LILACS for thinking answer questions with LILACS LILACS = LILACSReasoner() subject = \"Elon Musk\" question = \"where was Elon Musk born\" print(LILACSReasoner.answer_wikipedia(question, subject)) # Pretoria, South Africa p = \"Robotics is an interdisciplinary branch of engineering and science that includes mechanical engineering, electrical engineering, computer science, and others. Robotics deals with the design, construction, operation, and use of robots, as well as computer systems for their control, sensory feedback, and information processing. These technologies are used to develop machines that can substitute for humans. Robots can be used in any situation and for any purpose, but today many are used in dangerous environments (including bomb detection and de-activation), manufacturing processes, or where humans cannot survive. Robots can take on any form but some are made to resemble humans in appearance. This is said to help in the acceptance of a robot in certain replicative behaviors usually performed by people. Such robots attempt to replicate walking, lifting, speech, cognition, and basically anything a human can do.\" q = \"What do robots that resemble humans attempt to do?\" print(LILACS.answer_corpus(q, p)) # replicate walking, lifting, speech, cognition t = \"Which tool should a student use to compare the masses of two small rocks?\" c = [\"balance\", \"hand lens\", \"ruler\", \"measuring cup\"] print(LILACS.answer_choice(t, c)) # balance print(LILACS.is_math_question(t)) # False t = \"If 30 percent of 48 percent of a number is 288, what is the number?\" print(LILACS.is_math_question(t)) # True print(LILACS.answer(t)) # 2000 t = \"\"\"Which tool should a student use to compare the masses of two small rocks? (A) balance (B) hand lens (C) ruler (D) measuring cup \"\"\" print(LILACS.answer(t)) # A metric ruler and a balance will measure the size and mass of an object. Reasoning with LILACS data = \"\"\"@prefix ppl: <http://example.org/people#>. @prefix foaf: <http://xmlns.com/foaf/0.1/>. ppl:Cindy foaf:knows ppl:John. ppl:Cindy foaf:knows ppl:Eliza. ppl:Cindy foaf:knows ppl:Kate. ppl:Eliza foaf:knows ppl:John. ppl:Peter foaf:knows ppl:John.\"\"\" rules = \"\"\"@prefix foaf: <http://xmlns.com/foaf/0.1/>. { ?personA foaf:knows ?personB. } => { ?personB foaf:knows ?personA. }.\"\"\" # print(LILACS.EYE(data, rules)) # PREFIX ppl: <http://example.org/people#> # PREFIX foaf: <http://xmlns.com/foaf/0.1/> # # ppl:Cindy foaf:knows ppl:John. # ppl:Cindy foaf:knows ppl:Eliza. # ppl:Cindy foaf:knows ppl:Kate. # ppl:Eliza foaf:knows ppl:John. # ppl:Peter foaf:knows ppl:John. # ppl:John foaf:knows ppl:Cindy. # ppl:Eliza foaf:knows ppl:Cindy. # ppl:Kate foaf:knows ppl:Cindy. # ppl:John foaf:knows ppl:Eliza. # ppl:John foaf:knows ppl:Peter. LILACS for image analysis Perception includes vision! LILACS = LILACSVisualReasoner() picture = \"sasha.jpg\" question = \"how many humans?\" data = LILACS.answer_question(question, picture) result = data[\"answer\"] print(result) # 1 question = \"is the person male or female?\" data = LILACS.answer_question(question, picture) result = data[\"answer\"] print(result) # female data = LILACS.label_image(picture) result = data[\"predictions\"][0] print(result) # {'label_id': 'n03770439', 'label': 'miniskirt', 'probability': 0.2659367024898529} data = LILACS.caption_image(picture) result = data[\"predictions\"][0] print(result) # {'caption': 'a woman in a white shirt and a red tie', 'index': '0', 'probability': 2.5158757668475684e-05} data = LILACS.recognize_objects(picture) result = data[\"predictions\"][0] print(result) # {'detection_box': [0.028039246797561646, 0.16406074166297913, 1.0, 0.993462085723877], 'label': 'person', 'label_id': '1', 'probability': 0.9459671974182129} data = LILACS.recognize_scene(picture) result = data[\"predictions\"][0] print(result) # {'label': 'beauty_salon', 'label_id': '50', 'probability': 0.5930100679397583} data = LILACS.image_segmentation(picture) result = data print(result) # {'seg_map': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ... 15, 15, 15, 15, 0]], 'label_map': ['background', 'aeroplane', 'bicycle', 'bird', 'boat', 'bottle', 'bus', 'car', 'cat', 'chair', 'cow', 'diningtable', 'dog', 'horse', 'motorbike', 'person', 'pottedplant', 'sheep', 'sofa', 'train', 'tv'], 'annotated_image': '/home/user/PycharmProjects/LILACS_github/lilacs/processing/vision/sasha.jpg.seg.jpg', 'image_size': [513, 513], 'status': 'ok', 'labels': ['person']} colorized_pic_path = LILACS.colorize_image(picture) print(colorized_pic_path) # /home/user/PycharmProjects/LILACS_github/lilacs/processing/vision/sasha.jpg_colorize.png Vision includes Faces LILACS = LILACSFace() picture = \"sasha.jpg\" data = LILACS.demographic_recognition(picture) print(data) # [{'age_range': [15, 31], 'cultural_appearance_confidence': 0.77, 'gender': 'Female', 'cultural_appearance': 'Latino', 'gender_confidence': 0.99, 'age_range_confidence': 0.71, 'bounding_box': [411, 283, 386, 386]}] data = LILACS.face_analysis(picture) print(data) # {'width': 2932, 'height': 2932, # 'faces': [{'box': {'top': 724, 'width': 959, 'height': 959, 'left': 1043}, # 'gender': 'Female', # 'eyes': {'right': {'status': 'open', 'score': 0.3153488961123401}, 'left': {'status': 'open', 'score': 0.30432877233646144}}, # 'age': 20, # 'skin': {'color': '#9f8c86', 'white': 0.7}}], # '#faces': 1} data = LILACS.face_emotion(picture) print(data) # {'width': 2932, 'height': 2932, # 'faces': [{'box': {'top': 724, 'width': 959, 'height': 959, 'left': 1043}, # 'emotions': [{'angry': 0.547586977481842}, {'disgust': 0.03107559122145176}, {'fear': 0.07608325034379959}, {'happy': 0.049507103860378265}, {'neutral': 0.058710116893053055}, {'sad': 0.1907171905040741}, {'surprise': 0.04631979763507843}], 'smile': True}], # '#faces': 1} data = LILACS.face_age(picture) print(data) # [{'age_estimation': 23, 'face_box': [360, 165, 291, 406]}] files = LILACS.animate_eyes(picture) print(files) # ['/home/user/PycharmProjects/LILACS_github/lilacs/processing/vision/sasha.jpg_roll.mp4', '/home/user/PycharmProjects/LILACS_github/lilacs/processing/vision/sasha.jpg_scroll.mp4', '/home/user/PycharmProjects/LILACS_github/lilacs/processing/vision/sasha.jpg_cross.mp4', '/home/user/PycharmProjects/LILACS_github/lilacs/processing/vision/sasha.jpg_shift.mp4']","title":"Home"},{"location":"#lilacs-lilacs-is-a-learning-and-comprehension-subsystem","text":"you are a curious one, this is a toy project, dont expect to use it there's lots of non sense and TODOS nothing is ready you cant use it if it is not ready there are no docs there is no purpose im taking notes as i go, read on if you must memory data nervous system understanding context emotions neurotransmitters reactions references","title":"LILACS ( Lilacs Is a Learning And Comprehension Subsystem )"},{"location":"#lilacs-for-analyzing-emotions","text":"detect emotions, politeness, sentiment and assign emojis TEST_SENTENCES = ['I love mom\\'s cooking', 'I love how you never reply back..', 'I love cruising with my homies', 'I love messing with yo mind!!', 'I love you and now you\\'re just gone..', 'Thank you for your help', 'This is shit', 'This is the shit'] LILACS = LILACSEmotionalReactor() for text in TEST_SENTENCES: print(\"\\n\" + text) pprint(LILACS.sentiment_analysis(text)) pprint(LILACS.emotion_analysis(text)) pprint(LILACS.politeness_analysis(text)) pprint(LILACS.emoji_reaction(text)) # output \"\"\" I love mom's cooking 3.0 ['Zeal', 'Love', 'Joy', 'Remorse'] {'confidence': '91%', 'isrequest': False, 'label': 'neutral', 'text': \"I love mom's cooking\"} [':stuck_out_tongue_closed_eyes:', ':heart_eyes:', ':heart:', ':blush:', ':yellow_heart:'] I love how you never reply back.. 3.0 ['Annoyance', 'boredom', 'Despair'] {'confidence': '95%', 'isrequest': False, 'label': 'neutral', 'text': 'I love how you never reply back..'} [':unamused:', ':expressionless:', ':angry:', ':neutral_face:', ':broken_heart:'] I love cruising with my homies 3.0 ['Serenity', 'Optimism', 'Awe'] {'confidence': '99%', 'isrequest': False, 'label': 'neutral', 'text': 'I love cruising with my homies'} [':sunglasses:', ':ok_hand:', ':v:', ':relieved:', ':100:'] I love messing with yo mind!! 3.0 ['Delight', 'Pride', 'Bemusement', 'Zeal', 'Disfavor'] {'confidence': '98%', 'isrequest': False, 'label': 'neutral', 'text': 'I love messing with yo mind!!'} [':stuck_out_tongue_winking_eye:', ':smiling_imp:', ':smirk:', ':wink:', ':speak_no_evil:'] I love you and now you're just gone.. 3.0 ['Despair', 'Disappointment', 'boredom', 'Sadness', 'Pessimism'] {'confidence': '93%', 'isrequest': False, 'label': 'neutral', 'text': \"I love you and now you're just gone..\"} [':broken_heart:', ':pensive:', ':disappointed:', ':sleepy:', ':cry:'] Thank you for your help 4.0 ['Pride', 'Joy', 'Optimism', 'Delight'] {'confidence': '83%', 'isrequest': False, 'label': 'polite', 'text': 'Thank you for your help'} [':pray:', ':relaxed:', ':blush:', ':relieved:', ':+1:'] This is shit -4.0 ['Annoyance', 'Outrage', 'boredom', 'Cynicism'] {'confidence': '81%', 'isrequest': False, 'label': 'impolite', 'text': 'This is shit'} [':angry:', ':rage:', ':disappointed:', ':unamused:', ':triumph:'] This is the shit -4.0 ['Zeal', 'Delight', 'Optimism', 'Serenity', 'Bemusement'] {'confidence': '80%', 'isrequest': False, 'label': 'impolite', 'text': 'This is the shit'} [':headphones:', ':notes:', ':ok_hand:', ':sunglasses:', ':smirk:'] \"\"\"","title":"LILACS for analyzing emotions"},{"location":"#lilacs-for-analyzing-text","text":"ask LILACS things about text test_text = \"\"\"London is the capital and most populous city of England and the United Kingdom. Standing on the River Thames in the south east of the island of Great Britain, London has been a major settlement for two millennia. It was founded by the Romans, who named it Londinium. London's ancient core, the City of London, which covers an area of only 1.12 square miles (2.9 km2), largely retains its medieval boundaries. Since at least the 19th century, \"London\" has also referred to the metropolis around this core, historically split between Middlesex, Essex, Surrey, Kent and Hertfordshire, which today largely makes up Greater London, a region governed by the Mayor of London and the London Assembly.\"\"\" LILACS = LILACSTextAnalyzer() assert LILACS.coreference_resolution(\"My sister has a dog. She loves him.\") == 'My sister has a dog. My sister loves a dog.' pprint(LILACS.possible_relations(test_text.split(\".\"))) \"\"\" [('London', 'country', 'United Kingdom'), ('London', 'instance of', 'capital'), ('London', 'instance of', 'populous city'), ('England', 'instance of', 'capital'), ('England', 'instance of', 'populous city')] \"\"\" pprint(LILACS.extract_facts(\"London\", test_text)) \"\"\" ['the capital and most populous city of england and the united kingdom', 'a major settlement for 2 millennium'] \"\"\" #pprint(LILACS.extract_triples(test_text)) pprint(LILACS.interesting_triples(test_text)) \"\"\" [('london', 'is', 'capital'), ('london', 'is', 'city'), ('london', 'is', 'kingdom')] \"\"\" #pprint(LILACS.extract_nouns(test_text)) question = \"what is the capital of england\" assert LILACS.answer_question(question, test_text) == \"london\" question = \"what is the most populous city of england\" assert LILACS.answer_question(question, test_text) == \"london\" question = \"who founded london\" assert LILACS.answer_question(question, test_text) == \"the romans\" premise = \"London is the capital and most populous city of England and the United Kingdom\" hypothesys = \"Humans live in London\" pprint(LILACS.validity_of_hypothesys(premise, hypothesys)) \"\"\" {'contradiction': 0.009316228330135345, 'entailment': 0.936576783657074, 'neutral': 0.05410700663924217} \"\"\" premise = \"Romans named London Londinium\" hypothesys = \"Romans never went to London\" pprint(LILACS.validity_of_hypothesys(premise, hypothesys)) \"\"\" {'contradiction': 0.9378615617752075, 'entailment': 0.007486931513994932, 'neutral': 0.054651517421007156} \"\"\"","title":"LILACS for analyzing text"},{"location":"#lilacs-for-extracting-data-from-text","text":"Extract numbers and dates from text # NOTE 1 number per sentence only assert LILACS.extract_number(\"it's over nine thousand\") == 9000 now = datetime.datetime.now() print(now) pprint(LILACS.extract_date(\"tomorrow i will finish LILACS\", now)) # output # 2018-09-11 01:55:07.639843 # [datetime.datetime(2018, 9, 12, 0, 0), 'i will finish lilacs'] assert LILACS.extract_date_range(\"From March 5 until April 7 1988\") == [[datetime.datetime(1988, 3, 5, 0, 0), datetime.datetime(1988, 4, 8, 0, 0)]] Extract entities and external data about them from text LILACS = LILACSextractor() test_text = \"\"\"London is the capital and most populous city of England and the United Kingdom. Standing on the River Thames in the south east of the island of Great Britain, London has been a major settlement for 2 millennia. It was founded by the Romans, who named it Londinium. London's ancient core, the City of London, which covers an area of only 1.12 square miles (2.9 km2), largely retains its medieval boundaries. Since at least the 19th century, \"London\" has also referred to the metropolis around this core, historically split between Middlesex, Essex, Surrey, Kent and Hertfordshire, which today largely makes up Greater London, a region governed by the Mayor of London and the London Assembly.\"\"\" entities = LILACS.extract_entities(test_text) pprint(entities) # output # [('London', 'gpe'), # ('England', 'gpe'), # ('the United Kingdom', 'gpe'), # ('the River Thames', 'fac'), # ('Great Britain', 'gpe'), # ('London', 'gpe'), # ('two millennia', 'date'), # ('Romans', 'norp'), # ('Romans', 'norp'), # ('Londinium', 'gpe'), # ('London', 'gpe'), # ('the City of London', 'gpe'), # ('only 1.12 square miles', 'quantity'), # ('2.9 km2', 'quantity'), # ('at least the 19th century', 'date'), # ('London', 'gpe'), # ('Middlesex', 'gpe'), # ('Essex', 'gpe'), # ('Surrey', 'gpe'), # ('Kent', 'gpe'), # ('Hertfordshire', 'gpe'), # ('today', 'date'), # ('Greater London', 'loc'), # ('London', 'gpe'), # ('the London Assembly', 'org')] locations = LILACSextractor.extract_location(test_text) pprint(locations) # output # [{'accuracy': 0.975489576540198, # 'address': 'London, Greater London, England, SW1A 2DU, UK', # 'bbox': {'northeast': [51.6673219, 0.0323526], # 'southwest': [51.3473219, -0.2876474]}, # 'city': 'London', # 'confidence': 1, # 'country': 'UK', # 'country_code': 'gb', # 'icon': 'https://nominatim.openstreetmap.org/images/mapicons/poi_place_city.p.20.png', # 'importance': 0.975489576540198, # 'lat': 51.5073219, # 'lng': -0.1276474, # 'ok': True, # 'osm_id': '107775', # 'osm_type': 'node', # 'place_id': '100145', # 'place_rank': '15', # 'postal': 'SW1A 2DU', # 'quality': 'city', # 'raw': {'address': {'city': 'London', # 'country': 'UK', # 'country_code': 'gb', # 'postcode': 'SW1A 2DU', # 'state': 'England', # 'state_district': 'Greater London'}, # 'boundingbox': ['51.3473219', # '51.6673219', # '-0.2876474', # '0.0323526'], # 'category': 'place', # 'display_name': 'London, Greater London, England, SW1A 2DU, UK', # 'icon': 'https://nominatim.openstreetmap.org/images/mapicons/poi_place_city.p.20.png', # 'importance': 0.975489576540198, # 'lat': '51.5073219', # 'licence': 'Data \u00a9 OpenStreetMap contributors, ODbL 1.0. ' # 'https://osm.org/copyright', # 'lon': '-0.1276474', # 'osm_id': '107775', # 'osm_type': 'node', # 'place_id': '100145', # 'place_rank': '15', # 'type': 'city'}, # 'region': 'England', # 'state': 'England', # 'status': 'OK', # 'type': 'city'}, # ... # }] annotations = LILACS.annotate(test_text) pprint(annotations) # output \"\"\" [{'URI': 'http://dbpedia.org/resource/Greater_London', 'offset': 0, 'percentageOfSecondRank': 2.0763189316436016e-05, 'similarityScore': 0.9999778324259112, 'support': 4571, 'surfaceForm': 'London', 'types': 'Wikidata:Q3455524,Schema:Place,Schema:AdministrativeArea,DBpedia:Region,DBpedia:PopulatedPlace,DBpedia:Place,DBpedia:Location,DBpedia:AdministrativeRegion'}, {'URI': 'http://dbpedia.org/resource/Capital_city', 'offset': 14, 'percentageOfSecondRank': 2.143566429464659e-07, 'similarityScore': 0.9999995979453287, 'support': 8100, 'surfaceForm': 'capital', 'types': ''}, ... {'URI': 'http://dbpedia.org/resource/Mayor', 'offset': 658, 'percentageOfSecondRank': 0.00023661355713781133, 'similarityScore': 0.999708913147703, 'support': 19123, 'surfaceForm': 'Mayor', 'types': ''}, {'URI': 'http://dbpedia.org/resource/London_Assembly', 'offset': 682, 'percentageOfSecondRank': 7.363265257106634e-09, 'similarityScore': 0.9999999926367309, 'support': 775, 'surfaceForm': 'London Assembly', 'types': 'Wikidata:Q43229,Wikidata:Q24229398,Wikidata:Q11204,DUL:SocialPerson,DUL:Agent,Schema:Organization,DBpedia:Organisation,DBpedia:Legislature,DBpedia:Agent'}] \"\"\"","title":"LILACS for extracting data from text"},{"location":"#lilacs-for-thinking","text":"answer questions with LILACS LILACS = LILACSReasoner() subject = \"Elon Musk\" question = \"where was Elon Musk born\" print(LILACSReasoner.answer_wikipedia(question, subject)) # Pretoria, South Africa p = \"Robotics is an interdisciplinary branch of engineering and science that includes mechanical engineering, electrical engineering, computer science, and others. Robotics deals with the design, construction, operation, and use of robots, as well as computer systems for their control, sensory feedback, and information processing. These technologies are used to develop machines that can substitute for humans. Robots can be used in any situation and for any purpose, but today many are used in dangerous environments (including bomb detection and de-activation), manufacturing processes, or where humans cannot survive. Robots can take on any form but some are made to resemble humans in appearance. This is said to help in the acceptance of a robot in certain replicative behaviors usually performed by people. Such robots attempt to replicate walking, lifting, speech, cognition, and basically anything a human can do.\" q = \"What do robots that resemble humans attempt to do?\" print(LILACS.answer_corpus(q, p)) # replicate walking, lifting, speech, cognition t = \"Which tool should a student use to compare the masses of two small rocks?\" c = [\"balance\", \"hand lens\", \"ruler\", \"measuring cup\"] print(LILACS.answer_choice(t, c)) # balance print(LILACS.is_math_question(t)) # False t = \"If 30 percent of 48 percent of a number is 288, what is the number?\" print(LILACS.is_math_question(t)) # True print(LILACS.answer(t)) # 2000 t = \"\"\"Which tool should a student use to compare the masses of two small rocks? (A) balance (B) hand lens (C) ruler (D) measuring cup \"\"\" print(LILACS.answer(t)) # A metric ruler and a balance will measure the size and mass of an object. Reasoning with LILACS data = \"\"\"@prefix ppl: <http://example.org/people#>. @prefix foaf: <http://xmlns.com/foaf/0.1/>. ppl:Cindy foaf:knows ppl:John. ppl:Cindy foaf:knows ppl:Eliza. ppl:Cindy foaf:knows ppl:Kate. ppl:Eliza foaf:knows ppl:John. ppl:Peter foaf:knows ppl:John.\"\"\" rules = \"\"\"@prefix foaf: <http://xmlns.com/foaf/0.1/>. { ?personA foaf:knows ?personB. } => { ?personB foaf:knows ?personA. }.\"\"\" # print(LILACS.EYE(data, rules)) # PREFIX ppl: <http://example.org/people#> # PREFIX foaf: <http://xmlns.com/foaf/0.1/> # # ppl:Cindy foaf:knows ppl:John. # ppl:Cindy foaf:knows ppl:Eliza. # ppl:Cindy foaf:knows ppl:Kate. # ppl:Eliza foaf:knows ppl:John. # ppl:Peter foaf:knows ppl:John. # ppl:John foaf:knows ppl:Cindy. # ppl:Eliza foaf:knows ppl:Cindy. # ppl:Kate foaf:knows ppl:Cindy. # ppl:John foaf:knows ppl:Eliza. # ppl:John foaf:knows ppl:Peter.","title":"LILACS for thinking"},{"location":"#lilacs-for-image-analysis","text":"Perception includes vision! LILACS = LILACSVisualReasoner() picture = \"sasha.jpg\" question = \"how many humans?\" data = LILACS.answer_question(question, picture) result = data[\"answer\"] print(result) # 1 question = \"is the person male or female?\" data = LILACS.answer_question(question, picture) result = data[\"answer\"] print(result) # female data = LILACS.label_image(picture) result = data[\"predictions\"][0] print(result) # {'label_id': 'n03770439', 'label': 'miniskirt', 'probability': 0.2659367024898529} data = LILACS.caption_image(picture) result = data[\"predictions\"][0] print(result) # {'caption': 'a woman in a white shirt and a red tie', 'index': '0', 'probability': 2.5158757668475684e-05} data = LILACS.recognize_objects(picture) result = data[\"predictions\"][0] print(result) # {'detection_box': [0.028039246797561646, 0.16406074166297913, 1.0, 0.993462085723877], 'label': 'person', 'label_id': '1', 'probability': 0.9459671974182129} data = LILACS.recognize_scene(picture) result = data[\"predictions\"][0] print(result) # {'label': 'beauty_salon', 'label_id': '50', 'probability': 0.5930100679397583} data = LILACS.image_segmentation(picture) result = data print(result) # {'seg_map': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ... 15, 15, 15, 15, 0]], 'label_map': ['background', 'aeroplane', 'bicycle', 'bird', 'boat', 'bottle', 'bus', 'car', 'cat', 'chair', 'cow', 'diningtable', 'dog', 'horse', 'motorbike', 'person', 'pottedplant', 'sheep', 'sofa', 'train', 'tv'], 'annotated_image': '/home/user/PycharmProjects/LILACS_github/lilacs/processing/vision/sasha.jpg.seg.jpg', 'image_size': [513, 513], 'status': 'ok', 'labels': ['person']} colorized_pic_path = LILACS.colorize_image(picture) print(colorized_pic_path) # /home/user/PycharmProjects/LILACS_github/lilacs/processing/vision/sasha.jpg_colorize.png Vision includes Faces LILACS = LILACSFace() picture = \"sasha.jpg\" data = LILACS.demographic_recognition(picture) print(data) # [{'age_range': [15, 31], 'cultural_appearance_confidence': 0.77, 'gender': 'Female', 'cultural_appearance': 'Latino', 'gender_confidence': 0.99, 'age_range_confidence': 0.71, 'bounding_box': [411, 283, 386, 386]}] data = LILACS.face_analysis(picture) print(data) # {'width': 2932, 'height': 2932, # 'faces': [{'box': {'top': 724, 'width': 959, 'height': 959, 'left': 1043}, # 'gender': 'Female', # 'eyes': {'right': {'status': 'open', 'score': 0.3153488961123401}, 'left': {'status': 'open', 'score': 0.30432877233646144}}, # 'age': 20, # 'skin': {'color': '#9f8c86', 'white': 0.7}}], # '#faces': 1} data = LILACS.face_emotion(picture) print(data) # {'width': 2932, 'height': 2932, # 'faces': [{'box': {'top': 724, 'width': 959, 'height': 959, 'left': 1043}, # 'emotions': [{'angry': 0.547586977481842}, {'disgust': 0.03107559122145176}, {'fear': 0.07608325034379959}, {'happy': 0.049507103860378265}, {'neutral': 0.058710116893053055}, {'sad': 0.1907171905040741}, {'surprise': 0.04631979763507843}], 'smile': True}], # '#faces': 1} data = LILACS.face_age(picture) print(data) # [{'age_estimation': 23, 'face_box': [360, 165, 291, 406]}] files = LILACS.animate_eyes(picture) print(files) # ['/home/user/PycharmProjects/LILACS_github/lilacs/processing/vision/sasha.jpg_roll.mp4', '/home/user/PycharmProjects/LILACS_github/lilacs/processing/vision/sasha.jpg_scroll.mp4', '/home/user/PycharmProjects/LILACS_github/lilacs/processing/vision/sasha.jpg_cross.mp4', '/home/user/PycharmProjects/LILACS_github/lilacs/processing/vision/sasha.jpg_shift.mp4']","title":"LILACS for image analysis"},{"location":"lilacs.memory.data_sources.conceptnet/","text":"Module lilacs.memory.data_sources.conceptnet extract_conceptnet_connections def extract_conceptnet_connections(subject) get_conceptnet def get_conceptnet(subject)","title":"conceptnet"},{"location":"lilacs.memory.data_sources.conceptnet/#module-lilacsmemorydata_sourcesconceptnet","text":"","title":"Module lilacs.memory.data_sources.conceptnet"},{"location":"lilacs.memory.data_sources.conceptnet/#extract95conceptnet95connections","text":"def extract_conceptnet_connections(subject)","title":"extract_conceptnet_connections"},{"location":"lilacs.memory.data_sources.conceptnet/#get95conceptnet","text":"def get_conceptnet(subject)","title":"get_conceptnet"},{"location":"lilacs.memory.data_sources.dbpedia/","text":"Module lilacs.memory.data_sources.dbpedia DbpediaEnquirer This class allows to query dbpedia using the Virtuoso SPARQL endpoint and gives access to different type of information camel_to_word def camel_to_word(self, text) get_all_instances_for_ontology_label def get_all_instances_for_ontology_label(self, ontology_label, log=False) Given an ontoloy label (like http://dbpedia.org/ontology/SportsTeam), it will return all the entities in DBPEDIA tagged with that label @param ontology_label: the ontology label (http://dbpedia.org/ontology/SportsTeam) @type ontology_label: str @param log: to get log information @type log: bool @return: list of all dbpedia entities belonging to that ontological type @rtype: list get_dbpedia_cons_for_dblink def get_dbpedia_cons_for_dblink(self, dblink) Returns the DBpedia synonyms for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list get_dbpedia_labels_for_dblink def get_dbpedia_labels_for_dblink(self, dblink) Returns the DBpedia ontology labels for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list get_deepest_ontology_class_for_dblink def get_deepest_ontology_class_for_dblink(self, dblink) Given a dblink (http://dbpedia.org/resource/Tom_Cruise) gets all the possible ontology classes from dbpedia, calculates the depth of each on in the DBpedia ontology and returns the deepest one @param dblink: the dbpedia link @type dblink: string @return: the deespest DBpedia ontology label @rtype: string get_external_urls_for_dblink def get_external_urls_for_dblink(self, dblink) Returns the DBpedia synonyms for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list get_language_for_dblink def get_language_for_dblink(self, dblink) Returns the language given a DBpedia link (xml:lang predicate) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the language (or None if there is no lang) @rtype: str get_wiki_page_id_for_dblink def get_wiki_page_id_for_dblink(self, dblink) Returns the wikipedia page id for the given DBpedia link (the relation http://dbpedia.org/ontology/wikiPageID is checked) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wikipedia identifier @rtype: str get_wiki_page_url_for_dblink def get_wiki_page_url_for_dblink(self, dblink) Returns the wikipedia page url for the given DBpedia link (the relation 'http://xmlns.com/foaf/0.1/isPrimaryTopicOf is checked) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wikipedia URL @rtype: str get_wordnet_type_for_dblink def get_wordnet_type_for_dblink(self, dblink) Returns the wordnet type for the given DBpedia link (the relation http://dbpedia.org/property/wordnet_type is checked) It returns the last part of the WN type ((from http://www.w3.org/2006/03/wn/wn20/instances/synset-actor-noun-1 --> synset-actor-noun-1 ) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wordnet type @rtype: str is_person def is_person(self, dblink) Returns True if the link has rdf:type dbpedia:Person, False otherwise @param dblink\" a dbpedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: whether the dblink is a dbpedia person @rtype: str query_dbpedia_for_dblink def query_dbpedia_for_dblink(self, dblink) Returns a dictionary with all the triple relations stored in DBPEDIA for the given entity @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: dictionary with triples @rtype: dict query_dbpedia_for_unique_dblink def query_dbpedia_for_unique_dblink(self, dblink) Perform a check whether a dbpedia resource is unique @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: dictionary with triples @rtype: dict DbpediaOntology This class encapsulates the dbpedia ontology and gives acces to it get_depth def get_depth(self, onto_label) Returns the depth in the ontology hierarchy for the given ontology label (is-a relations) @param onto_label: the ontology label (could be http://dbpedia.org/ontology/SportsTeam or just SportsTeam) @type onto_label: str @return: depth @rtype: int get_ontology_path def get_ontology_path(self, onto_label) Returns the path of ontology classes for the given ontology label (is-a relations) @param onto_label: the ontology label (could be http://dbpedia.org/ontology/SportsTeam or just SportsTeam) @type onto_label: str @return: list of ontology labels @rtype: list is_leaf_class def is_leaf_class(self, onto_label) Checks if the ontology label provided (for instance http://dbpedia.org/ontology/SportsTeam) is a leaf in the DBpedia ontology tree or not It is a leaf if it is not super-class of any other class in the ontology @param onto_label: the ontology label @type onto_label: string @return: whether it is a leaf or not @rtype: bool scrap_resource_page def scrap_resource_page(link) tag def tag(text)","title":"dbpedia"},{"location":"lilacs.memory.data_sources.dbpedia/#module-lilacsmemorydata_sourcesdbpedia","text":"","title":"Module lilacs.memory.data_sources.dbpedia"},{"location":"lilacs.memory.data_sources.dbpedia/#dbpediaenquirer","text":"This class allows to query dbpedia using the Virtuoso SPARQL endpoint and gives access to different type of information","title":"DbpediaEnquirer"},{"location":"lilacs.memory.data_sources.dbpedia/#camel95to95word","text":"def camel_to_word(self, text)","title":"camel_to_word"},{"location":"lilacs.memory.data_sources.dbpedia/#get95all95instances95for95ontology95label","text":"def get_all_instances_for_ontology_label(self, ontology_label, log=False) Given an ontoloy label (like http://dbpedia.org/ontology/SportsTeam), it will return all the entities in DBPEDIA tagged with that label @param ontology_label: the ontology label (http://dbpedia.org/ontology/SportsTeam) @type ontology_label: str @param log: to get log information @type log: bool @return: list of all dbpedia entities belonging to that ontological type @rtype: list","title":"get_all_instances_for_ontology_label"},{"location":"lilacs.memory.data_sources.dbpedia/#get95dbpedia95cons95for95dblink","text":"def get_dbpedia_cons_for_dblink(self, dblink) Returns the DBpedia synonyms for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list","title":"get_dbpedia_cons_for_dblink"},{"location":"lilacs.memory.data_sources.dbpedia/#get95dbpedia95labels95for95dblink","text":"def get_dbpedia_labels_for_dblink(self, dblink) Returns the DBpedia ontology labels for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list","title":"get_dbpedia_labels_for_dblink"},{"location":"lilacs.memory.data_sources.dbpedia/#get95deepest95ontology95class95for95dblink","text":"def get_deepest_ontology_class_for_dblink(self, dblink) Given a dblink (http://dbpedia.org/resource/Tom_Cruise) gets all the possible ontology classes from dbpedia, calculates the depth of each on in the DBpedia ontology and returns the deepest one @param dblink: the dbpedia link @type dblink: string @return: the deespest DBpedia ontology label @rtype: string","title":"get_deepest_ontology_class_for_dblink"},{"location":"lilacs.memory.data_sources.dbpedia/#get95external95urls95for95dblink","text":"def get_external_urls_for_dblink(self, dblink) Returns the DBpedia synonyms for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list","title":"get_external_urls_for_dblink"},{"location":"lilacs.memory.data_sources.dbpedia/#get95language95for95dblink","text":"def get_language_for_dblink(self, dblink) Returns the language given a DBpedia link (xml:lang predicate) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the language (or None if there is no lang) @rtype: str","title":"get_language_for_dblink"},{"location":"lilacs.memory.data_sources.dbpedia/#get95wiki95page95id95for95dblink","text":"def get_wiki_page_id_for_dblink(self, dblink) Returns the wikipedia page id for the given DBpedia link (the relation http://dbpedia.org/ontology/wikiPageID is checked) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wikipedia identifier @rtype: str","title":"get_wiki_page_id_for_dblink"},{"location":"lilacs.memory.data_sources.dbpedia/#get95wiki95page95url95for95dblink","text":"def get_wiki_page_url_for_dblink(self, dblink) Returns the wikipedia page url for the given DBpedia link (the relation 'http://xmlns.com/foaf/0.1/isPrimaryTopicOf is checked) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wikipedia URL @rtype: str","title":"get_wiki_page_url_for_dblink"},{"location":"lilacs.memory.data_sources.dbpedia/#get95wordnet95type95for95dblink","text":"def get_wordnet_type_for_dblink(self, dblink) Returns the wordnet type for the given DBpedia link (the relation http://dbpedia.org/property/wordnet_type is checked) It returns the last part of the WN type ((from http://www.w3.org/2006/03/wn/wn20/instances/synset-actor-noun-1 --> synset-actor-noun-1 ) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wordnet type @rtype: str","title":"get_wordnet_type_for_dblink"},{"location":"lilacs.memory.data_sources.dbpedia/#is95person","text":"def is_person(self, dblink) Returns True if the link has rdf:type dbpedia:Person, False otherwise @param dblink\" a dbpedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: whether the dblink is a dbpedia person @rtype: str","title":"is_person"},{"location":"lilacs.memory.data_sources.dbpedia/#query95dbpedia95for95dblink","text":"def query_dbpedia_for_dblink(self, dblink) Returns a dictionary with all the triple relations stored in DBPEDIA for the given entity @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: dictionary with triples @rtype: dict","title":"query_dbpedia_for_dblink"},{"location":"lilacs.memory.data_sources.dbpedia/#query95dbpedia95for95unique95dblink","text":"def query_dbpedia_for_unique_dblink(self, dblink) Perform a check whether a dbpedia resource is unique @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: dictionary with triples @rtype: dict","title":"query_dbpedia_for_unique_dblink"},{"location":"lilacs.memory.data_sources.dbpedia/#dbpediaontology","text":"This class encapsulates the dbpedia ontology and gives acces to it","title":"DbpediaOntology"},{"location":"lilacs.memory.data_sources.dbpedia/#get95depth","text":"def get_depth(self, onto_label) Returns the depth in the ontology hierarchy for the given ontology label (is-a relations) @param onto_label: the ontology label (could be http://dbpedia.org/ontology/SportsTeam or just SportsTeam) @type onto_label: str @return: depth @rtype: int","title":"get_depth"},{"location":"lilacs.memory.data_sources.dbpedia/#get95ontology95path","text":"def get_ontology_path(self, onto_label) Returns the path of ontology classes for the given ontology label (is-a relations) @param onto_label: the ontology label (could be http://dbpedia.org/ontology/SportsTeam or just SportsTeam) @type onto_label: str @return: list of ontology labels @rtype: list","title":"get_ontology_path"},{"location":"lilacs.memory.data_sources.dbpedia/#is95leaf95class","text":"def is_leaf_class(self, onto_label) Checks if the ontology label provided (for instance http://dbpedia.org/ontology/SportsTeam) is a leaf in the DBpedia ontology tree or not It is a leaf if it is not super-class of any other class in the ontology @param onto_label: the ontology label @type onto_label: string @return: whether it is a leaf or not @rtype: bool","title":"is_leaf_class"},{"location":"lilacs.memory.data_sources.dbpedia/#scrap95resource95page","text":"def scrap_resource_page(link)","title":"scrap_resource_page"},{"location":"lilacs.memory.data_sources.dbpedia/#tag","text":"def tag(text)","title":"tag"},{"location":"lilacs.memory.data_sources.dbpedia_api/","text":"Module lilacs.memory.data_sources.dbpedia_api dbpedia_keyword_api def dbpedia_keyword_api(concept, category='') dbpedia_prefix_api def dbpedia_prefix_api(concept)","title":"dbpedia_api"},{"location":"lilacs.memory.data_sources.dbpedia_api/#module-lilacsmemorydata_sourcesdbpedia_api","text":"","title":"Module lilacs.memory.data_sources.dbpedia_api"},{"location":"lilacs.memory.data_sources.dbpedia_api/#dbpedia95keyword95api","text":"def dbpedia_keyword_api(concept, category='')","title":"dbpedia_keyword_api"},{"location":"lilacs.memory.data_sources.dbpedia_api/#dbpedia95prefix95api","text":"def dbpedia_prefix_api(concept)","title":"dbpedia_prefix_api"},{"location":"lilacs.memory.data_sources.dictionary/","text":"Module lilacs.memory.data_sources.dictionary extract_dictionary_connections def extract_dictionary_connections(subject) get_dictionary def get_dictionary(subject)","title":"dictionary"},{"location":"lilacs.memory.data_sources.dictionary/#module-lilacsmemorydata_sourcesdictionary","text":"","title":"Module lilacs.memory.data_sources.dictionary"},{"location":"lilacs.memory.data_sources.dictionary/#extract95dictionary95connections","text":"def extract_dictionary_connections(subject)","title":"extract_dictionary_connections"},{"location":"lilacs.memory.data_sources.dictionary/#get95dictionary","text":"def get_dictionary(subject)","title":"get_dictionary"},{"location":"lilacs.memory.data_sources.genesis/","text":"Module lilacs.memory.data_sources.genesis genesis_data def genesis_data(text) NOTES: use the source https://github.com/dice-group/GENESIS","title":"genesis"},{"location":"lilacs.memory.data_sources.genesis/#module-lilacsmemorydata_sourcesgenesis","text":"","title":"Module lilacs.memory.data_sources.genesis"},{"location":"lilacs.memory.data_sources.genesis/#genesis95data","text":"def genesis_data(text) NOTES: use the source https://github.com/dice-group/GENESIS","title":"genesis_data"},{"location":"lilacs.memory.data_sources/","text":"Module lilacs.memory.data_sources LILACSKnowledge None dbpedia_class def dbpedia_class(self, keyword, dbpedia_class) dbpedia_organisation def dbpedia_organisation(self, keyword) dbpedia_person def dbpedia_person(self, keyword) dbpedia_place def dbpedia_place(self, keyword) dbpedia_prefix def dbpedia_prefix(self, keyword) dbpedia_sparql def dbpedia_sparql(self, query) dbpedia_species def dbpedia_species(self, keyword) dbpedia_thing def dbpedia_thing(self, keyword) dbpedia_work def dbpedia_work(self, keyword) Module lilacs.memory.data_sources.conceptnet extract_conceptnet_connections def extract_conceptnet_connections(subject) get_conceptnet def get_conceptnet(subject) Module lilacs.memory.data_sources.dbpedia DbpediaEnquirer This class allows to query dbpedia using the Virtuoso SPARQL endpoint and gives access to different type of information camel_to_word def camel_to_word(self, text) get_all_instances_for_ontology_label def get_all_instances_for_ontology_label(self, ontology_label, log=False) Given an ontoloy label (like http://dbpedia.org/ontology/SportsTeam), it will return all the entities in DBPEDIA tagged with that label @param ontology_label: the ontology label (http://dbpedia.org/ontology/SportsTeam) @type ontology_label: str @param log: to get log information @type log: bool @return: list of all dbpedia entities belonging to that ontological type @rtype: list get_dbpedia_cons_for_dblink def get_dbpedia_cons_for_dblink(self, dblink) Returns the DBpedia synonyms for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list get_dbpedia_labels_for_dblink def get_dbpedia_labels_for_dblink(self, dblink) Returns the DBpedia ontology labels for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list get_deepest_ontology_class_for_dblink def get_deepest_ontology_class_for_dblink(self, dblink) Given a dblink (http://dbpedia.org/resource/Tom_Cruise) gets all the possible ontology classes from dbpedia, calculates the depth of each on in the DBpedia ontology and returns the deepest one @param dblink: the dbpedia link @type dblink: string @return: the deespest DBpedia ontology label @rtype: string get_external_urls_for_dblink def get_external_urls_for_dblink(self, dblink) Returns the DBpedia synonyms for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list get_language_for_dblink def get_language_for_dblink(self, dblink) Returns the language given a DBpedia link (xml:lang predicate) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the language (or None if there is no lang) @rtype: str get_wiki_page_id_for_dblink def get_wiki_page_id_for_dblink(self, dblink) Returns the wikipedia page id for the given DBpedia link (the relation http://dbpedia.org/ontology/wikiPageID is checked) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wikipedia identifier @rtype: str get_wiki_page_url_for_dblink def get_wiki_page_url_for_dblink(self, dblink) Returns the wikipedia page url for the given DBpedia link (the relation 'http://xmlns.com/foaf/0.1/isPrimaryTopicOf is checked) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wikipedia URL @rtype: str get_wordnet_type_for_dblink def get_wordnet_type_for_dblink(self, dblink) Returns the wordnet type for the given DBpedia link (the relation http://dbpedia.org/property/wordnet_type is checked) It returns the last part of the WN type ((from http://www.w3.org/2006/03/wn/wn20/instances/synset-actor-noun-1 --> synset-actor-noun-1 ) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wordnet type @rtype: str is_person def is_person(self, dblink) Returns True if the link has rdf:type dbpedia:Person, False otherwise @param dblink\" a dbpedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: whether the dblink is a dbpedia person @rtype: str query_dbpedia_for_dblink def query_dbpedia_for_dblink(self, dblink) Returns a dictionary with all the triple relations stored in DBPEDIA for the given entity @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: dictionary with triples @rtype: dict query_dbpedia_for_unique_dblink def query_dbpedia_for_unique_dblink(self, dblink) Perform a check whether a dbpedia resource is unique @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: dictionary with triples @rtype: dict DbpediaOntology This class encapsulates the dbpedia ontology and gives acces to it get_depth def get_depth(self, onto_label) Returns the depth in the ontology hierarchy for the given ontology label (is-a relations) @param onto_label: the ontology label (could be http://dbpedia.org/ontology/SportsTeam or just SportsTeam) @type onto_label: str @return: depth @rtype: int get_ontology_path def get_ontology_path(self, onto_label) Returns the path of ontology classes for the given ontology label (is-a relations) @param onto_label: the ontology label (could be http://dbpedia.org/ontology/SportsTeam or just SportsTeam) @type onto_label: str @return: list of ontology labels @rtype: list is_leaf_class def is_leaf_class(self, onto_label) Checks if the ontology label provided (for instance http://dbpedia.org/ontology/SportsTeam) is a leaf in the DBpedia ontology tree or not It is a leaf if it is not super-class of any other class in the ontology @param onto_label: the ontology label @type onto_label: string @return: whether it is a leaf or not @rtype: bool scrap_resource_page def scrap_resource_page(link) tag def tag(text) Module lilacs.memory.data_sources.dbpedia_api dbpedia_keyword_api def dbpedia_keyword_api(concept, category='') dbpedia_prefix_api def dbpedia_prefix_api(concept) Module lilacs.memory.data_sources.dictionary extract_dictionary_connections def extract_dictionary_connections(subject) get_dictionary def get_dictionary(subject) Module lilacs.memory.data_sources.genesis genesis_data def genesis_data(text) NOTES: use the source https://github.com/dice-group/GENESIS Module lilacs.memory.data_sources.opencyc download_opencyc def download_opencyc() Module lilacs.memory.data_sources.resources Module lilacs.memory.data_sources.sparql_endpoints Module lilacs.memory.data_sources.wikidata extract_wikidata_connections def extract_wikidata_connections(subject, save=False, db=None) get_wikidata def get_wikidata(subject) Module lilacs.memory.data_sources.wikihow WikiHow None how_to def how_to(subject) parse def parse(url) random def random() search def search(search_term) Module lilacs.memory.data_sources.wikipedia extract_wikipedia_connections def extract_wikipedia_connections(subject, save=False, db=None, nlp=None) get_wikipedia def get_wikipedia(subject) Module lilacs.memory.data_sources.wordnet common_hypernyms def common_hypernyms(word, word2, pos='n') extract_wordnet_connections def extract_wordnet_connections(word) get_antonyms def get_antonyms(word, pos='n') get_definition def get_definition(word, pos='n') get_examples def get_examples(word, pos='n') get_holonyms def get_holonyms(word, pos='n') get_hypernyms def get_hypernyms(word, pos='n') get_hyponyms def get_hyponyms(word, pos='n') get_lemmas def get_lemmas(word, pos='n') get_root_hypernyms def get_root_hypernyms(word, pos='n') wordnet_test def wordnet_test()","title":"data_sources"},{"location":"lilacs.memory.data_sources/#module-lilacsmemorydata_sources","text":"","title":"Module lilacs.memory.data_sources"},{"location":"lilacs.memory.data_sources/#lilacsknowledge","text":"None","title":"LILACSKnowledge"},{"location":"lilacs.memory.data_sources/#dbpedia95class","text":"def dbpedia_class(self, keyword, dbpedia_class)","title":"dbpedia_class"},{"location":"lilacs.memory.data_sources/#dbpedia95organisation","text":"def dbpedia_organisation(self, keyword)","title":"dbpedia_organisation"},{"location":"lilacs.memory.data_sources/#dbpedia95person","text":"def dbpedia_person(self, keyword)","title":"dbpedia_person"},{"location":"lilacs.memory.data_sources/#dbpedia95place","text":"def dbpedia_place(self, keyword)","title":"dbpedia_place"},{"location":"lilacs.memory.data_sources/#dbpedia95prefix","text":"def dbpedia_prefix(self, keyword)","title":"dbpedia_prefix"},{"location":"lilacs.memory.data_sources/#dbpedia95sparql","text":"def dbpedia_sparql(self, query)","title":"dbpedia_sparql"},{"location":"lilacs.memory.data_sources/#dbpedia95species","text":"def dbpedia_species(self, keyword)","title":"dbpedia_species"},{"location":"lilacs.memory.data_sources/#dbpedia95thing","text":"def dbpedia_thing(self, keyword)","title":"dbpedia_thing"},{"location":"lilacs.memory.data_sources/#dbpedia95work","text":"def dbpedia_work(self, keyword)","title":"dbpedia_work"},{"location":"lilacs.memory.data_sources/#module-lilacsmemorydata_sourcesconceptnet","text":"","title":"Module lilacs.memory.data_sources.conceptnet"},{"location":"lilacs.memory.data_sources/#extract95conceptnet95connections","text":"def extract_conceptnet_connections(subject)","title":"extract_conceptnet_connections"},{"location":"lilacs.memory.data_sources/#get95conceptnet","text":"def get_conceptnet(subject)","title":"get_conceptnet"},{"location":"lilacs.memory.data_sources/#module-lilacsmemorydata_sourcesdbpedia","text":"","title":"Module lilacs.memory.data_sources.dbpedia"},{"location":"lilacs.memory.data_sources/#dbpediaenquirer","text":"This class allows to query dbpedia using the Virtuoso SPARQL endpoint and gives access to different type of information","title":"DbpediaEnquirer"},{"location":"lilacs.memory.data_sources/#camel95to95word","text":"def camel_to_word(self, text)","title":"camel_to_word"},{"location":"lilacs.memory.data_sources/#get95all95instances95for95ontology95label","text":"def get_all_instances_for_ontology_label(self, ontology_label, log=False) Given an ontoloy label (like http://dbpedia.org/ontology/SportsTeam), it will return all the entities in DBPEDIA tagged with that label @param ontology_label: the ontology label (http://dbpedia.org/ontology/SportsTeam) @type ontology_label: str @param log: to get log information @type log: bool @return: list of all dbpedia entities belonging to that ontological type @rtype: list","title":"get_all_instances_for_ontology_label"},{"location":"lilacs.memory.data_sources/#get95dbpedia95cons95for95dblink","text":"def get_dbpedia_cons_for_dblink(self, dblink) Returns the DBpedia synonyms for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list","title":"get_dbpedia_cons_for_dblink"},{"location":"lilacs.memory.data_sources/#get95dbpedia95labels95for95dblink","text":"def get_dbpedia_labels_for_dblink(self, dblink) Returns the DBpedia ontology labels for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list","title":"get_dbpedia_labels_for_dblink"},{"location":"lilacs.memory.data_sources/#get95deepest95ontology95class95for95dblink","text":"def get_deepest_ontology_class_for_dblink(self, dblink) Given a dblink (http://dbpedia.org/resource/Tom_Cruise) gets all the possible ontology classes from dbpedia, calculates the depth of each on in the DBpedia ontology and returns the deepest one @param dblink: the dbpedia link @type dblink: string @return: the deespest DBpedia ontology label @rtype: string","title":"get_deepest_ontology_class_for_dblink"},{"location":"lilacs.memory.data_sources/#get95external95urls95for95dblink","text":"def get_external_urls_for_dblink(self, dblink) Returns the DBpedia synonyms for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list","title":"get_external_urls_for_dblink"},{"location":"lilacs.memory.data_sources/#get95language95for95dblink","text":"def get_language_for_dblink(self, dblink) Returns the language given a DBpedia link (xml:lang predicate) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the language (or None if there is no lang) @rtype: str","title":"get_language_for_dblink"},{"location":"lilacs.memory.data_sources/#get95wiki95page95id95for95dblink","text":"def get_wiki_page_id_for_dblink(self, dblink) Returns the wikipedia page id for the given DBpedia link (the relation http://dbpedia.org/ontology/wikiPageID is checked) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wikipedia identifier @rtype: str","title":"get_wiki_page_id_for_dblink"},{"location":"lilacs.memory.data_sources/#get95wiki95page95url95for95dblink","text":"def get_wiki_page_url_for_dblink(self, dblink) Returns the wikipedia page url for the given DBpedia link (the relation 'http://xmlns.com/foaf/0.1/isPrimaryTopicOf is checked) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wikipedia URL @rtype: str","title":"get_wiki_page_url_for_dblink"},{"location":"lilacs.memory.data_sources/#get95wordnet95type95for95dblink","text":"def get_wordnet_type_for_dblink(self, dblink) Returns the wordnet type for the given DBpedia link (the relation http://dbpedia.org/property/wordnet_type is checked) It returns the last part of the WN type ((from http://www.w3.org/2006/03/wn/wn20/instances/synset-actor-noun-1 --> synset-actor-noun-1 ) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wordnet type @rtype: str","title":"get_wordnet_type_for_dblink"},{"location":"lilacs.memory.data_sources/#is95person","text":"def is_person(self, dblink) Returns True if the link has rdf:type dbpedia:Person, False otherwise @param dblink\" a dbpedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: whether the dblink is a dbpedia person @rtype: str","title":"is_person"},{"location":"lilacs.memory.data_sources/#query95dbpedia95for95dblink","text":"def query_dbpedia_for_dblink(self, dblink) Returns a dictionary with all the triple relations stored in DBPEDIA for the given entity @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: dictionary with triples @rtype: dict","title":"query_dbpedia_for_dblink"},{"location":"lilacs.memory.data_sources/#query95dbpedia95for95unique95dblink","text":"def query_dbpedia_for_unique_dblink(self, dblink) Perform a check whether a dbpedia resource is unique @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: dictionary with triples @rtype: dict","title":"query_dbpedia_for_unique_dblink"},{"location":"lilacs.memory.data_sources/#dbpediaontology","text":"This class encapsulates the dbpedia ontology and gives acces to it","title":"DbpediaOntology"},{"location":"lilacs.memory.data_sources/#get95depth","text":"def get_depth(self, onto_label) Returns the depth in the ontology hierarchy for the given ontology label (is-a relations) @param onto_label: the ontology label (could be http://dbpedia.org/ontology/SportsTeam or just SportsTeam) @type onto_label: str @return: depth @rtype: int","title":"get_depth"},{"location":"lilacs.memory.data_sources/#get95ontology95path","text":"def get_ontology_path(self, onto_label) Returns the path of ontology classes for the given ontology label (is-a relations) @param onto_label: the ontology label (could be http://dbpedia.org/ontology/SportsTeam or just SportsTeam) @type onto_label: str @return: list of ontology labels @rtype: list","title":"get_ontology_path"},{"location":"lilacs.memory.data_sources/#is95leaf95class","text":"def is_leaf_class(self, onto_label) Checks if the ontology label provided (for instance http://dbpedia.org/ontology/SportsTeam) is a leaf in the DBpedia ontology tree or not It is a leaf if it is not super-class of any other class in the ontology @param onto_label: the ontology label @type onto_label: string @return: whether it is a leaf or not @rtype: bool","title":"is_leaf_class"},{"location":"lilacs.memory.data_sources/#scrap95resource95page","text":"def scrap_resource_page(link)","title":"scrap_resource_page"},{"location":"lilacs.memory.data_sources/#tag","text":"def tag(text)","title":"tag"},{"location":"lilacs.memory.data_sources/#module-lilacsmemorydata_sourcesdbpedia_api","text":"","title":"Module lilacs.memory.data_sources.dbpedia_api"},{"location":"lilacs.memory.data_sources/#dbpedia95keyword95api","text":"def dbpedia_keyword_api(concept, category='')","title":"dbpedia_keyword_api"},{"location":"lilacs.memory.data_sources/#dbpedia95prefix95api","text":"def dbpedia_prefix_api(concept)","title":"dbpedia_prefix_api"},{"location":"lilacs.memory.data_sources/#module-lilacsmemorydata_sourcesdictionary","text":"","title":"Module lilacs.memory.data_sources.dictionary"},{"location":"lilacs.memory.data_sources/#extract95dictionary95connections","text":"def extract_dictionary_connections(subject)","title":"extract_dictionary_connections"},{"location":"lilacs.memory.data_sources/#get95dictionary","text":"def get_dictionary(subject)","title":"get_dictionary"},{"location":"lilacs.memory.data_sources/#module-lilacsmemorydata_sourcesgenesis","text":"","title":"Module lilacs.memory.data_sources.genesis"},{"location":"lilacs.memory.data_sources/#genesis95data","text":"def genesis_data(text) NOTES: use the source https://github.com/dice-group/GENESIS","title":"genesis_data"},{"location":"lilacs.memory.data_sources/#module-lilacsmemorydata_sourcesopencyc","text":"","title":"Module lilacs.memory.data_sources.opencyc"},{"location":"lilacs.memory.data_sources/#download95opencyc","text":"def download_opencyc()","title":"download_opencyc"},{"location":"lilacs.memory.data_sources/#module-lilacsmemorydata_sourcesresources","text":"","title":"Module lilacs.memory.data_sources.resources"},{"location":"lilacs.memory.data_sources/#module-lilacsmemorydata_sourcessparql_endpoints","text":"","title":"Module lilacs.memory.data_sources.sparql_endpoints"},{"location":"lilacs.memory.data_sources/#module-lilacsmemorydata_sourceswikidata","text":"","title":"Module lilacs.memory.data_sources.wikidata"},{"location":"lilacs.memory.data_sources/#extract95wikidata95connections","text":"def extract_wikidata_connections(subject, save=False, db=None)","title":"extract_wikidata_connections"},{"location":"lilacs.memory.data_sources/#get95wikidata","text":"def get_wikidata(subject)","title":"get_wikidata"},{"location":"lilacs.memory.data_sources/#module-lilacsmemorydata_sourceswikihow","text":"","title":"Module lilacs.memory.data_sources.wikihow"},{"location":"lilacs.memory.data_sources/#wikihow","text":"None","title":"WikiHow"},{"location":"lilacs.memory.data_sources/#how95to","text":"def how_to(subject)","title":"how_to"},{"location":"lilacs.memory.data_sources/#parse","text":"def parse(url)","title":"parse"},{"location":"lilacs.memory.data_sources/#random","text":"def random()","title":"random"},{"location":"lilacs.memory.data_sources/#search","text":"def search(search_term)","title":"search"},{"location":"lilacs.memory.data_sources/#module-lilacsmemorydata_sourceswikipedia","text":"","title":"Module lilacs.memory.data_sources.wikipedia"},{"location":"lilacs.memory.data_sources/#extract95wikipedia95connections","text":"def extract_wikipedia_connections(subject, save=False, db=None, nlp=None)","title":"extract_wikipedia_connections"},{"location":"lilacs.memory.data_sources/#get95wikipedia","text":"def get_wikipedia(subject)","title":"get_wikipedia"},{"location":"lilacs.memory.data_sources/#module-lilacsmemorydata_sourceswordnet","text":"","title":"Module lilacs.memory.data_sources.wordnet"},{"location":"lilacs.memory.data_sources/#common95hypernyms","text":"def common_hypernyms(word, word2, pos='n')","title":"common_hypernyms"},{"location":"lilacs.memory.data_sources/#extract95wordnet95connections","text":"def extract_wordnet_connections(word)","title":"extract_wordnet_connections"},{"location":"lilacs.memory.data_sources/#get95antonyms","text":"def get_antonyms(word, pos='n')","title":"get_antonyms"},{"location":"lilacs.memory.data_sources/#get95definition","text":"def get_definition(word, pos='n')","title":"get_definition"},{"location":"lilacs.memory.data_sources/#get95examples","text":"def get_examples(word, pos='n')","title":"get_examples"},{"location":"lilacs.memory.data_sources/#get95holonyms","text":"def get_holonyms(word, pos='n')","title":"get_holonyms"},{"location":"lilacs.memory.data_sources/#get95hypernyms","text":"def get_hypernyms(word, pos='n')","title":"get_hypernyms"},{"location":"lilacs.memory.data_sources/#get95hyponyms","text":"def get_hyponyms(word, pos='n')","title":"get_hyponyms"},{"location":"lilacs.memory.data_sources/#get95lemmas","text":"def get_lemmas(word, pos='n')","title":"get_lemmas"},{"location":"lilacs.memory.data_sources/#get95root95hypernyms","text":"def get_root_hypernyms(word, pos='n')","title":"get_root_hypernyms"},{"location":"lilacs.memory.data_sources/#wordnet95test","text":"def wordnet_test()","title":"wordnet_test"},{"location":"lilacs.memory.data_sources.opencyc/","text":"Module lilacs.memory.data_sources.opencyc download_opencyc def download_opencyc()","title":"opencyc"},{"location":"lilacs.memory.data_sources.opencyc/#module-lilacsmemorydata_sourcesopencyc","text":"","title":"Module lilacs.memory.data_sources.opencyc"},{"location":"lilacs.memory.data_sources.opencyc/#download95opencyc","text":"def download_opencyc()","title":"download_opencyc"},{"location":"lilacs.memory.data_sources.resources/","text":"Module lilacs.memory.data_sources.resources","title":"resources"},{"location":"lilacs.memory.data_sources.resources/#module-lilacsmemorydata_sourcesresources","text":"","title":"Module lilacs.memory.data_sources.resources"},{"location":"lilacs.memory.data_sources.sparql_endpoints/","text":"Module lilacs.memory.data_sources.sparql_endpoints","title":"sparql_endpoints"},{"location":"lilacs.memory.data_sources.sparql_endpoints/#module-lilacsmemorydata_sourcessparql_endpoints","text":"","title":"Module lilacs.memory.data_sources.sparql_endpoints"},{"location":"lilacs.memory.data_sources.wikidata/","text":"Module lilacs.memory.data_sources.wikidata extract_wikidata_connections def extract_wikidata_connections(subject, save=False, db=None) get_wikidata def get_wikidata(subject)","title":"wikidata"},{"location":"lilacs.memory.data_sources.wikidata/#module-lilacsmemorydata_sourceswikidata","text":"","title":"Module lilacs.memory.data_sources.wikidata"},{"location":"lilacs.memory.data_sources.wikidata/#extract95wikidata95connections","text":"def extract_wikidata_connections(subject, save=False, db=None)","title":"extract_wikidata_connections"},{"location":"lilacs.memory.data_sources.wikidata/#get95wikidata","text":"def get_wikidata(subject)","title":"get_wikidata"},{"location":"lilacs.memory.data_sources.wikihow/","text":"Module lilacs.memory.data_sources.wikihow WikiHow None how_to def how_to(subject) parse def parse(url) random def random() search def search(search_term)","title":"wikihow"},{"location":"lilacs.memory.data_sources.wikihow/#module-lilacsmemorydata_sourceswikihow","text":"","title":"Module lilacs.memory.data_sources.wikihow"},{"location":"lilacs.memory.data_sources.wikihow/#wikihow","text":"None","title":"WikiHow"},{"location":"lilacs.memory.data_sources.wikihow/#how95to","text":"def how_to(subject)","title":"how_to"},{"location":"lilacs.memory.data_sources.wikihow/#parse","text":"def parse(url)","title":"parse"},{"location":"lilacs.memory.data_sources.wikihow/#random","text":"def random()","title":"random"},{"location":"lilacs.memory.data_sources.wikihow/#search","text":"def search(search_term)","title":"search"},{"location":"lilacs.memory.data_sources.wikipedia/","text":"Module lilacs.memory.data_sources.wikipedia extract_wikipedia_connections def extract_wikipedia_connections(subject, save=False, db=None, nlp=None) get_wikipedia def get_wikipedia(subject)","title":"wikipedia"},{"location":"lilacs.memory.data_sources.wikipedia/#module-lilacsmemorydata_sourceswikipedia","text":"","title":"Module lilacs.memory.data_sources.wikipedia"},{"location":"lilacs.memory.data_sources.wikipedia/#extract95wikipedia95connections","text":"def extract_wikipedia_connections(subject, save=False, db=None, nlp=None)","title":"extract_wikipedia_connections"},{"location":"lilacs.memory.data_sources.wikipedia/#get95wikipedia","text":"def get_wikipedia(subject)","title":"get_wikipedia"},{"location":"lilacs.memory.data_sources.wordnet/","text":"Module lilacs.memory.data_sources.wordnet common_hypernyms def common_hypernyms(word, word2, pos='n') extract_wordnet_connections def extract_wordnet_connections(word) get_antonyms def get_antonyms(word, pos='n') get_definition def get_definition(word, pos='n') get_examples def get_examples(word, pos='n') get_holonyms def get_holonyms(word, pos='n') get_hypernyms def get_hypernyms(word, pos='n') get_hyponyms def get_hyponyms(word, pos='n') get_lemmas def get_lemmas(word, pos='n') get_root_hypernyms def get_root_hypernyms(word, pos='n') wordnet_test def wordnet_test()","title":"wordnet"},{"location":"lilacs.memory.data_sources.wordnet/#module-lilacsmemorydata_sourceswordnet","text":"","title":"Module lilacs.memory.data_sources.wordnet"},{"location":"lilacs.memory.data_sources.wordnet/#common95hypernyms","text":"def common_hypernyms(word, word2, pos='n')","title":"common_hypernyms"},{"location":"lilacs.memory.data_sources.wordnet/#extract95wordnet95connections","text":"def extract_wordnet_connections(word)","title":"extract_wordnet_connections"},{"location":"lilacs.memory.data_sources.wordnet/#get95antonyms","text":"def get_antonyms(word, pos='n')","title":"get_antonyms"},{"location":"lilacs.memory.data_sources.wordnet/#get95definition","text":"def get_definition(word, pos='n')","title":"get_definition"},{"location":"lilacs.memory.data_sources.wordnet/#get95examples","text":"def get_examples(word, pos='n')","title":"get_examples"},{"location":"lilacs.memory.data_sources.wordnet/#get95holonyms","text":"def get_holonyms(word, pos='n')","title":"get_holonyms"},{"location":"lilacs.memory.data_sources.wordnet/#get95hypernyms","text":"def get_hypernyms(word, pos='n')","title":"get_hypernyms"},{"location":"lilacs.memory.data_sources.wordnet/#get95hyponyms","text":"def get_hyponyms(word, pos='n')","title":"get_hyponyms"},{"location":"lilacs.memory.data_sources.wordnet/#get95lemmas","text":"def get_lemmas(word, pos='n')","title":"get_lemmas"},{"location":"lilacs.memory.data_sources.wordnet/#get95root95hypernyms","text":"def get_root_hypernyms(word, pos='n')","title":"get_root_hypernyms"},{"location":"lilacs.memory.data_sources.wordnet/#wordnet95test","text":"def wordnet_test()","title":"wordnet_test"},{"location":"lilacs.memory.database/","text":"Module lilacs.memory.database","title":"database"},{"location":"lilacs.memory.database/#module-lilacsmemorydatabase","text":"","title":"Module lilacs.memory.database"},{"location":"lilacs.memory/","text":"Module lilacs.memory Module lilacs.memory.data_sources LILACSKnowledge None dbpedia_class def dbpedia_class(self, keyword, dbpedia_class) dbpedia_organisation def dbpedia_organisation(self, keyword) dbpedia_person def dbpedia_person(self, keyword) dbpedia_place def dbpedia_place(self, keyword) dbpedia_prefix def dbpedia_prefix(self, keyword) dbpedia_sparql def dbpedia_sparql(self, query) dbpedia_species def dbpedia_species(self, keyword) dbpedia_thing def dbpedia_thing(self, keyword) dbpedia_work def dbpedia_work(self, keyword) Module lilacs.memory.data_sources.conceptnet extract_conceptnet_connections def extract_conceptnet_connections(subject) get_conceptnet def get_conceptnet(subject) Module lilacs.memory.data_sources.dbpedia DbpediaEnquirer This class allows to query dbpedia using the Virtuoso SPARQL endpoint and gives access to different type of information camel_to_word def camel_to_word(self, text) get_all_instances_for_ontology_label def get_all_instances_for_ontology_label(self, ontology_label, log=False) Given an ontoloy label (like http://dbpedia.org/ontology/SportsTeam), it will return all the entities in DBPEDIA tagged with that label @param ontology_label: the ontology label (http://dbpedia.org/ontology/SportsTeam) @type ontology_label: str @param log: to get log information @type log: bool @return: list of all dbpedia entities belonging to that ontological type @rtype: list get_dbpedia_cons_for_dblink def get_dbpedia_cons_for_dblink(self, dblink) Returns the DBpedia synonyms for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list get_dbpedia_labels_for_dblink def get_dbpedia_labels_for_dblink(self, dblink) Returns the DBpedia ontology labels for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list get_deepest_ontology_class_for_dblink def get_deepest_ontology_class_for_dblink(self, dblink) Given a dblink (http://dbpedia.org/resource/Tom_Cruise) gets all the possible ontology classes from dbpedia, calculates the depth of each on in the DBpedia ontology and returns the deepest one @param dblink: the dbpedia link @type dblink: string @return: the deespest DBpedia ontology label @rtype: string get_external_urls_for_dblink def get_external_urls_for_dblink(self, dblink) Returns the DBpedia synonyms for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list get_language_for_dblink def get_language_for_dblink(self, dblink) Returns the language given a DBpedia link (xml:lang predicate) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the language (or None if there is no lang) @rtype: str get_wiki_page_id_for_dblink def get_wiki_page_id_for_dblink(self, dblink) Returns the wikipedia page id for the given DBpedia link (the relation http://dbpedia.org/ontology/wikiPageID is checked) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wikipedia identifier @rtype: str get_wiki_page_url_for_dblink def get_wiki_page_url_for_dblink(self, dblink) Returns the wikipedia page url for the given DBpedia link (the relation 'http://xmlns.com/foaf/0.1/isPrimaryTopicOf is checked) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wikipedia URL @rtype: str get_wordnet_type_for_dblink def get_wordnet_type_for_dblink(self, dblink) Returns the wordnet type for the given DBpedia link (the relation http://dbpedia.org/property/wordnet_type is checked) It returns the last part of the WN type ((from http://www.w3.org/2006/03/wn/wn20/instances/synset-actor-noun-1 --> synset-actor-noun-1 ) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wordnet type @rtype: str is_person def is_person(self, dblink) Returns True if the link has rdf:type dbpedia:Person, False otherwise @param dblink\" a dbpedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: whether the dblink is a dbpedia person @rtype: str query_dbpedia_for_dblink def query_dbpedia_for_dblink(self, dblink) Returns a dictionary with all the triple relations stored in DBPEDIA for the given entity @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: dictionary with triples @rtype: dict query_dbpedia_for_unique_dblink def query_dbpedia_for_unique_dblink(self, dblink) Perform a check whether a dbpedia resource is unique @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: dictionary with triples @rtype: dict DbpediaOntology This class encapsulates the dbpedia ontology and gives acces to it get_depth def get_depth(self, onto_label) Returns the depth in the ontology hierarchy for the given ontology label (is-a relations) @param onto_label: the ontology label (could be http://dbpedia.org/ontology/SportsTeam or just SportsTeam) @type onto_label: str @return: depth @rtype: int get_ontology_path def get_ontology_path(self, onto_label) Returns the path of ontology classes for the given ontology label (is-a relations) @param onto_label: the ontology label (could be http://dbpedia.org/ontology/SportsTeam or just SportsTeam) @type onto_label: str @return: list of ontology labels @rtype: list is_leaf_class def is_leaf_class(self, onto_label) Checks if the ontology label provided (for instance http://dbpedia.org/ontology/SportsTeam) is a leaf in the DBpedia ontology tree or not It is a leaf if it is not super-class of any other class in the ontology @param onto_label: the ontology label @type onto_label: string @return: whether it is a leaf or not @rtype: bool scrap_resource_page def scrap_resource_page(link) tag def tag(text) Module lilacs.memory.data_sources.dbpedia_api dbpedia_keyword_api def dbpedia_keyword_api(concept, category='') dbpedia_prefix_api def dbpedia_prefix_api(concept) Module lilacs.memory.data_sources.dictionary extract_dictionary_connections def extract_dictionary_connections(subject) get_dictionary def get_dictionary(subject) Module lilacs.memory.data_sources.genesis genesis_data def genesis_data(text) NOTES: use the source https://github.com/dice-group/GENESIS Module lilacs.memory.data_sources.opencyc download_opencyc def download_opencyc() Module lilacs.memory.data_sources.resources Module lilacs.memory.data_sources.sparql_endpoints Module lilacs.memory.data_sources.wikidata extract_wikidata_connections def extract_wikidata_connections(subject, save=False, db=None) get_wikidata def get_wikidata(subject) Module lilacs.memory.data_sources.wikihow WikiHow None how_to def how_to(subject) parse def parse(url) random def random() search def search(search_term) Module lilacs.memory.data_sources.wikipedia extract_wikipedia_connections def extract_wikipedia_connections(subject, save=False, db=None, nlp=None) get_wikipedia def get_wikipedia(subject) Module lilacs.memory.data_sources.wordnet common_hypernyms def common_hypernyms(word, word2, pos='n') extract_wordnet_connections def extract_wordnet_connections(word) get_antonyms def get_antonyms(word, pos='n') get_definition def get_definition(word, pos='n') get_examples def get_examples(word, pos='n') get_holonyms def get_holonyms(word, pos='n') get_hypernyms def get_hypernyms(word, pos='n') get_hyponyms def get_hyponyms(word, pos='n') get_lemmas def get_lemmas(word, pos='n') get_root_hypernyms def get_root_hypernyms(word, pos='n') wordnet_test def wordnet_test() Module lilacs.memory.database Module lilacs.memory.nodes Concept The most base type Connection The most base type model_to_dict def model_to_dict(obj) props def props(cls) Module lilacs.memory.nodes.short_term ConceptDatabase None add_concept def add_concept(self, name=None, description='', type='idea') add_connection def add_connection(self, source_name, target_name, type='related', strength=50) add_connection_by_id def add_connection_by_id(self, source_id, target_name, type='related', strength=50) commit def commit(self) first_concept_by_name def first_concept_by_name(self, name) get_concept_by_id def get_concept_by_id(self, concept_id) get_concepts def get_concepts(self) get_connection_by_id def get_connection_by_id(self, connection_id) get_connections def get_connections(self) search_concept_by_name def search_concept_by_name(self, name) search_concept_by_type def search_concept_by_type(self, type) search_connection_by_concept def search_connection_by_concept(self, name) search_connection_by_concept_pair def search_connection_by_concept_pair(self, source, target) search_connection_by_concept_pair_id def search_connection_by_concept_pair_id(self, source, target) search_connection_by_type def search_connection_by_type(self, type='related') total_concepts def total_concepts(self) total_connections def total_connections(self) update_timestamp def update_timestamp(self, concept_id, timestamp)","title":"memory"},{"location":"lilacs.memory/#module-lilacsmemory","text":"","title":"Module lilacs.memory"},{"location":"lilacs.memory/#module-lilacsmemorydata_sources","text":"","title":"Module lilacs.memory.data_sources"},{"location":"lilacs.memory/#lilacsknowledge","text":"None","title":"LILACSKnowledge"},{"location":"lilacs.memory/#dbpedia95class","text":"def dbpedia_class(self, keyword, dbpedia_class)","title":"dbpedia_class"},{"location":"lilacs.memory/#dbpedia95organisation","text":"def dbpedia_organisation(self, keyword)","title":"dbpedia_organisation"},{"location":"lilacs.memory/#dbpedia95person","text":"def dbpedia_person(self, keyword)","title":"dbpedia_person"},{"location":"lilacs.memory/#dbpedia95place","text":"def dbpedia_place(self, keyword)","title":"dbpedia_place"},{"location":"lilacs.memory/#dbpedia95prefix","text":"def dbpedia_prefix(self, keyword)","title":"dbpedia_prefix"},{"location":"lilacs.memory/#dbpedia95sparql","text":"def dbpedia_sparql(self, query)","title":"dbpedia_sparql"},{"location":"lilacs.memory/#dbpedia95species","text":"def dbpedia_species(self, keyword)","title":"dbpedia_species"},{"location":"lilacs.memory/#dbpedia95thing","text":"def dbpedia_thing(self, keyword)","title":"dbpedia_thing"},{"location":"lilacs.memory/#dbpedia95work","text":"def dbpedia_work(self, keyword)","title":"dbpedia_work"},{"location":"lilacs.memory/#module-lilacsmemorydata_sourcesconceptnet","text":"","title":"Module lilacs.memory.data_sources.conceptnet"},{"location":"lilacs.memory/#extract95conceptnet95connections","text":"def extract_conceptnet_connections(subject)","title":"extract_conceptnet_connections"},{"location":"lilacs.memory/#get95conceptnet","text":"def get_conceptnet(subject)","title":"get_conceptnet"},{"location":"lilacs.memory/#module-lilacsmemorydata_sourcesdbpedia","text":"","title":"Module lilacs.memory.data_sources.dbpedia"},{"location":"lilacs.memory/#dbpediaenquirer","text":"This class allows to query dbpedia using the Virtuoso SPARQL endpoint and gives access to different type of information","title":"DbpediaEnquirer"},{"location":"lilacs.memory/#camel95to95word","text":"def camel_to_word(self, text)","title":"camel_to_word"},{"location":"lilacs.memory/#get95all95instances95for95ontology95label","text":"def get_all_instances_for_ontology_label(self, ontology_label, log=False) Given an ontoloy label (like http://dbpedia.org/ontology/SportsTeam), it will return all the entities in DBPEDIA tagged with that label @param ontology_label: the ontology label (http://dbpedia.org/ontology/SportsTeam) @type ontology_label: str @param log: to get log information @type log: bool @return: list of all dbpedia entities belonging to that ontological type @rtype: list","title":"get_all_instances_for_ontology_label"},{"location":"lilacs.memory/#get95dbpedia95cons95for95dblink","text":"def get_dbpedia_cons_for_dblink(self, dblink) Returns the DBpedia synonyms for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list","title":"get_dbpedia_cons_for_dblink"},{"location":"lilacs.memory/#get95dbpedia95labels95for95dblink","text":"def get_dbpedia_labels_for_dblink(self, dblink) Returns the DBpedia ontology labels for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list","title":"get_dbpedia_labels_for_dblink"},{"location":"lilacs.memory/#get95deepest95ontology95class95for95dblink","text":"def get_deepest_ontology_class_for_dblink(self, dblink) Given a dblink (http://dbpedia.org/resource/Tom_Cruise) gets all the possible ontology classes from dbpedia, calculates the depth of each on in the DBpedia ontology and returns the deepest one @param dblink: the dbpedia link @type dblink: string @return: the deespest DBpedia ontology label @rtype: string","title":"get_deepest_ontology_class_for_dblink"},{"location":"lilacs.memory/#get95external95urls95for95dblink","text":"def get_external_urls_for_dblink(self, dblink) Returns the DBpedia synonyms for the given DBpedia link (the type http://www.w3.org/1999/02/22-rdf-syntax-ns#type will be checked and only labels containing http://dbpedia.org/ontology/* will be returned @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: list of ontology labels @rtype: list","title":"get_external_urls_for_dblink"},{"location":"lilacs.memory/#get95language95for95dblink","text":"def get_language_for_dblink(self, dblink) Returns the language given a DBpedia link (xml:lang predicate) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the language (or None if there is no lang) @rtype: str","title":"get_language_for_dblink"},{"location":"lilacs.memory/#get95wiki95page95id95for95dblink","text":"def get_wiki_page_id_for_dblink(self, dblink) Returns the wikipedia page id for the given DBpedia link (the relation http://dbpedia.org/ontology/wikiPageID is checked) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wikipedia identifier @rtype: str","title":"get_wiki_page_id_for_dblink"},{"location":"lilacs.memory/#get95wiki95page95url95for95dblink","text":"def get_wiki_page_url_for_dblink(self, dblink) Returns the wikipedia page url for the given DBpedia link (the relation 'http://xmlns.com/foaf/0.1/isPrimaryTopicOf is checked) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wikipedia URL @rtype: str","title":"get_wiki_page_url_for_dblink"},{"location":"lilacs.memory/#get95wordnet95type95for95dblink","text":"def get_wordnet_type_for_dblink(self, dblink) Returns the wordnet type for the given DBpedia link (the relation http://dbpedia.org/property/wordnet_type is checked) It returns the last part of the WN type ((from http://www.w3.org/2006/03/wn/wn20/instances/synset-actor-noun-1 --> synset-actor-noun-1 ) @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: the wordnet type @rtype: str","title":"get_wordnet_type_for_dblink"},{"location":"lilacs.memory/#is95person","text":"def is_person(self, dblink) Returns True if the link has rdf:type dbpedia:Person, False otherwise @param dblink\" a dbpedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: whether the dblink is a dbpedia person @rtype: str","title":"is_person"},{"location":"lilacs.memory/#query95dbpedia95for95dblink","text":"def query_dbpedia_for_dblink(self, dblink) Returns a dictionary with all the triple relations stored in DBPEDIA for the given entity @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: dictionary with triples @rtype: dict","title":"query_dbpedia_for_dblink"},{"location":"lilacs.memory/#query95dbpedia95for95unique95dblink","text":"def query_dbpedia_for_unique_dblink(self, dblink) Perform a check whether a dbpedia resource is unique @param dblink: a dbedia link (http://dbpedia.org/resource/Tom_Cruise) @type dblink: str @return: dictionary with triples @rtype: dict","title":"query_dbpedia_for_unique_dblink"},{"location":"lilacs.memory/#dbpediaontology","text":"This class encapsulates the dbpedia ontology and gives acces to it","title":"DbpediaOntology"},{"location":"lilacs.memory/#get95depth","text":"def get_depth(self, onto_label) Returns the depth in the ontology hierarchy for the given ontology label (is-a relations) @param onto_label: the ontology label (could be http://dbpedia.org/ontology/SportsTeam or just SportsTeam) @type onto_label: str @return: depth @rtype: int","title":"get_depth"},{"location":"lilacs.memory/#get95ontology95path","text":"def get_ontology_path(self, onto_label) Returns the path of ontology classes for the given ontology label (is-a relations) @param onto_label: the ontology label (could be http://dbpedia.org/ontology/SportsTeam or just SportsTeam) @type onto_label: str @return: list of ontology labels @rtype: list","title":"get_ontology_path"},{"location":"lilacs.memory/#is95leaf95class","text":"def is_leaf_class(self, onto_label) Checks if the ontology label provided (for instance http://dbpedia.org/ontology/SportsTeam) is a leaf in the DBpedia ontology tree or not It is a leaf if it is not super-class of any other class in the ontology @param onto_label: the ontology label @type onto_label: string @return: whether it is a leaf or not @rtype: bool","title":"is_leaf_class"},{"location":"lilacs.memory/#scrap95resource95page","text":"def scrap_resource_page(link)","title":"scrap_resource_page"},{"location":"lilacs.memory/#tag","text":"def tag(text)","title":"tag"},{"location":"lilacs.memory/#module-lilacsmemorydata_sourcesdbpedia_api","text":"","title":"Module lilacs.memory.data_sources.dbpedia_api"},{"location":"lilacs.memory/#dbpedia95keyword95api","text":"def dbpedia_keyword_api(concept, category='')","title":"dbpedia_keyword_api"},{"location":"lilacs.memory/#dbpedia95prefix95api","text":"def dbpedia_prefix_api(concept)","title":"dbpedia_prefix_api"},{"location":"lilacs.memory/#module-lilacsmemorydata_sourcesdictionary","text":"","title":"Module lilacs.memory.data_sources.dictionary"},{"location":"lilacs.memory/#extract95dictionary95connections","text":"def extract_dictionary_connections(subject)","title":"extract_dictionary_connections"},{"location":"lilacs.memory/#get95dictionary","text":"def get_dictionary(subject)","title":"get_dictionary"},{"location":"lilacs.memory/#module-lilacsmemorydata_sourcesgenesis","text":"","title":"Module lilacs.memory.data_sources.genesis"},{"location":"lilacs.memory/#genesis95data","text":"def genesis_data(text) NOTES: use the source https://github.com/dice-group/GENESIS","title":"genesis_data"},{"location":"lilacs.memory/#module-lilacsmemorydata_sourcesopencyc","text":"","title":"Module lilacs.memory.data_sources.opencyc"},{"location":"lilacs.memory/#download95opencyc","text":"def download_opencyc()","title":"download_opencyc"},{"location":"lilacs.memory/#module-lilacsmemorydata_sourcesresources","text":"","title":"Module lilacs.memory.data_sources.resources"},{"location":"lilacs.memory/#module-lilacsmemorydata_sourcessparql_endpoints","text":"","title":"Module lilacs.memory.data_sources.sparql_endpoints"},{"location":"lilacs.memory/#module-lilacsmemorydata_sourceswikidata","text":"","title":"Module lilacs.memory.data_sources.wikidata"},{"location":"lilacs.memory/#extract95wikidata95connections","text":"def extract_wikidata_connections(subject, save=False, db=None)","title":"extract_wikidata_connections"},{"location":"lilacs.memory/#get95wikidata","text":"def get_wikidata(subject)","title":"get_wikidata"},{"location":"lilacs.memory/#module-lilacsmemorydata_sourceswikihow","text":"","title":"Module lilacs.memory.data_sources.wikihow"},{"location":"lilacs.memory/#wikihow","text":"None","title":"WikiHow"},{"location":"lilacs.memory/#how95to","text":"def how_to(subject)","title":"how_to"},{"location":"lilacs.memory/#parse","text":"def parse(url)","title":"parse"},{"location":"lilacs.memory/#random","text":"def random()","title":"random"},{"location":"lilacs.memory/#search","text":"def search(search_term)","title":"search"},{"location":"lilacs.memory/#module-lilacsmemorydata_sourceswikipedia","text":"","title":"Module lilacs.memory.data_sources.wikipedia"},{"location":"lilacs.memory/#extract95wikipedia95connections","text":"def extract_wikipedia_connections(subject, save=False, db=None, nlp=None)","title":"extract_wikipedia_connections"},{"location":"lilacs.memory/#get95wikipedia","text":"def get_wikipedia(subject)","title":"get_wikipedia"},{"location":"lilacs.memory/#module-lilacsmemorydata_sourceswordnet","text":"","title":"Module lilacs.memory.data_sources.wordnet"},{"location":"lilacs.memory/#common95hypernyms","text":"def common_hypernyms(word, word2, pos='n')","title":"common_hypernyms"},{"location":"lilacs.memory/#extract95wordnet95connections","text":"def extract_wordnet_connections(word)","title":"extract_wordnet_connections"},{"location":"lilacs.memory/#get95antonyms","text":"def get_antonyms(word, pos='n')","title":"get_antonyms"},{"location":"lilacs.memory/#get95definition","text":"def get_definition(word, pos='n')","title":"get_definition"},{"location":"lilacs.memory/#get95examples","text":"def get_examples(word, pos='n')","title":"get_examples"},{"location":"lilacs.memory/#get95holonyms","text":"def get_holonyms(word, pos='n')","title":"get_holonyms"},{"location":"lilacs.memory/#get95hypernyms","text":"def get_hypernyms(word, pos='n')","title":"get_hypernyms"},{"location":"lilacs.memory/#get95hyponyms","text":"def get_hyponyms(word, pos='n')","title":"get_hyponyms"},{"location":"lilacs.memory/#get95lemmas","text":"def get_lemmas(word, pos='n')","title":"get_lemmas"},{"location":"lilacs.memory/#get95root95hypernyms","text":"def get_root_hypernyms(word, pos='n')","title":"get_root_hypernyms"},{"location":"lilacs.memory/#wordnet95test","text":"def wordnet_test()","title":"wordnet_test"},{"location":"lilacs.memory/#module-lilacsmemorydatabase","text":"","title":"Module lilacs.memory.database"},{"location":"lilacs.memory/#module-lilacsmemorynodes","text":"","title":"Module lilacs.memory.nodes"},{"location":"lilacs.memory/#concept","text":"The most base type","title":"Concept"},{"location":"lilacs.memory/#connection","text":"The most base type","title":"Connection"},{"location":"lilacs.memory/#model95to95dict","text":"def model_to_dict(obj)","title":"model_to_dict"},{"location":"lilacs.memory/#props","text":"def props(cls)","title":"props"},{"location":"lilacs.memory/#module-lilacsmemorynodesshort_term","text":"","title":"Module lilacs.memory.nodes.short_term"},{"location":"lilacs.memory/#conceptdatabase","text":"None","title":"ConceptDatabase"},{"location":"lilacs.memory/#add95concept","text":"def add_concept(self, name=None, description='', type='idea')","title":"add_concept"},{"location":"lilacs.memory/#add95connection","text":"def add_connection(self, source_name, target_name, type='related', strength=50)","title":"add_connection"},{"location":"lilacs.memory/#add95connection95by95id","text":"def add_connection_by_id(self, source_id, target_name, type='related', strength=50)","title":"add_connection_by_id"},{"location":"lilacs.memory/#commit","text":"def commit(self)","title":"commit"},{"location":"lilacs.memory/#first95concept95by95name","text":"def first_concept_by_name(self, name)","title":"first_concept_by_name"},{"location":"lilacs.memory/#get95concept95by95id","text":"def get_concept_by_id(self, concept_id)","title":"get_concept_by_id"},{"location":"lilacs.memory/#get95concepts","text":"def get_concepts(self)","title":"get_concepts"},{"location":"lilacs.memory/#get95connection95by95id","text":"def get_connection_by_id(self, connection_id)","title":"get_connection_by_id"},{"location":"lilacs.memory/#get95connections","text":"def get_connections(self)","title":"get_connections"},{"location":"lilacs.memory/#search95concept95by95name","text":"def search_concept_by_name(self, name)","title":"search_concept_by_name"},{"location":"lilacs.memory/#search95concept95by95type","text":"def search_concept_by_type(self, type)","title":"search_concept_by_type"},{"location":"lilacs.memory/#search95connection95by95concept","text":"def search_connection_by_concept(self, name)","title":"search_connection_by_concept"},{"location":"lilacs.memory/#search95connection95by95concept95pair","text":"def search_connection_by_concept_pair(self, source, target)","title":"search_connection_by_concept_pair"},{"location":"lilacs.memory/#search95connection95by95concept95pair95id","text":"def search_connection_by_concept_pair_id(self, source, target)","title":"search_connection_by_concept_pair_id"},{"location":"lilacs.memory/#search95connection95by95type","text":"def search_connection_by_type(self, type='related')","title":"search_connection_by_type"},{"location":"lilacs.memory/#total95concepts","text":"def total_concepts(self)","title":"total_concepts"},{"location":"lilacs.memory/#total95connections","text":"def total_connections(self)","title":"total_connections"},{"location":"lilacs.memory/#update95timestamp","text":"def update_timestamp(self, concept_id, timestamp)","title":"update_timestamp"},{"location":"lilacs.memory.nodes/","text":"Module lilacs.memory.nodes Concept The most base type Connection The most base type model_to_dict def model_to_dict(obj) props def props(cls) Module lilacs.memory.nodes.short_term ConceptDatabase None add_concept def add_concept(self, name=None, description='', type='idea') add_connection def add_connection(self, source_name, target_name, type='related', strength=50) add_connection_by_id def add_connection_by_id(self, source_id, target_name, type='related', strength=50) commit def commit(self) first_concept_by_name def first_concept_by_name(self, name) get_concept_by_id def get_concept_by_id(self, concept_id) get_concepts def get_concepts(self) get_connection_by_id def get_connection_by_id(self, connection_id) get_connections def get_connections(self) search_concept_by_name def search_concept_by_name(self, name) search_concept_by_type def search_concept_by_type(self, type) search_connection_by_concept def search_connection_by_concept(self, name) search_connection_by_concept_pair def search_connection_by_concept_pair(self, source, target) search_connection_by_concept_pair_id def search_connection_by_concept_pair_id(self, source, target) search_connection_by_type def search_connection_by_type(self, type='related') total_concepts def total_concepts(self) total_connections def total_connections(self) update_timestamp def update_timestamp(self, concept_id, timestamp)","title":"nodes"},{"location":"lilacs.memory.nodes/#module-lilacsmemorynodes","text":"","title":"Module lilacs.memory.nodes"},{"location":"lilacs.memory.nodes/#concept","text":"The most base type","title":"Concept"},{"location":"lilacs.memory.nodes/#connection","text":"The most base type","title":"Connection"},{"location":"lilacs.memory.nodes/#model95to95dict","text":"def model_to_dict(obj)","title":"model_to_dict"},{"location":"lilacs.memory.nodes/#props","text":"def props(cls)","title":"props"},{"location":"lilacs.memory.nodes/#module-lilacsmemorynodesshort_term","text":"","title":"Module lilacs.memory.nodes.short_term"},{"location":"lilacs.memory.nodes/#conceptdatabase","text":"None","title":"ConceptDatabase"},{"location":"lilacs.memory.nodes/#add95concept","text":"def add_concept(self, name=None, description='', type='idea')","title":"add_concept"},{"location":"lilacs.memory.nodes/#add95connection","text":"def add_connection(self, source_name, target_name, type='related', strength=50)","title":"add_connection"},{"location":"lilacs.memory.nodes/#add95connection95by95id","text":"def add_connection_by_id(self, source_id, target_name, type='related', strength=50)","title":"add_connection_by_id"},{"location":"lilacs.memory.nodes/#commit","text":"def commit(self)","title":"commit"},{"location":"lilacs.memory.nodes/#first95concept95by95name","text":"def first_concept_by_name(self, name)","title":"first_concept_by_name"},{"location":"lilacs.memory.nodes/#get95concept95by95id","text":"def get_concept_by_id(self, concept_id)","title":"get_concept_by_id"},{"location":"lilacs.memory.nodes/#get95concepts","text":"def get_concepts(self)","title":"get_concepts"},{"location":"lilacs.memory.nodes/#get95connection95by95id","text":"def get_connection_by_id(self, connection_id)","title":"get_connection_by_id"},{"location":"lilacs.memory.nodes/#get95connections","text":"def get_connections(self)","title":"get_connections"},{"location":"lilacs.memory.nodes/#search95concept95by95name","text":"def search_concept_by_name(self, name)","title":"search_concept_by_name"},{"location":"lilacs.memory.nodes/#search95concept95by95type","text":"def search_concept_by_type(self, type)","title":"search_concept_by_type"},{"location":"lilacs.memory.nodes/#search95connection95by95concept","text":"def search_connection_by_concept(self, name)","title":"search_connection_by_concept"},{"location":"lilacs.memory.nodes/#search95connection95by95concept95pair","text":"def search_connection_by_concept_pair(self, source, target)","title":"search_connection_by_concept_pair"},{"location":"lilacs.memory.nodes/#search95connection95by95concept95pair95id","text":"def search_connection_by_concept_pair_id(self, source, target)","title":"search_connection_by_concept_pair_id"},{"location":"lilacs.memory.nodes/#search95connection95by95type","text":"def search_connection_by_type(self, type='related')","title":"search_connection_by_type"},{"location":"lilacs.memory.nodes/#total95concepts","text":"def total_concepts(self)","title":"total_concepts"},{"location":"lilacs.memory.nodes/#total95connections","text":"def total_connections(self)","title":"total_connections"},{"location":"lilacs.memory.nodes/#update95timestamp","text":"def update_timestamp(self, concept_id, timestamp)","title":"update_timestamp"},{"location":"lilacs.memory.nodes.short_term/","text":"Module lilacs.memory.nodes.short_term ConceptDatabase None add_concept def add_concept(self, name=None, description='', type='idea') add_connection def add_connection(self, source_name, target_name, type='related', strength=50) add_connection_by_id def add_connection_by_id(self, source_id, target_name, type='related', strength=50) commit def commit(self) first_concept_by_name def first_concept_by_name(self, name) get_concept_by_id def get_concept_by_id(self, concept_id) get_concepts def get_concepts(self) get_connection_by_id def get_connection_by_id(self, connection_id) get_connections def get_connections(self) search_concept_by_name def search_concept_by_name(self, name) search_concept_by_type def search_concept_by_type(self, type) search_connection_by_concept def search_connection_by_concept(self, name) search_connection_by_concept_pair def search_connection_by_concept_pair(self, source, target) search_connection_by_concept_pair_id def search_connection_by_concept_pair_id(self, source, target) search_connection_by_type def search_connection_by_type(self, type='related') total_concepts def total_concepts(self) total_connections def total_connections(self) update_timestamp def update_timestamp(self, concept_id, timestamp)","title":"short_term"},{"location":"lilacs.memory.nodes.short_term/#module-lilacsmemorynodesshort_term","text":"","title":"Module lilacs.memory.nodes.short_term"},{"location":"lilacs.memory.nodes.short_term/#conceptdatabase","text":"None","title":"ConceptDatabase"},{"location":"lilacs.memory.nodes.short_term/#add95concept","text":"def add_concept(self, name=None, description='', type='idea')","title":"add_concept"},{"location":"lilacs.memory.nodes.short_term/#add95connection","text":"def add_connection(self, source_name, target_name, type='related', strength=50)","title":"add_connection"},{"location":"lilacs.memory.nodes.short_term/#add95connection95by95id","text":"def add_connection_by_id(self, source_id, target_name, type='related', strength=50)","title":"add_connection_by_id"},{"location":"lilacs.memory.nodes.short_term/#commit","text":"def commit(self)","title":"commit"},{"location":"lilacs.memory.nodes.short_term/#first95concept95by95name","text":"def first_concept_by_name(self, name)","title":"first_concept_by_name"},{"location":"lilacs.memory.nodes.short_term/#get95concept95by95id","text":"def get_concept_by_id(self, concept_id)","title":"get_concept_by_id"},{"location":"lilacs.memory.nodes.short_term/#get95concepts","text":"def get_concepts(self)","title":"get_concepts"},{"location":"lilacs.memory.nodes.short_term/#get95connection95by95id","text":"def get_connection_by_id(self, connection_id)","title":"get_connection_by_id"},{"location":"lilacs.memory.nodes.short_term/#get95connections","text":"def get_connections(self)","title":"get_connections"},{"location":"lilacs.memory.nodes.short_term/#search95concept95by95name","text":"def search_concept_by_name(self, name)","title":"search_concept_by_name"},{"location":"lilacs.memory.nodes.short_term/#search95concept95by95type","text":"def search_concept_by_type(self, type)","title":"search_concept_by_type"},{"location":"lilacs.memory.nodes.short_term/#search95connection95by95concept","text":"def search_connection_by_concept(self, name)","title":"search_connection_by_concept"},{"location":"lilacs.memory.nodes.short_term/#search95connection95by95concept95pair","text":"def search_connection_by_concept_pair(self, source, target)","title":"search_connection_by_concept_pair"},{"location":"lilacs.memory.nodes.short_term/#search95connection95by95concept95pair95id","text":"def search_connection_by_concept_pair_id(self, source, target)","title":"search_connection_by_concept_pair_id"},{"location":"lilacs.memory.nodes.short_term/#search95connection95by95type","text":"def search_connection_by_type(self, type='related')","title":"search_connection_by_type"},{"location":"lilacs.memory.nodes.short_term/#total95concepts","text":"def total_concepts(self)","title":"total_concepts"},{"location":"lilacs.memory.nodes.short_term/#total95connections","text":"def total_connections(self)","title":"total_connections"},{"location":"lilacs.memory.nodes.short_term/#update95timestamp","text":"def update_timestamp(self, concept_id, timestamp)","title":"update_timestamp"},{"location":"lilacs.messagebus.client/","text":"Module lilacs.messagebus.client Module lilacs.messagebus.client.ws WebsocketClient None build_url def build_url(host, port, route, ssl=False) close def close(self) create_client def create_client(self) emit def emit(self, message) on def on(self, event_name, func) on_close def on_close(self, ws) on_error def on_error(self, ws, error) On error start trying to reconnect to the websocket. on_message def on_message(self, ws, message) on_open def on_open(self, ws) once def once(self, event_name, func) remove def remove(self, event_name, func) remove_all_listeners def remove_all_listeners(self, event_name) Remove all listeners connected to event_name. Args: event_name: event from which to remove listeners run_forever def run_forever(self) wait_for_response def wait_for_response(self, message, reply_type=None, timeout=None) Send a message and wait for a response. Args: message (Message): message to send reply_type (str): the message type of the expected reply. Defaults to \"<message.type>.response\". timeout: seconds to wait before timeout, defaults to 3 Returns: The received message or None if the response timed out echo def echo()","title":"client"},{"location":"lilacs.messagebus.client/#module-lilacsmessagebusclient","text":"","title":"Module lilacs.messagebus.client"},{"location":"lilacs.messagebus.client/#module-lilacsmessagebusclientws","text":"","title":"Module lilacs.messagebus.client.ws"},{"location":"lilacs.messagebus.client/#websocketclient","text":"None","title":"WebsocketClient"},{"location":"lilacs.messagebus.client/#build95url","text":"def build_url(host, port, route, ssl=False)","title":"build_url"},{"location":"lilacs.messagebus.client/#close","text":"def close(self)","title":"close"},{"location":"lilacs.messagebus.client/#create95client","text":"def create_client(self)","title":"create_client"},{"location":"lilacs.messagebus.client/#emit","text":"def emit(self, message)","title":"emit"},{"location":"lilacs.messagebus.client/#on","text":"def on(self, event_name, func)","title":"on"},{"location":"lilacs.messagebus.client/#on95close","text":"def on_close(self, ws)","title":"on_close"},{"location":"lilacs.messagebus.client/#on95error","text":"def on_error(self, ws, error) On error start trying to reconnect to the websocket.","title":"on_error"},{"location":"lilacs.messagebus.client/#on95message","text":"def on_message(self, ws, message)","title":"on_message"},{"location":"lilacs.messagebus.client/#on95open","text":"def on_open(self, ws)","title":"on_open"},{"location":"lilacs.messagebus.client/#once","text":"def once(self, event_name, func)","title":"once"},{"location":"lilacs.messagebus.client/#remove","text":"def remove(self, event_name, func)","title":"remove"},{"location":"lilacs.messagebus.client/#remove95all95listeners","text":"def remove_all_listeners(self, event_name) Remove all listeners connected to event_name. Args: event_name: event from which to remove listeners","title":"remove_all_listeners"},{"location":"lilacs.messagebus.client/#run95forever","text":"def run_forever(self)","title":"run_forever"},{"location":"lilacs.messagebus.client/#wait95for95response","text":"def wait_for_response(self, message, reply_type=None, timeout=None) Send a message and wait for a response. Args: message (Message): message to send reply_type (str): the message type of the expected reply. Defaults to \"<message.type>.response\". timeout: seconds to wait before timeout, defaults to 3 Returns: The received message or None if the response timed out","title":"wait_for_response"},{"location":"lilacs.messagebus.client/#echo","text":"def echo()","title":"echo"},{"location":"lilacs.messagebus.client.ws/","text":"Module lilacs.messagebus.client.ws WebsocketClient None build_url def build_url(host, port, route, ssl=False) close def close(self) create_client def create_client(self) emit def emit(self, message) on def on(self, event_name, func) on_close def on_close(self, ws) on_error def on_error(self, ws, error) On error start trying to reconnect to the websocket. on_message def on_message(self, ws, message) on_open def on_open(self, ws) once def once(self, event_name, func) remove def remove(self, event_name, func) remove_all_listeners def remove_all_listeners(self, event_name) Remove all listeners connected to event_name. Args: event_name: event from which to remove listeners run_forever def run_forever(self) wait_for_response def wait_for_response(self, message, reply_type=None, timeout=None) Send a message and wait for a response. Args: message (Message): message to send reply_type (str): the message type of the expected reply. Defaults to \"<message.type>.response\". timeout: seconds to wait before timeout, defaults to 3 Returns: The received message or None if the response timed out echo def echo()","title":"ws"},{"location":"lilacs.messagebus.client.ws/#module-lilacsmessagebusclientws","text":"","title":"Module lilacs.messagebus.client.ws"},{"location":"lilacs.messagebus.client.ws/#websocketclient","text":"None","title":"WebsocketClient"},{"location":"lilacs.messagebus.client.ws/#build95url","text":"def build_url(host, port, route, ssl=False)","title":"build_url"},{"location":"lilacs.messagebus.client.ws/#close","text":"def close(self)","title":"close"},{"location":"lilacs.messagebus.client.ws/#create95client","text":"def create_client(self)","title":"create_client"},{"location":"lilacs.messagebus.client.ws/#emit","text":"def emit(self, message)","title":"emit"},{"location":"lilacs.messagebus.client.ws/#on","text":"def on(self, event_name, func)","title":"on"},{"location":"lilacs.messagebus.client.ws/#on95close","text":"def on_close(self, ws)","title":"on_close"},{"location":"lilacs.messagebus.client.ws/#on95error","text":"def on_error(self, ws, error) On error start trying to reconnect to the websocket.","title":"on_error"},{"location":"lilacs.messagebus.client.ws/#on95message","text":"def on_message(self, ws, message)","title":"on_message"},{"location":"lilacs.messagebus.client.ws/#on95open","text":"def on_open(self, ws)","title":"on_open"},{"location":"lilacs.messagebus.client.ws/#once","text":"def once(self, event_name, func)","title":"once"},{"location":"lilacs.messagebus.client.ws/#remove","text":"def remove(self, event_name, func)","title":"remove"},{"location":"lilacs.messagebus.client.ws/#remove95all95listeners","text":"def remove_all_listeners(self, event_name) Remove all listeners connected to event_name. Args: event_name: event from which to remove listeners","title":"remove_all_listeners"},{"location":"lilacs.messagebus.client.ws/#run95forever","text":"def run_forever(self)","title":"run_forever"},{"location":"lilacs.messagebus.client.ws/#wait95for95response","text":"def wait_for_response(self, message, reply_type=None, timeout=None) Send a message and wait for a response. Args: message (Message): message to send reply_type (str): the message type of the expected reply. Defaults to \"<message.type>.response\". timeout: seconds to wait before timeout, defaults to 3 Returns: The received message or None if the response timed out","title":"wait_for_response"},{"location":"lilacs.messagebus.client.ws/#echo","text":"def echo()","title":"echo"},{"location":"lilacs.messagebus/","text":"Module lilacs.messagebus create_echo_function def create_echo_function(name, blacklist=None, whitelist=None) Module lilacs.messagebus.client Module lilacs.messagebus.client.ws WebsocketClient None build_url def build_url(host, port, route, ssl=False) close def close(self) create_client def create_client(self) emit def emit(self, message) on def on(self, event_name, func) on_close def on_close(self, ws) on_error def on_error(self, ws, error) On error start trying to reconnect to the websocket. on_message def on_message(self, ws, message) on_open def on_open(self, ws) once def once(self, event_name, func) remove def remove(self, event_name, func) remove_all_listeners def remove_all_listeners(self, event_name) Remove all listeners connected to event_name. Args: event_name: event from which to remove listeners run_forever def run_forever(self) wait_for_response def wait_for_response(self, message, reply_type=None, timeout=None) Send a message and wait for a response. Args: message (Message): message to send reply_type (str): the message type of the expected reply. Defaults to \"<message.type>.response\". timeout: seconds to wait before timeout, defaults to 3 Returns: The received message or None if the response timed out echo def echo() Module lilacs.messagebus.message Message Holds and manipulates data sent over the websocket Message objects will be used to send information back and forth between processes of Mycroft. Attributes: msg_type (str): type of data sent within the message. data (dict): data sent within the message context: info about the message not part of data such as source, destination or domain. deserialize def deserialize(value) This takes a string and constructs a message object. This makes it easy to take strings from the websocket and create a message object. This uses json loads to get the info and generate the message object. Args: value(str): This is the json string received from the websocket Returns: Message: message object constructed from the json string passed int the function. value(str): This is the string received from the websocket forward def forward(self, msg_type, data) Create a new message with the same context as this message but with the type and data supplied as arguments. Arguments: msg_type: (str) message type data: (dict) data the message will carry Returns: Message object to forward publish def publish(self, msg_type, data, context=None) Copy the original context and add passed in context. Delete any target in the new context. Return a new message object with passed in data and new context. Type remains unchanged. Args: msg_type (str): type of message data (dict): date to send with message context: context added to existing context Returns: Message: Message object to publish reply def reply(self, msg_type, data, context=None) Construct a reply message for a given message This will take the same parameters as a message object but use the current message object as a reference. It will copy the context from the existing message object and add any context passed in to the function. Check for a target passed in to the function from the data object and add that to the context as a target. If the context has a client name then that will become the target in the context. The new message will then have data passed in plus the new context generated. Args: msg_type (str): type of message data (dict): data for message context: intented context for new message Returns: Message: Message object to be used on the reply to the message response def response(self, data=None, context=None) Construct a response message for the message Constructs a reply with the data and appends the expected \".response\" to the message Args: data (dict): message data context (dict): message context Returns (Message) message with the type modified to match default response serialize def serialize(self) This returns a string of the message info. This makes it easy to send over a websocket. This uses json dumps to generate the string with type, data and context Returns: str: a json string representation of the message. Module lilacs.messagebus.service Module lilacs.messagebus.service.main main def main() Module lilacs.messagebus.service.ws WebsocketEventHandler Subclass this class to create a basic WebSocket handler. Override on_message to handle incoming messages, and use write_message to send messages to the client. You can also override open and on_close to handle opened and closed connections. Custom upgrade response headers can be sent by overriding ~tornado.web.RequestHandler.set_default_headers or ~tornado.web.RequestHandler.prepare . See http://dev.w3.org/html5/websockets/ for details on the JavaScript interface. The protocol is specified at http://tools.ietf.org/html/rfc6455. Here is an example WebSocket handler that echos back all received messages back to the client: .. testcode:: class EchoWebSocket(tornado.websocket.WebSocketHandler): def open(self): print(\"WebSocket opened\") def on_message(self, message): self.write_message(u\"You said: \" + message) def on_close(self): print(\"WebSocket closed\") .. testoutput:: :hide: WebSockets are not standard HTTP connections. The \"handshake\" is HTTP, but after the handshake, the protocol is message-based. Consequently, most of the Tornado HTTP facilities are not available in handlers of this type. The only communication methods available to you are write_message() , ping() , and close() . Likewise, your request handler class should implement open() method rather than get() or post() . If you map the handler above to /websocket in your application, you can invoke it in JavaScript with:: var ws = new WebSocket(\"ws://localhost:8888/websocket\"); ws.onopen = function() { ws.send(\"Hello, world\"); }; ws.onmessage = function (evt) { alert(evt.data); }; This script pops up an alert box that says \"You said: Hello, world\". Web browsers allow any site to open a websocket connection to any other, instead of using the same-origin policy that governs other network access from javascript. This can be surprising and is a potential security hole, so since Tornado 4.0 WebSocketHandler requires applications that wish to receive cross-origin websockets to opt in by overriding the ~WebSocketHandler.check_origin method (see that method's docs for details). Failure to do so is the most likely cause of 403 errors when making a websocket connection. When using a secure websocket connection ( wss:// ) with a self-signed certificate, the connection from a browser may fail because it wants to show the \"accept this certificate\" dialog but has nowhere to show it. You must first visit a regular HTML page using the same certificate to accept it before the websocket connection will succeed. If the application setting websocket_ping_interval has a non-zero value, a ping will be sent periodically, and the connection will be closed if a response is not received before the websocket_ping_timeout . Messages larger than the websocket_max_message_size application setting (default 10MiB) will not be accepted. .. versionchanged:: 4.5 Added websocket_ping_interval , websocket_ping_timeout , and websocket_max_message_size . check_origin def check_origin(self, origin) Override to enable support for allowing alternate origins. The origin argument is the value of the Origin HTTP header, the url responsible for initiating this request. This method is not called for clients that do not send this header; such requests are always allowed (because all browsers that implement WebSockets support this header, and non-browser clients do not have the same cross-site security concerns). Should return True to accept the request or False to reject it. By default, rejects all requests with an origin on a host other than this one. This is a security protection against cross site scripting attacks on browsers, since WebSockets are allowed to bypass the usual same-origin policies and don't use CORS headers. .. warning:: This is an important security measure; don't disable it without understanding the security implications. In particular, if your authentication is cookie-based, you must either restrict the origins allowed by check_origin() or implement your own XSRF-like protection for websocket connections. See `these https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html `_ `articles https://devcenter.heroku.com/articles/websocket-security `_ for more. To accept all cross-origin traffic (which was the default prior to Tornado 4.0), simply override this method to always return true:: def check_origin(self, origin): return True To allow connections from any subdomain of your site, you might do something like:: def check_origin(self, origin): parsed_origin = urllib.parse.urlparse(origin) return parsed_origin.netloc.endswith(\".mydomain.com\") .. versionadded:: 4.0 emit def emit(self, channel_message) on def on(self, event_name, handler) on_close def on_close(self) Invoked when the WebSocket is closed. If the connection was closed cleanly and a status code or reason phrase was supplied, these values will be available as the attributes self.close_code and self.close_reason . .. versionchanged:: 4.0 Added close_code and close_reason attributes. on_message def on_message(self, message) Handle incoming messages on the WebSocket This method must be overridden. .. versionchanged:: 4.5 on_message can be a coroutine. open def open(self) Invoked when a new WebSocket is opened. The arguments to open are extracted from the tornado.web.URLSpec regular expression, just like the arguments to tornado.web.RequestHandler.get . open may be a coroutine. on_message will not be called until open has returned. .. versionchanged:: 5.1 open may be a coroutine.","title":"messagebus"},{"location":"lilacs.messagebus/#module-lilacsmessagebus","text":"","title":"Module lilacs.messagebus"},{"location":"lilacs.messagebus/#create95echo95function","text":"def create_echo_function(name, blacklist=None, whitelist=None)","title":"create_echo_function"},{"location":"lilacs.messagebus/#module-lilacsmessagebusclient","text":"","title":"Module lilacs.messagebus.client"},{"location":"lilacs.messagebus/#module-lilacsmessagebusclientws","text":"","title":"Module lilacs.messagebus.client.ws"},{"location":"lilacs.messagebus/#websocketclient","text":"None","title":"WebsocketClient"},{"location":"lilacs.messagebus/#build95url","text":"def build_url(host, port, route, ssl=False)","title":"build_url"},{"location":"lilacs.messagebus/#close","text":"def close(self)","title":"close"},{"location":"lilacs.messagebus/#create95client","text":"def create_client(self)","title":"create_client"},{"location":"lilacs.messagebus/#emit","text":"def emit(self, message)","title":"emit"},{"location":"lilacs.messagebus/#on","text":"def on(self, event_name, func)","title":"on"},{"location":"lilacs.messagebus/#on95close","text":"def on_close(self, ws)","title":"on_close"},{"location":"lilacs.messagebus/#on95error","text":"def on_error(self, ws, error) On error start trying to reconnect to the websocket.","title":"on_error"},{"location":"lilacs.messagebus/#on95message","text":"def on_message(self, ws, message)","title":"on_message"},{"location":"lilacs.messagebus/#on95open","text":"def on_open(self, ws)","title":"on_open"},{"location":"lilacs.messagebus/#once","text":"def once(self, event_name, func)","title":"once"},{"location":"lilacs.messagebus/#remove","text":"def remove(self, event_name, func)","title":"remove"},{"location":"lilacs.messagebus/#remove95all95listeners","text":"def remove_all_listeners(self, event_name) Remove all listeners connected to event_name. Args: event_name: event from which to remove listeners","title":"remove_all_listeners"},{"location":"lilacs.messagebus/#run95forever","text":"def run_forever(self)","title":"run_forever"},{"location":"lilacs.messagebus/#wait95for95response","text":"def wait_for_response(self, message, reply_type=None, timeout=None) Send a message and wait for a response. Args: message (Message): message to send reply_type (str): the message type of the expected reply. Defaults to \"<message.type>.response\". timeout: seconds to wait before timeout, defaults to 3 Returns: The received message or None if the response timed out","title":"wait_for_response"},{"location":"lilacs.messagebus/#echo","text":"def echo()","title":"echo"},{"location":"lilacs.messagebus/#module-lilacsmessagebusmessage","text":"","title":"Module lilacs.messagebus.message"},{"location":"lilacs.messagebus/#message","text":"Holds and manipulates data sent over the websocket Message objects will be used to send information back and forth between processes of Mycroft. Attributes: msg_type (str): type of data sent within the message. data (dict): data sent within the message context: info about the message not part of data such as source, destination or domain.","title":"Message"},{"location":"lilacs.messagebus/#deserialize","text":"def deserialize(value) This takes a string and constructs a message object. This makes it easy to take strings from the websocket and create a message object. This uses json loads to get the info and generate the message object. Args: value(str): This is the json string received from the websocket Returns: Message: message object constructed from the json string passed int the function. value(str): This is the string received from the websocket","title":"deserialize"},{"location":"lilacs.messagebus/#forward","text":"def forward(self, msg_type, data) Create a new message with the same context as this message but with the type and data supplied as arguments. Arguments: msg_type: (str) message type data: (dict) data the message will carry Returns: Message object to forward","title":"forward"},{"location":"lilacs.messagebus/#publish","text":"def publish(self, msg_type, data, context=None) Copy the original context and add passed in context. Delete any target in the new context. Return a new message object with passed in data and new context. Type remains unchanged. Args: msg_type (str): type of message data (dict): date to send with message context: context added to existing context Returns: Message: Message object to publish","title":"publish"},{"location":"lilacs.messagebus/#reply","text":"def reply(self, msg_type, data, context=None) Construct a reply message for a given message This will take the same parameters as a message object but use the current message object as a reference. It will copy the context from the existing message object and add any context passed in to the function. Check for a target passed in to the function from the data object and add that to the context as a target. If the context has a client name then that will become the target in the context. The new message will then have data passed in plus the new context generated. Args: msg_type (str): type of message data (dict): data for message context: intented context for new message Returns: Message: Message object to be used on the reply to the message","title":"reply"},{"location":"lilacs.messagebus/#response","text":"def response(self, data=None, context=None) Construct a response message for the message Constructs a reply with the data and appends the expected \".response\" to the message Args: data (dict): message data context (dict): message context Returns (Message) message with the type modified to match default response","title":"response"},{"location":"lilacs.messagebus/#serialize","text":"def serialize(self) This returns a string of the message info. This makes it easy to send over a websocket. This uses json dumps to generate the string with type, data and context Returns: str: a json string representation of the message.","title":"serialize"},{"location":"lilacs.messagebus/#module-lilacsmessagebusservice","text":"","title":"Module lilacs.messagebus.service"},{"location":"lilacs.messagebus/#module-lilacsmessagebusservicemain","text":"","title":"Module lilacs.messagebus.service.main"},{"location":"lilacs.messagebus/#main","text":"def main()","title":"main"},{"location":"lilacs.messagebus/#module-lilacsmessagebusservicews","text":"","title":"Module lilacs.messagebus.service.ws"},{"location":"lilacs.messagebus/#websocketeventhandler","text":"Subclass this class to create a basic WebSocket handler. Override on_message to handle incoming messages, and use write_message to send messages to the client. You can also override open and on_close to handle opened and closed connections. Custom upgrade response headers can be sent by overriding ~tornado.web.RequestHandler.set_default_headers or ~tornado.web.RequestHandler.prepare . See http://dev.w3.org/html5/websockets/ for details on the JavaScript interface. The protocol is specified at http://tools.ietf.org/html/rfc6455. Here is an example WebSocket handler that echos back all received messages back to the client: .. testcode:: class EchoWebSocket(tornado.websocket.WebSocketHandler): def open(self): print(\"WebSocket opened\") def on_message(self, message): self.write_message(u\"You said: \" + message) def on_close(self): print(\"WebSocket closed\") .. testoutput:: :hide: WebSockets are not standard HTTP connections. The \"handshake\" is HTTP, but after the handshake, the protocol is message-based. Consequently, most of the Tornado HTTP facilities are not available in handlers of this type. The only communication methods available to you are write_message() , ping() , and close() . Likewise, your request handler class should implement open() method rather than get() or post() . If you map the handler above to /websocket in your application, you can invoke it in JavaScript with:: var ws = new WebSocket(\"ws://localhost:8888/websocket\"); ws.onopen = function() { ws.send(\"Hello, world\"); }; ws.onmessage = function (evt) { alert(evt.data); }; This script pops up an alert box that says \"You said: Hello, world\". Web browsers allow any site to open a websocket connection to any other, instead of using the same-origin policy that governs other network access from javascript. This can be surprising and is a potential security hole, so since Tornado 4.0 WebSocketHandler requires applications that wish to receive cross-origin websockets to opt in by overriding the ~WebSocketHandler.check_origin method (see that method's docs for details). Failure to do so is the most likely cause of 403 errors when making a websocket connection. When using a secure websocket connection ( wss:// ) with a self-signed certificate, the connection from a browser may fail because it wants to show the \"accept this certificate\" dialog but has nowhere to show it. You must first visit a regular HTML page using the same certificate to accept it before the websocket connection will succeed. If the application setting websocket_ping_interval has a non-zero value, a ping will be sent periodically, and the connection will be closed if a response is not received before the websocket_ping_timeout . Messages larger than the websocket_max_message_size application setting (default 10MiB) will not be accepted. .. versionchanged:: 4.5 Added websocket_ping_interval , websocket_ping_timeout , and websocket_max_message_size .","title":"WebsocketEventHandler"},{"location":"lilacs.messagebus/#check95origin","text":"def check_origin(self, origin) Override to enable support for allowing alternate origins. The origin argument is the value of the Origin HTTP header, the url responsible for initiating this request. This method is not called for clients that do not send this header; such requests are always allowed (because all browsers that implement WebSockets support this header, and non-browser clients do not have the same cross-site security concerns). Should return True to accept the request or False to reject it. By default, rejects all requests with an origin on a host other than this one. This is a security protection against cross site scripting attacks on browsers, since WebSockets are allowed to bypass the usual same-origin policies and don't use CORS headers. .. warning:: This is an important security measure; don't disable it without understanding the security implications. In particular, if your authentication is cookie-based, you must either restrict the origins allowed by check_origin() or implement your own XSRF-like protection for websocket connections. See `these https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html `_ `articles https://devcenter.heroku.com/articles/websocket-security `_ for more. To accept all cross-origin traffic (which was the default prior to Tornado 4.0), simply override this method to always return true:: def check_origin(self, origin): return True To allow connections from any subdomain of your site, you might do something like:: def check_origin(self, origin): parsed_origin = urllib.parse.urlparse(origin) return parsed_origin.netloc.endswith(\".mydomain.com\") .. versionadded:: 4.0","title":"check_origin"},{"location":"lilacs.messagebus/#emit_1","text":"def emit(self, channel_message)","title":"emit"},{"location":"lilacs.messagebus/#on_1","text":"def on(self, event_name, handler)","title":"on"},{"location":"lilacs.messagebus/#on95close_1","text":"def on_close(self) Invoked when the WebSocket is closed. If the connection was closed cleanly and a status code or reason phrase was supplied, these values will be available as the attributes self.close_code and self.close_reason . .. versionchanged:: 4.0 Added close_code and close_reason attributes.","title":"on_close"},{"location":"lilacs.messagebus/#on95message_1","text":"def on_message(self, message) Handle incoming messages on the WebSocket This method must be overridden. .. versionchanged:: 4.5 on_message can be a coroutine.","title":"on_message"},{"location":"lilacs.messagebus/#open","text":"def open(self) Invoked when a new WebSocket is opened. The arguments to open are extracted from the tornado.web.URLSpec regular expression, just like the arguments to tornado.web.RequestHandler.get . open may be a coroutine. on_message will not be called until open has returned. .. versionchanged:: 5.1 open may be a coroutine.","title":"open"},{"location":"lilacs.messagebus.message/","text":"Module lilacs.messagebus.message Message Holds and manipulates data sent over the websocket Message objects will be used to send information back and forth between processes of Mycroft. Attributes: msg_type (str): type of data sent within the message. data (dict): data sent within the message context: info about the message not part of data such as source, destination or domain. deserialize def deserialize(value) This takes a string and constructs a message object. This makes it easy to take strings from the websocket and create a message object. This uses json loads to get the info and generate the message object. Args: value(str): This is the json string received from the websocket Returns: Message: message object constructed from the json string passed int the function. value(str): This is the string received from the websocket forward def forward(self, msg_type, data) Create a new message with the same context as this message but with the type and data supplied as arguments. Arguments: msg_type: (str) message type data: (dict) data the message will carry Returns: Message object to forward publish def publish(self, msg_type, data, context=None) Copy the original context and add passed in context. Delete any target in the new context. Return a new message object with passed in data and new context. Type remains unchanged. Args: msg_type (str): type of message data (dict): date to send with message context: context added to existing context Returns: Message: Message object to publish reply def reply(self, msg_type, data, context=None) Construct a reply message for a given message This will take the same parameters as a message object but use the current message object as a reference. It will copy the context from the existing message object and add any context passed in to the function. Check for a target passed in to the function from the data object and add that to the context as a target. If the context has a client name then that will become the target in the context. The new message will then have data passed in plus the new context generated. Args: msg_type (str): type of message data (dict): data for message context: intented context for new message Returns: Message: Message object to be used on the reply to the message response def response(self, data=None, context=None) Construct a response message for the message Constructs a reply with the data and appends the expected \".response\" to the message Args: data (dict): message data context (dict): message context Returns (Message) message with the type modified to match default response serialize def serialize(self) This returns a string of the message info. This makes it easy to send over a websocket. This uses json dumps to generate the string with type, data and context Returns: str: a json string representation of the message.","title":"message"},{"location":"lilacs.messagebus.message/#module-lilacsmessagebusmessage","text":"","title":"Module lilacs.messagebus.message"},{"location":"lilacs.messagebus.message/#message","text":"Holds and manipulates data sent over the websocket Message objects will be used to send information back and forth between processes of Mycroft. Attributes: msg_type (str): type of data sent within the message. data (dict): data sent within the message context: info about the message not part of data such as source, destination or domain.","title":"Message"},{"location":"lilacs.messagebus.message/#deserialize","text":"def deserialize(value) This takes a string and constructs a message object. This makes it easy to take strings from the websocket and create a message object. This uses json loads to get the info and generate the message object. Args: value(str): This is the json string received from the websocket Returns: Message: message object constructed from the json string passed int the function. value(str): This is the string received from the websocket","title":"deserialize"},{"location":"lilacs.messagebus.message/#forward","text":"def forward(self, msg_type, data) Create a new message with the same context as this message but with the type and data supplied as arguments. Arguments: msg_type: (str) message type data: (dict) data the message will carry Returns: Message object to forward","title":"forward"},{"location":"lilacs.messagebus.message/#publish","text":"def publish(self, msg_type, data, context=None) Copy the original context and add passed in context. Delete any target in the new context. Return a new message object with passed in data and new context. Type remains unchanged. Args: msg_type (str): type of message data (dict): date to send with message context: context added to existing context Returns: Message: Message object to publish","title":"publish"},{"location":"lilacs.messagebus.message/#reply","text":"def reply(self, msg_type, data, context=None) Construct a reply message for a given message This will take the same parameters as a message object but use the current message object as a reference. It will copy the context from the existing message object and add any context passed in to the function. Check for a target passed in to the function from the data object and add that to the context as a target. If the context has a client name then that will become the target in the context. The new message will then have data passed in plus the new context generated. Args: msg_type (str): type of message data (dict): data for message context: intented context for new message Returns: Message: Message object to be used on the reply to the message","title":"reply"},{"location":"lilacs.messagebus.message/#response","text":"def response(self, data=None, context=None) Construct a response message for the message Constructs a reply with the data and appends the expected \".response\" to the message Args: data (dict): message data context (dict): message context Returns (Message) message with the type modified to match default response","title":"response"},{"location":"lilacs.messagebus.message/#serialize","text":"def serialize(self) This returns a string of the message info. This makes it easy to send over a websocket. This uses json dumps to generate the string with type, data and context Returns: str: a json string representation of the message.","title":"serialize"},{"location":"lilacs.messagebus.service.main/","text":"Module lilacs.messagebus.service.main main def main()","title":"main"},{"location":"lilacs.messagebus.service.main/#module-lilacsmessagebusservicemain","text":"","title":"Module lilacs.messagebus.service.main"},{"location":"lilacs.messagebus.service.main/#main","text":"def main()","title":"main"},{"location":"lilacs.messagebus.service/","text":"Module lilacs.messagebus.service Module lilacs.messagebus.service.main main def main() Module lilacs.messagebus.service.ws WebsocketEventHandler Subclass this class to create a basic WebSocket handler. Override on_message to handle incoming messages, and use write_message to send messages to the client. You can also override open and on_close to handle opened and closed connections. Custom upgrade response headers can be sent by overriding ~tornado.web.RequestHandler.set_default_headers or ~tornado.web.RequestHandler.prepare . See http://dev.w3.org/html5/websockets/ for details on the JavaScript interface. The protocol is specified at http://tools.ietf.org/html/rfc6455. Here is an example WebSocket handler that echos back all received messages back to the client: .. testcode:: class EchoWebSocket(tornado.websocket.WebSocketHandler): def open(self): print(\"WebSocket opened\") def on_message(self, message): self.write_message(u\"You said: \" + message) def on_close(self): print(\"WebSocket closed\") .. testoutput:: :hide: WebSockets are not standard HTTP connections. The \"handshake\" is HTTP, but after the handshake, the protocol is message-based. Consequently, most of the Tornado HTTP facilities are not available in handlers of this type. The only communication methods available to you are write_message() , ping() , and close() . Likewise, your request handler class should implement open() method rather than get() or post() . If you map the handler above to /websocket in your application, you can invoke it in JavaScript with:: var ws = new WebSocket(\"ws://localhost:8888/websocket\"); ws.onopen = function() { ws.send(\"Hello, world\"); }; ws.onmessage = function (evt) { alert(evt.data); }; This script pops up an alert box that says \"You said: Hello, world\". Web browsers allow any site to open a websocket connection to any other, instead of using the same-origin policy that governs other network access from javascript. This can be surprising and is a potential security hole, so since Tornado 4.0 WebSocketHandler requires applications that wish to receive cross-origin websockets to opt in by overriding the ~WebSocketHandler.check_origin method (see that method's docs for details). Failure to do so is the most likely cause of 403 errors when making a websocket connection. When using a secure websocket connection ( wss:// ) with a self-signed certificate, the connection from a browser may fail because it wants to show the \"accept this certificate\" dialog but has nowhere to show it. You must first visit a regular HTML page using the same certificate to accept it before the websocket connection will succeed. If the application setting websocket_ping_interval has a non-zero value, a ping will be sent periodically, and the connection will be closed if a response is not received before the websocket_ping_timeout . Messages larger than the websocket_max_message_size application setting (default 10MiB) will not be accepted. .. versionchanged:: 4.5 Added websocket_ping_interval , websocket_ping_timeout , and websocket_max_message_size . check_origin def check_origin(self, origin) Override to enable support for allowing alternate origins. The origin argument is the value of the Origin HTTP header, the url responsible for initiating this request. This method is not called for clients that do not send this header; such requests are always allowed (because all browsers that implement WebSockets support this header, and non-browser clients do not have the same cross-site security concerns). Should return True to accept the request or False to reject it. By default, rejects all requests with an origin on a host other than this one. This is a security protection against cross site scripting attacks on browsers, since WebSockets are allowed to bypass the usual same-origin policies and don't use CORS headers. .. warning:: This is an important security measure; don't disable it without understanding the security implications. In particular, if your authentication is cookie-based, you must either restrict the origins allowed by check_origin() or implement your own XSRF-like protection for websocket connections. See `these https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html `_ `articles https://devcenter.heroku.com/articles/websocket-security `_ for more. To accept all cross-origin traffic (which was the default prior to Tornado 4.0), simply override this method to always return true:: def check_origin(self, origin): return True To allow connections from any subdomain of your site, you might do something like:: def check_origin(self, origin): parsed_origin = urllib.parse.urlparse(origin) return parsed_origin.netloc.endswith(\".mydomain.com\") .. versionadded:: 4.0 emit def emit(self, channel_message) on def on(self, event_name, handler) on_close def on_close(self) Invoked when the WebSocket is closed. If the connection was closed cleanly and a status code or reason phrase was supplied, these values will be available as the attributes self.close_code and self.close_reason . .. versionchanged:: 4.0 Added close_code and close_reason attributes. on_message def on_message(self, message) Handle incoming messages on the WebSocket This method must be overridden. .. versionchanged:: 4.5 on_message can be a coroutine. open def open(self) Invoked when a new WebSocket is opened. The arguments to open are extracted from the tornado.web.URLSpec regular expression, just like the arguments to tornado.web.RequestHandler.get . open may be a coroutine. on_message will not be called until open has returned. .. versionchanged:: 5.1 open may be a coroutine.","title":"service"},{"location":"lilacs.messagebus.service/#module-lilacsmessagebusservice","text":"","title":"Module lilacs.messagebus.service"},{"location":"lilacs.messagebus.service/#module-lilacsmessagebusservicemain","text":"","title":"Module lilacs.messagebus.service.main"},{"location":"lilacs.messagebus.service/#main","text":"def main()","title":"main"},{"location":"lilacs.messagebus.service/#module-lilacsmessagebusservicews","text":"","title":"Module lilacs.messagebus.service.ws"},{"location":"lilacs.messagebus.service/#websocketeventhandler","text":"Subclass this class to create a basic WebSocket handler. Override on_message to handle incoming messages, and use write_message to send messages to the client. You can also override open and on_close to handle opened and closed connections. Custom upgrade response headers can be sent by overriding ~tornado.web.RequestHandler.set_default_headers or ~tornado.web.RequestHandler.prepare . See http://dev.w3.org/html5/websockets/ for details on the JavaScript interface. The protocol is specified at http://tools.ietf.org/html/rfc6455. Here is an example WebSocket handler that echos back all received messages back to the client: .. testcode:: class EchoWebSocket(tornado.websocket.WebSocketHandler): def open(self): print(\"WebSocket opened\") def on_message(self, message): self.write_message(u\"You said: \" + message) def on_close(self): print(\"WebSocket closed\") .. testoutput:: :hide: WebSockets are not standard HTTP connections. The \"handshake\" is HTTP, but after the handshake, the protocol is message-based. Consequently, most of the Tornado HTTP facilities are not available in handlers of this type. The only communication methods available to you are write_message() , ping() , and close() . Likewise, your request handler class should implement open() method rather than get() or post() . If you map the handler above to /websocket in your application, you can invoke it in JavaScript with:: var ws = new WebSocket(\"ws://localhost:8888/websocket\"); ws.onopen = function() { ws.send(\"Hello, world\"); }; ws.onmessage = function (evt) { alert(evt.data); }; This script pops up an alert box that says \"You said: Hello, world\". Web browsers allow any site to open a websocket connection to any other, instead of using the same-origin policy that governs other network access from javascript. This can be surprising and is a potential security hole, so since Tornado 4.0 WebSocketHandler requires applications that wish to receive cross-origin websockets to opt in by overriding the ~WebSocketHandler.check_origin method (see that method's docs for details). Failure to do so is the most likely cause of 403 errors when making a websocket connection. When using a secure websocket connection ( wss:// ) with a self-signed certificate, the connection from a browser may fail because it wants to show the \"accept this certificate\" dialog but has nowhere to show it. You must first visit a regular HTML page using the same certificate to accept it before the websocket connection will succeed. If the application setting websocket_ping_interval has a non-zero value, a ping will be sent periodically, and the connection will be closed if a response is not received before the websocket_ping_timeout . Messages larger than the websocket_max_message_size application setting (default 10MiB) will not be accepted. .. versionchanged:: 4.5 Added websocket_ping_interval , websocket_ping_timeout , and websocket_max_message_size .","title":"WebsocketEventHandler"},{"location":"lilacs.messagebus.service/#check95origin","text":"def check_origin(self, origin) Override to enable support for allowing alternate origins. The origin argument is the value of the Origin HTTP header, the url responsible for initiating this request. This method is not called for clients that do not send this header; such requests are always allowed (because all browsers that implement WebSockets support this header, and non-browser clients do not have the same cross-site security concerns). Should return True to accept the request or False to reject it. By default, rejects all requests with an origin on a host other than this one. This is a security protection against cross site scripting attacks on browsers, since WebSockets are allowed to bypass the usual same-origin policies and don't use CORS headers. .. warning:: This is an important security measure; don't disable it without understanding the security implications. In particular, if your authentication is cookie-based, you must either restrict the origins allowed by check_origin() or implement your own XSRF-like protection for websocket connections. See `these https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html `_ `articles https://devcenter.heroku.com/articles/websocket-security `_ for more. To accept all cross-origin traffic (which was the default prior to Tornado 4.0), simply override this method to always return true:: def check_origin(self, origin): return True To allow connections from any subdomain of your site, you might do something like:: def check_origin(self, origin): parsed_origin = urllib.parse.urlparse(origin) return parsed_origin.netloc.endswith(\".mydomain.com\") .. versionadded:: 4.0","title":"check_origin"},{"location":"lilacs.messagebus.service/#emit","text":"def emit(self, channel_message)","title":"emit"},{"location":"lilacs.messagebus.service/#on","text":"def on(self, event_name, handler)","title":"on"},{"location":"lilacs.messagebus.service/#on95close","text":"def on_close(self) Invoked when the WebSocket is closed. If the connection was closed cleanly and a status code or reason phrase was supplied, these values will be available as the attributes self.close_code and self.close_reason . .. versionchanged:: 4.0 Added close_code and close_reason attributes.","title":"on_close"},{"location":"lilacs.messagebus.service/#on95message","text":"def on_message(self, message) Handle incoming messages on the WebSocket This method must be overridden. .. versionchanged:: 4.5 on_message can be a coroutine.","title":"on_message"},{"location":"lilacs.messagebus.service/#open","text":"def open(self) Invoked when a new WebSocket is opened. The arguments to open are extracted from the tornado.web.URLSpec regular expression, just like the arguments to tornado.web.RequestHandler.get . open may be a coroutine. on_message will not be called until open has returned. .. versionchanged:: 5.1 open may be a coroutine.","title":"open"},{"location":"lilacs.messagebus.service.ws/","text":"Module lilacs.messagebus.service.ws WebsocketEventHandler Subclass this class to create a basic WebSocket handler. Override on_message to handle incoming messages, and use write_message to send messages to the client. You can also override open and on_close to handle opened and closed connections. Custom upgrade response headers can be sent by overriding ~tornado.web.RequestHandler.set_default_headers or ~tornado.web.RequestHandler.prepare . See http://dev.w3.org/html5/websockets/ for details on the JavaScript interface. The protocol is specified at http://tools.ietf.org/html/rfc6455. Here is an example WebSocket handler that echos back all received messages back to the client: .. testcode:: class EchoWebSocket(tornado.websocket.WebSocketHandler): def open(self): print(\"WebSocket opened\") def on_message(self, message): self.write_message(u\"You said: \" + message) def on_close(self): print(\"WebSocket closed\") .. testoutput:: :hide: WebSockets are not standard HTTP connections. The \"handshake\" is HTTP, but after the handshake, the protocol is message-based. Consequently, most of the Tornado HTTP facilities are not available in handlers of this type. The only communication methods available to you are write_message() , ping() , and close() . Likewise, your request handler class should implement open() method rather than get() or post() . If you map the handler above to /websocket in your application, you can invoke it in JavaScript with:: var ws = new WebSocket(\"ws://localhost:8888/websocket\"); ws.onopen = function() { ws.send(\"Hello, world\"); }; ws.onmessage = function (evt) { alert(evt.data); }; This script pops up an alert box that says \"You said: Hello, world\". Web browsers allow any site to open a websocket connection to any other, instead of using the same-origin policy that governs other network access from javascript. This can be surprising and is a potential security hole, so since Tornado 4.0 WebSocketHandler requires applications that wish to receive cross-origin websockets to opt in by overriding the ~WebSocketHandler.check_origin method (see that method's docs for details). Failure to do so is the most likely cause of 403 errors when making a websocket connection. When using a secure websocket connection ( wss:// ) with a self-signed certificate, the connection from a browser may fail because it wants to show the \"accept this certificate\" dialog but has nowhere to show it. You must first visit a regular HTML page using the same certificate to accept it before the websocket connection will succeed. If the application setting websocket_ping_interval has a non-zero value, a ping will be sent periodically, and the connection will be closed if a response is not received before the websocket_ping_timeout . Messages larger than the websocket_max_message_size application setting (default 10MiB) will not be accepted. .. versionchanged:: 4.5 Added websocket_ping_interval , websocket_ping_timeout , and websocket_max_message_size . check_origin def check_origin(self, origin) Override to enable support for allowing alternate origins. The origin argument is the value of the Origin HTTP header, the url responsible for initiating this request. This method is not called for clients that do not send this header; such requests are always allowed (because all browsers that implement WebSockets support this header, and non-browser clients do not have the same cross-site security concerns). Should return True to accept the request or False to reject it. By default, rejects all requests with an origin on a host other than this one. This is a security protection against cross site scripting attacks on browsers, since WebSockets are allowed to bypass the usual same-origin policies and don't use CORS headers. .. warning:: This is an important security measure; don't disable it without understanding the security implications. In particular, if your authentication is cookie-based, you must either restrict the origins allowed by check_origin() or implement your own XSRF-like protection for websocket connections. See `these https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html `_ `articles https://devcenter.heroku.com/articles/websocket-security `_ for more. To accept all cross-origin traffic (which was the default prior to Tornado 4.0), simply override this method to always return true:: def check_origin(self, origin): return True To allow connections from any subdomain of your site, you might do something like:: def check_origin(self, origin): parsed_origin = urllib.parse.urlparse(origin) return parsed_origin.netloc.endswith(\".mydomain.com\") .. versionadded:: 4.0 emit def emit(self, channel_message) on def on(self, event_name, handler) on_close def on_close(self) Invoked when the WebSocket is closed. If the connection was closed cleanly and a status code or reason phrase was supplied, these values will be available as the attributes self.close_code and self.close_reason . .. versionchanged:: 4.0 Added close_code and close_reason attributes. on_message def on_message(self, message) Handle incoming messages on the WebSocket This method must be overridden. .. versionchanged:: 4.5 on_message can be a coroutine. open def open(self) Invoked when a new WebSocket is opened. The arguments to open are extracted from the tornado.web.URLSpec regular expression, just like the arguments to tornado.web.RequestHandler.get . open may be a coroutine. on_message will not be called until open has returned. .. versionchanged:: 5.1 open may be a coroutine.","title":"ws"},{"location":"lilacs.messagebus.service.ws/#module-lilacsmessagebusservicews","text":"","title":"Module lilacs.messagebus.service.ws"},{"location":"lilacs.messagebus.service.ws/#websocketeventhandler","text":"Subclass this class to create a basic WebSocket handler. Override on_message to handle incoming messages, and use write_message to send messages to the client. You can also override open and on_close to handle opened and closed connections. Custom upgrade response headers can be sent by overriding ~tornado.web.RequestHandler.set_default_headers or ~tornado.web.RequestHandler.prepare . See http://dev.w3.org/html5/websockets/ for details on the JavaScript interface. The protocol is specified at http://tools.ietf.org/html/rfc6455. Here is an example WebSocket handler that echos back all received messages back to the client: .. testcode:: class EchoWebSocket(tornado.websocket.WebSocketHandler): def open(self): print(\"WebSocket opened\") def on_message(self, message): self.write_message(u\"You said: \" + message) def on_close(self): print(\"WebSocket closed\") .. testoutput:: :hide: WebSockets are not standard HTTP connections. The \"handshake\" is HTTP, but after the handshake, the protocol is message-based. Consequently, most of the Tornado HTTP facilities are not available in handlers of this type. The only communication methods available to you are write_message() , ping() , and close() . Likewise, your request handler class should implement open() method rather than get() or post() . If you map the handler above to /websocket in your application, you can invoke it in JavaScript with:: var ws = new WebSocket(\"ws://localhost:8888/websocket\"); ws.onopen = function() { ws.send(\"Hello, world\"); }; ws.onmessage = function (evt) { alert(evt.data); }; This script pops up an alert box that says \"You said: Hello, world\". Web browsers allow any site to open a websocket connection to any other, instead of using the same-origin policy that governs other network access from javascript. This can be surprising and is a potential security hole, so since Tornado 4.0 WebSocketHandler requires applications that wish to receive cross-origin websockets to opt in by overriding the ~WebSocketHandler.check_origin method (see that method's docs for details). Failure to do so is the most likely cause of 403 errors when making a websocket connection. When using a secure websocket connection ( wss:// ) with a self-signed certificate, the connection from a browser may fail because it wants to show the \"accept this certificate\" dialog but has nowhere to show it. You must first visit a regular HTML page using the same certificate to accept it before the websocket connection will succeed. If the application setting websocket_ping_interval has a non-zero value, a ping will be sent periodically, and the connection will be closed if a response is not received before the websocket_ping_timeout . Messages larger than the websocket_max_message_size application setting (default 10MiB) will not be accepted. .. versionchanged:: 4.5 Added websocket_ping_interval , websocket_ping_timeout , and websocket_max_message_size .","title":"WebsocketEventHandler"},{"location":"lilacs.messagebus.service.ws/#check95origin","text":"def check_origin(self, origin) Override to enable support for allowing alternate origins. The origin argument is the value of the Origin HTTP header, the url responsible for initiating this request. This method is not called for clients that do not send this header; such requests are always allowed (because all browsers that implement WebSockets support this header, and non-browser clients do not have the same cross-site security concerns). Should return True to accept the request or False to reject it. By default, rejects all requests with an origin on a host other than this one. This is a security protection against cross site scripting attacks on browsers, since WebSockets are allowed to bypass the usual same-origin policies and don't use CORS headers. .. warning:: This is an important security measure; don't disable it without understanding the security implications. In particular, if your authentication is cookie-based, you must either restrict the origins allowed by check_origin() or implement your own XSRF-like protection for websocket connections. See `these https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html `_ `articles https://devcenter.heroku.com/articles/websocket-security `_ for more. To accept all cross-origin traffic (which was the default prior to Tornado 4.0), simply override this method to always return true:: def check_origin(self, origin): return True To allow connections from any subdomain of your site, you might do something like:: def check_origin(self, origin): parsed_origin = urllib.parse.urlparse(origin) return parsed_origin.netloc.endswith(\".mydomain.com\") .. versionadded:: 4.0","title":"check_origin"},{"location":"lilacs.messagebus.service.ws/#emit","text":"def emit(self, channel_message)","title":"emit"},{"location":"lilacs.messagebus.service.ws/#on","text":"def on(self, event_name, handler)","title":"on"},{"location":"lilacs.messagebus.service.ws/#on95close","text":"def on_close(self) Invoked when the WebSocket is closed. If the connection was closed cleanly and a status code or reason phrase was supplied, these values will be available as the attributes self.close_code and self.close_reason . .. versionchanged:: 4.0 Added close_code and close_reason attributes.","title":"on_close"},{"location":"lilacs.messagebus.service.ws/#on95message","text":"def on_message(self, message) Handle incoming messages on the WebSocket This method must be overridden. .. versionchanged:: 4.5 on_message can be a coroutine.","title":"on_message"},{"location":"lilacs.messagebus.service.ws/#open","text":"def open(self) Invoked when a new WebSocket is opened. The arguments to open are extracted from the tornado.web.URLSpec regular expression, just like the arguments to tornado.web.RequestHandler.get . open may be a coroutine. on_message will not be called until open has returned. .. versionchanged:: 5.1 open may be a coroutine.","title":"open"},{"location":"lilacs.processing.audio/","text":"Module lilacs.processing.audio classify_audio def classify_audio(wav_file, engine='MAX-Audio-Classifier')","title":"audio"},{"location":"lilacs.processing.audio/#module-lilacsprocessingaudio","text":"","title":"Module lilacs.processing.audio"},{"location":"lilacs.processing.audio/#classify95audio","text":"def classify_audio(wav_file, engine='MAX-Audio-Classifier')","title":"classify_audio"},{"location":"lilacs.processing.comprehension/","text":"Module comprehension Machine Comprehension (MC) answers natural language questions by selecting an answer span within an evidence text. The AllenNLP toolkit provides the following MC visualization, which can be used for any MC model in AllenNLP. This page demonstrates a reimplementation of BiDAF (Seo et al, 2017), or Bi-Directional Attention Flow, a widely used MC baseline that achieved state-of-the-art accuracies on the SQuAD dataset (Wikipedia sentences) in early 2017. :param question: :param passage: :return:","title":"comprehension"},{"location":"lilacs.processing.comprehension/#module-comprehension","text":"Machine Comprehension (MC) answers natural language questions by selecting an answer span within an evidence text. The AllenNLP toolkit provides the following MC visualization, which can be used for any MC model in AllenNLP. This page demonstrates a reimplementation of BiDAF (Seo et al, 2017), or Bi-Directional Attention Flow, a widely used MC baseline that achieved state-of-the-art accuracies on the SQuAD dataset (Wikipedia sentences) in early 2017. :param question: :param passage: :return:","title":"Module comprehension"},{"location":"lilacs.processing.crawlers.connection_finder/","text":"Module lilacs.processing.crawlers.connection_finder ConnectionFinderCrawler None execute_action def execute_action(self, connections)","title":"connection_finder"},{"location":"lilacs.processing.crawlers.connection_finder/#module-lilacsprocessingcrawlersconnection_finder","text":"","title":"Module lilacs.processing.crawlers.connection_finder"},{"location":"lilacs.processing.crawlers.connection_finder/#connectionfindercrawler","text":"None","title":"ConnectionFinderCrawler"},{"location":"lilacs.processing.crawlers.connection_finder/#execute95action","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers.dbpedia_crawler/","text":"Module lilacs.processing.crawlers.dbpedia_crawler DBpediaBaseCrawler None choose_next_node def choose_next_node(self, connections) default_node def default_node(self, start_node=None) execute_action def execute_action(self, connections) on_dead_end def on_dead_end(self) select_connections def select_connections(self)","title":"dbpedia_crawler"},{"location":"lilacs.processing.crawlers.dbpedia_crawler/#module-lilacsprocessingcrawlersdbpedia_crawler","text":"","title":"Module lilacs.processing.crawlers.dbpedia_crawler"},{"location":"lilacs.processing.crawlers.dbpedia_crawler/#dbpediabasecrawler","text":"None","title":"DBpediaBaseCrawler"},{"location":"lilacs.processing.crawlers.dbpedia_crawler/#choose95next95node","text":"def choose_next_node(self, connections)","title":"choose_next_node"},{"location":"lilacs.processing.crawlers.dbpedia_crawler/#default95node","text":"def default_node(self, start_node=None)","title":"default_node"},{"location":"lilacs.processing.crawlers.dbpedia_crawler/#execute95action","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers.dbpedia_crawler/#on95dead95end","text":"def on_dead_end(self)","title":"on_dead_end"},{"location":"lilacs.processing.crawlers.dbpedia_crawler/#select95connections","text":"def select_connections(self)","title":"select_connections"},{"location":"lilacs.processing.crawlers.dictionary_finder/","text":"Module lilacs.processing.crawlers.dictionary_finder DictionaryCrawler None execute_action def execute_action(self, connections)","title":"dictionary_finder"},{"location":"lilacs.processing.crawlers.dictionary_finder/#module-lilacsprocessingcrawlersdictionary_finder","text":"","title":"Module lilacs.processing.crawlers.dictionary_finder"},{"location":"lilacs.processing.crawlers.dictionary_finder/#dictionarycrawler","text":"None","title":"DictionaryCrawler"},{"location":"lilacs.processing.crawlers.dictionary_finder/#execute95action","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers.fact_finder/","text":"Module lilacs.processing.crawlers.fact_finder FactFinderCrawler None execute_action def execute_action(self, connections)","title":"fact_finder"},{"location":"lilacs.processing.crawlers.fact_finder/#module-lilacsprocessingcrawlersfact_finder","text":"","title":"Module lilacs.processing.crawlers.fact_finder"},{"location":"lilacs.processing.crawlers.fact_finder/#factfindercrawler","text":"None","title":"FactFinderCrawler"},{"location":"lilacs.processing.crawlers.fact_finder/#execute95action","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers.label_finder/","text":"Module lilacs.processing.crawlers.label_finder LabelCrawler None execute_action def execute_action(self, connections)","title":"label_finder"},{"location":"lilacs.processing.crawlers.label_finder/#module-lilacsprocessingcrawlerslabel_finder","text":"","title":"Module lilacs.processing.crawlers.label_finder"},{"location":"lilacs.processing.crawlers.label_finder/#labelcrawler","text":"None","title":"LabelCrawler"},{"location":"lilacs.processing.crawlers.label_finder/#execute95action","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers.maintenance_crawler/","text":"Module lilacs.processing.crawlers.maintenance_crawler MaintenanceCrawler None execute_action def execute_action(self, connections) expand_synonyms def expand_synonyms(self) fix_empty_cons def fix_empty_cons(self) fix_incompatible_labels def fix_incompatible_labels(self) fix_references_to_self def fix_references_to_self(self) fix_types def fix_types(self)","title":"maintenance_crawler"},{"location":"lilacs.processing.crawlers.maintenance_crawler/#module-lilacsprocessingcrawlersmaintenance_crawler","text":"","title":"Module lilacs.processing.crawlers.maintenance_crawler"},{"location":"lilacs.processing.crawlers.maintenance_crawler/#maintenancecrawler","text":"None","title":"MaintenanceCrawler"},{"location":"lilacs.processing.crawlers.maintenance_crawler/#execute95action","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers.maintenance_crawler/#expand95synonyms","text":"def expand_synonyms(self)","title":"expand_synonyms"},{"location":"lilacs.processing.crawlers.maintenance_crawler/#fix95empty95cons","text":"def fix_empty_cons(self)","title":"fix_empty_cons"},{"location":"lilacs.processing.crawlers.maintenance_crawler/#fix95incompatible95labels","text":"def fix_incompatible_labels(self)","title":"fix_incompatible_labels"},{"location":"lilacs.processing.crawlers.maintenance_crawler/#fix95references95to95self","text":"def fix_references_to_self(self)","title":"fix_references_to_self"},{"location":"lilacs.processing.crawlers.maintenance_crawler/#fix95types","text":"def fix_types(self)","title":"fix_types"},{"location":"lilacs.processing.crawlers/","text":"Module lilacs.processing.crawlers BaseCrawler None choose_next_node def choose_next_node(self, connections) con_exists def con_exists(self, con_type, con_source, con_target) crawl_one def crawl_one(self) default_node def default_node(self, start_node=None) execute_action def execute_action(self, connections) on_dead_end def on_dead_end(self) select_connections def select_connections(self) start_crawling def start_crawling(self, start_node=None) stop_crawling def stop_crawling(self) DummyCrawler None choose_next_node def choose_next_node(self, connections) con_exists def con_exists(self, con_type, con_source, con_target) crawl_one def crawl_one(self) default_node def default_node(self, start_node=None) execute_action def execute_action(self, connections) on_dead_end def on_dead_end(self) select_connections def select_connections(self) start_crawling def start_crawling(self, start_node=None) stop_crawling def stop_crawling(self) DummyNode None Module lilacs.processing.crawlers.connection_finder ConnectionFinderCrawler None execute_action def execute_action(self, connections) Module lilacs.processing.crawlers.dbpedia_crawler DBpediaBaseCrawler None choose_next_node def choose_next_node(self, connections) default_node def default_node(self, start_node=None) execute_action def execute_action(self, connections) on_dead_end def on_dead_end(self) select_connections def select_connections(self) Module lilacs.processing.crawlers.dictionary_finder DictionaryCrawler None execute_action def execute_action(self, connections) Module lilacs.processing.crawlers.fact_finder FactFinderCrawler None execute_action def execute_action(self, connections) Module lilacs.processing.crawlers.label_finder LabelCrawler None execute_action def execute_action(self, connections) Module lilacs.processing.crawlers.maintenance_crawler MaintenanceCrawler None execute_action def execute_action(self, connections) expand_synonyms def expand_synonyms(self) fix_empty_cons def fix_empty_cons(self) fix_incompatible_labels def fix_incompatible_labels(self) fix_references_to_self def fix_references_to_self(self) fix_types def fix_types(self) Module lilacs.processing.crawlers.nlp_crawler NLPCrawler None Module lilacs.processing.crawlers.related_finder RelatedCrawler None execute_action def execute_action(self, connections) Module lilacs.processing.crawlers.relationcruncher_crawler RelationCruncher None execute_action def execute_action(self, connections) RelationshipCruncher None execute_action def execute_action(self, connections) Module lilacs.processing.crawlers.triplecruncher_crawler RelationshipCruncher None execute_action def execute_action(self, connections) TripleCruncher None execute_action def execute_action(self, connections) Module lilacs.processing.crawlers.url_finder URLCrawler None choose_next_node def choose_next_node(self, connections) execute_action def execute_action(self, connections)","title":"crawlers"},{"location":"lilacs.processing.crawlers/#module-lilacsprocessingcrawlers","text":"","title":"Module lilacs.processing.crawlers"},{"location":"lilacs.processing.crawlers/#basecrawler","text":"None","title":"BaseCrawler"},{"location":"lilacs.processing.crawlers/#choose95next95node","text":"def choose_next_node(self, connections)","title":"choose_next_node"},{"location":"lilacs.processing.crawlers/#con95exists","text":"def con_exists(self, con_type, con_source, con_target)","title":"con_exists"},{"location":"lilacs.processing.crawlers/#crawl95one","text":"def crawl_one(self)","title":"crawl_one"},{"location":"lilacs.processing.crawlers/#default95node","text":"def default_node(self, start_node=None)","title":"default_node"},{"location":"lilacs.processing.crawlers/#execute95action","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers/#on95dead95end","text":"def on_dead_end(self)","title":"on_dead_end"},{"location":"lilacs.processing.crawlers/#select95connections","text":"def select_connections(self)","title":"select_connections"},{"location":"lilacs.processing.crawlers/#start95crawling","text":"def start_crawling(self, start_node=None)","title":"start_crawling"},{"location":"lilacs.processing.crawlers/#stop95crawling","text":"def stop_crawling(self)","title":"stop_crawling"},{"location":"lilacs.processing.crawlers/#dummycrawler","text":"None","title":"DummyCrawler"},{"location":"lilacs.processing.crawlers/#choose95next95node_1","text":"def choose_next_node(self, connections)","title":"choose_next_node"},{"location":"lilacs.processing.crawlers/#con95exists_1","text":"def con_exists(self, con_type, con_source, con_target)","title":"con_exists"},{"location":"lilacs.processing.crawlers/#crawl95one_1","text":"def crawl_one(self)","title":"crawl_one"},{"location":"lilacs.processing.crawlers/#default95node_1","text":"def default_node(self, start_node=None)","title":"default_node"},{"location":"lilacs.processing.crawlers/#execute95action_1","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers/#on95dead95end_1","text":"def on_dead_end(self)","title":"on_dead_end"},{"location":"lilacs.processing.crawlers/#select95connections_1","text":"def select_connections(self)","title":"select_connections"},{"location":"lilacs.processing.crawlers/#start95crawling_1","text":"def start_crawling(self, start_node=None)","title":"start_crawling"},{"location":"lilacs.processing.crawlers/#stop95crawling_1","text":"def stop_crawling(self)","title":"stop_crawling"},{"location":"lilacs.processing.crawlers/#dummynode","text":"None","title":"DummyNode"},{"location":"lilacs.processing.crawlers/#module-lilacsprocessingcrawlersconnection_finder","text":"","title":"Module lilacs.processing.crawlers.connection_finder"},{"location":"lilacs.processing.crawlers/#connectionfindercrawler","text":"None","title":"ConnectionFinderCrawler"},{"location":"lilacs.processing.crawlers/#execute95action_2","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers/#module-lilacsprocessingcrawlersdbpedia_crawler","text":"","title":"Module lilacs.processing.crawlers.dbpedia_crawler"},{"location":"lilacs.processing.crawlers/#dbpediabasecrawler","text":"None","title":"DBpediaBaseCrawler"},{"location":"lilacs.processing.crawlers/#choose95next95node_2","text":"def choose_next_node(self, connections)","title":"choose_next_node"},{"location":"lilacs.processing.crawlers/#default95node_2","text":"def default_node(self, start_node=None)","title":"default_node"},{"location":"lilacs.processing.crawlers/#execute95action_3","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers/#on95dead95end_2","text":"def on_dead_end(self)","title":"on_dead_end"},{"location":"lilacs.processing.crawlers/#select95connections_2","text":"def select_connections(self)","title":"select_connections"},{"location":"lilacs.processing.crawlers/#module-lilacsprocessingcrawlersdictionary_finder","text":"","title":"Module lilacs.processing.crawlers.dictionary_finder"},{"location":"lilacs.processing.crawlers/#dictionarycrawler","text":"None","title":"DictionaryCrawler"},{"location":"lilacs.processing.crawlers/#execute95action_4","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers/#module-lilacsprocessingcrawlersfact_finder","text":"","title":"Module lilacs.processing.crawlers.fact_finder"},{"location":"lilacs.processing.crawlers/#factfindercrawler","text":"None","title":"FactFinderCrawler"},{"location":"lilacs.processing.crawlers/#execute95action_5","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers/#module-lilacsprocessingcrawlerslabel_finder","text":"","title":"Module lilacs.processing.crawlers.label_finder"},{"location":"lilacs.processing.crawlers/#labelcrawler","text":"None","title":"LabelCrawler"},{"location":"lilacs.processing.crawlers/#execute95action_6","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers/#module-lilacsprocessingcrawlersmaintenance_crawler","text":"","title":"Module lilacs.processing.crawlers.maintenance_crawler"},{"location":"lilacs.processing.crawlers/#maintenancecrawler","text":"None","title":"MaintenanceCrawler"},{"location":"lilacs.processing.crawlers/#execute95action_7","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers/#expand95synonyms","text":"def expand_synonyms(self)","title":"expand_synonyms"},{"location":"lilacs.processing.crawlers/#fix95empty95cons","text":"def fix_empty_cons(self)","title":"fix_empty_cons"},{"location":"lilacs.processing.crawlers/#fix95incompatible95labels","text":"def fix_incompatible_labels(self)","title":"fix_incompatible_labels"},{"location":"lilacs.processing.crawlers/#fix95references95to95self","text":"def fix_references_to_self(self)","title":"fix_references_to_self"},{"location":"lilacs.processing.crawlers/#fix95types","text":"def fix_types(self)","title":"fix_types"},{"location":"lilacs.processing.crawlers/#module-lilacsprocessingcrawlersnlp_crawler","text":"","title":"Module lilacs.processing.crawlers.nlp_crawler"},{"location":"lilacs.processing.crawlers/#nlpcrawler","text":"None","title":"NLPCrawler"},{"location":"lilacs.processing.crawlers/#module-lilacsprocessingcrawlersrelated_finder","text":"","title":"Module lilacs.processing.crawlers.related_finder"},{"location":"lilacs.processing.crawlers/#relatedcrawler","text":"None","title":"RelatedCrawler"},{"location":"lilacs.processing.crawlers/#execute95action_8","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers/#module-lilacsprocessingcrawlersrelationcruncher_crawler","text":"","title":"Module lilacs.processing.crawlers.relationcruncher_crawler"},{"location":"lilacs.processing.crawlers/#relationcruncher","text":"None","title":"RelationCruncher"},{"location":"lilacs.processing.crawlers/#execute95action_9","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers/#relationshipcruncher","text":"None","title":"RelationshipCruncher"},{"location":"lilacs.processing.crawlers/#execute95action_10","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers/#module-lilacsprocessingcrawlerstriplecruncher_crawler","text":"","title":"Module lilacs.processing.crawlers.triplecruncher_crawler"},{"location":"lilacs.processing.crawlers/#relationshipcruncher_1","text":"None","title":"RelationshipCruncher"},{"location":"lilacs.processing.crawlers/#execute95action_11","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers/#triplecruncher","text":"None","title":"TripleCruncher"},{"location":"lilacs.processing.crawlers/#execute95action_12","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers/#module-lilacsprocessingcrawlersurl_finder","text":"","title":"Module lilacs.processing.crawlers.url_finder"},{"location":"lilacs.processing.crawlers/#urlcrawler","text":"None","title":"URLCrawler"},{"location":"lilacs.processing.crawlers/#choose95next95node_3","text":"def choose_next_node(self, connections)","title":"choose_next_node"},{"location":"lilacs.processing.crawlers/#execute95action_13","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers.nlp_crawler/","text":"Module lilacs.processing.crawlers.nlp_crawler NLPCrawler None","title":"nlp_crawler"},{"location":"lilacs.processing.crawlers.nlp_crawler/#module-lilacsprocessingcrawlersnlp_crawler","text":"","title":"Module lilacs.processing.crawlers.nlp_crawler"},{"location":"lilacs.processing.crawlers.nlp_crawler/#nlpcrawler","text":"None","title":"NLPCrawler"},{"location":"lilacs.processing.crawlers.related_finder/","text":"Module lilacs.processing.crawlers.related_finder RelatedCrawler None execute_action def execute_action(self, connections)","title":"related_finder"},{"location":"lilacs.processing.crawlers.related_finder/#module-lilacsprocessingcrawlersrelated_finder","text":"","title":"Module lilacs.processing.crawlers.related_finder"},{"location":"lilacs.processing.crawlers.related_finder/#relatedcrawler","text":"None","title":"RelatedCrawler"},{"location":"lilacs.processing.crawlers.related_finder/#execute95action","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers.relationcruncher_crawler/","text":"Module lilacs.processing.crawlers.relationcruncher_crawler RelationCruncher None execute_action def execute_action(self, connections) RelationshipCruncher None execute_action def execute_action(self, connections)","title":"relationcruncher_crawler"},{"location":"lilacs.processing.crawlers.relationcruncher_crawler/#module-lilacsprocessingcrawlersrelationcruncher_crawler","text":"","title":"Module lilacs.processing.crawlers.relationcruncher_crawler"},{"location":"lilacs.processing.crawlers.relationcruncher_crawler/#relationcruncher","text":"None","title":"RelationCruncher"},{"location":"lilacs.processing.crawlers.relationcruncher_crawler/#execute95action","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers.relationcruncher_crawler/#relationshipcruncher","text":"None","title":"RelationshipCruncher"},{"location":"lilacs.processing.crawlers.relationcruncher_crawler/#execute95action_1","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers.triplecruncher_crawler/","text":"Module lilacs.processing.crawlers.triplecruncher_crawler RelationshipCruncher None execute_action def execute_action(self, connections) TripleCruncher None execute_action def execute_action(self, connections)","title":"triplecruncher_crawler"},{"location":"lilacs.processing.crawlers.triplecruncher_crawler/#module-lilacsprocessingcrawlerstriplecruncher_crawler","text":"","title":"Module lilacs.processing.crawlers.triplecruncher_crawler"},{"location":"lilacs.processing.crawlers.triplecruncher_crawler/#relationshipcruncher","text":"None","title":"RelationshipCruncher"},{"location":"lilacs.processing.crawlers.triplecruncher_crawler/#execute95action","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers.triplecruncher_crawler/#triplecruncher","text":"None","title":"TripleCruncher"},{"location":"lilacs.processing.crawlers.triplecruncher_crawler/#execute95action_1","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing.crawlers.url_finder/","text":"Module lilacs.processing.crawlers.url_finder URLCrawler None choose_next_node def choose_next_node(self, connections) execute_action def execute_action(self, connections)","title":"url_finder"},{"location":"lilacs.processing.crawlers.url_finder/#module-lilacsprocessingcrawlersurl_finder","text":"","title":"Module lilacs.processing.crawlers.url_finder"},{"location":"lilacs.processing.crawlers.url_finder/#urlcrawler","text":"None","title":"URLCrawler"},{"location":"lilacs.processing.crawlers.url_finder/#choose95next95node","text":"def choose_next_node(self, connections)","title":"choose_next_node"},{"location":"lilacs.processing.crawlers.url_finder/#execute95action","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/","text":"Module lilacs.processing LILACSTextAnalyzer None answer_question def answer_question(question, passage) constituency_parse def constituency_parse(text) coreference_resolution def coreference_resolution(text) coreference_triples def coreference_triples(text) extract_facts def extract_facts(self, subject, text) extract_nouns def extract_nouns(text) extract_triples def extract_triples(text) interesting_triples def interesting_triples(text) normalize def normalize(text, remove_articles=False) possible_relations def possible_relations(sentences) validity_of_hypothesys def validity_of_hypothesys(premise, hypothesys) Module lilacs.processing.audio classify_audio def classify_audio(wav_file, engine='MAX-Audio-Classifier') Module lilacs.processing.crawlers BaseCrawler None choose_next_node def choose_next_node(self, connections) con_exists def con_exists(self, con_type, con_source, con_target) crawl_one def crawl_one(self) default_node def default_node(self, start_node=None) execute_action def execute_action(self, connections) on_dead_end def on_dead_end(self) select_connections def select_connections(self) start_crawling def start_crawling(self, start_node=None) stop_crawling def stop_crawling(self) DummyCrawler None choose_next_node def choose_next_node(self, connections) con_exists def con_exists(self, con_type, con_source, con_target) crawl_one def crawl_one(self) default_node def default_node(self, start_node=None) execute_action def execute_action(self, connections) on_dead_end def on_dead_end(self) select_connections def select_connections(self) start_crawling def start_crawling(self, start_node=None) stop_crawling def stop_crawling(self) DummyNode None Module lilacs.processing.crawlers.connection_finder ConnectionFinderCrawler None execute_action def execute_action(self, connections) Module lilacs.processing.crawlers.dbpedia_crawler DBpediaBaseCrawler None choose_next_node def choose_next_node(self, connections) default_node def default_node(self, start_node=None) execute_action def execute_action(self, connections) on_dead_end def on_dead_end(self) select_connections def select_connections(self) Module lilacs.processing.crawlers.dictionary_finder DictionaryCrawler None execute_action def execute_action(self, connections) Module lilacs.processing.crawlers.fact_finder FactFinderCrawler None execute_action def execute_action(self, connections) Module lilacs.processing.crawlers.label_finder LabelCrawler None execute_action def execute_action(self, connections) Module lilacs.processing.crawlers.maintenance_crawler MaintenanceCrawler None execute_action def execute_action(self, connections) expand_synonyms def expand_synonyms(self) fix_empty_cons def fix_empty_cons(self) fix_incompatible_labels def fix_incompatible_labels(self) fix_references_to_self def fix_references_to_self(self) fix_types def fix_types(self) Module lilacs.processing.crawlers.nlp_crawler NLPCrawler None Module lilacs.processing.crawlers.related_finder RelatedCrawler None execute_action def execute_action(self, connections) Module lilacs.processing.crawlers.relationcruncher_crawler RelationCruncher None execute_action def execute_action(self, connections) RelationshipCruncher None execute_action def execute_action(self, connections) Module lilacs.processing.crawlers.triplecruncher_crawler RelationshipCruncher None execute_action def execute_action(self, connections) TripleCruncher None execute_action def execute_action(self, connections) Module lilacs.processing.crawlers.url_finder URLCrawler None choose_next_node def choose_next_node(self, connections) execute_action def execute_action(self, connections) Module lilacs.processing.nlp get_corefnlp def get_corefnlp() get_nlp def get_nlp() Module lilacs.processing.nlp.inflect article def article(word, function='indefinite') Returns the indefinite (a or an) or definite (the) article for the given word. attributive def attributive(adjective) comparative def comparative(adjective) definite_article def definite_article(word) grade def grade(adjective, suffix='er') Returns the comparative or superlative form of the given adjective. indefinite_article def indefinite_article(word) Returns the indefinite article for a given word. For example: indefinite_article(\"university\") => \"a\" university. is_vowel def is_vowel(ch) pluralize def pluralize(word, pos='NN', custom=None, classical=True) Returns the plural of a given word, e.g., child => children. Handles nouns and adjectives, using classical inflection by default (i.e., where \"matrix\" pluralizes to \"matrices\" and not \"matrixes\"). The custom dictionary is for user-defined replacements. predicative def predicative(adjective) referenced def referenced(word, article='indefinite') Returns a string with the article + the word. singularize def singularize(word, pos='NN', custom=None) Returns the singular of a given word. superlative def superlative(adjective) Module lilacs.processing.nlp.lexicons load_lexicon def load_lexicon() Module lilacs.processing.nlp.lexicons.wnaffect WNAffect WordNet-Affect resource. get_emotion def get_emotion(self, word, pos) Returns the emotion of the word. word -- the word (str) pos -- part-of-speech (str) get_emotion_synset def get_emotion_synset(self, offset) Returns the emotion of the synset. offset -- synset offset (int) WNAffectEmotion Defines an emotion. get_level def get_level(self, level) Returns the parent of self at the given level. level -- level in the hierarchy (int) nb_children def nb_children(self) Returns the number of children of the emotion. printTree def printTree(emotion=None, indent='', last='updown') Prints the hierarchy of emotions. emotion -- root emotion (Emotion) Module lilacs.processing.nlp.parse BasicQuestionParser Poor-man's english question parser. Not even close to conclusive, but appears to construct some decent w|a queries and responses. normalize def normalize(self, text) parse def parse(self, utterance) register_utterances def register_utterances(self) BasicTeacher Poor-man's english connection extractor. Not even close to complete normalize def normalize(self, text) parse def parse(self, utterance) register_utterances def register_utterances(self) LILACSQuestionParser Poor-man's english question parser. Not even close to conclusive, but appears to construct some decent w|a queries and responses. get_main_verbs_of_sent def get_main_verbs_of_sent(self, doc) Return the main (non-auxiliary) verbs in a sentence. get_noun_chunks def get_noun_chunks(self, doc) get_root def get_root(self, doc) get_subject_object def get_subject_object(self, doc) normalize def normalize(self, text) parse def parse(self, utterance) parse_question def parse_question(self, text) regex_parse def regex_parse(self, text) register_utterances def register_utterances(self) spotlight_tag def spotlight_tag(text) dependency_tree def dependency_tree(text, nlp=None) is_negated_verb def is_negated_verb(token) Returns True if verb is negated by one of its (dependency parse) children, False otherwise. Args: token (``spacy.Token``): parent document must have parse information Returns: bool TODO: generalize to other parts of speech; rule-based is pretty lacking, so will probably require training a model; this is an unsolved research problem normalize def normalize(text, remove_articles=True, solve_corefs=True, coref_nlp=None, nlp=None) English string normalization singularize def singularize(text, nlp=None) test_qp def test_qp() test_teacher def test_teacher() Module lilacs.processing.nlp.politness get_politness def get_politness(text) Module lilacs.processing.nlp.sentiment_analysis get_sentiment def get_sentiment(text, lang='en', emoticons=True, emoji=True) Module lilacs.processing.nlp.word_analysis get_color def get_color(word) NOTES: http://www.saifmohammad.com/WebDocs/ACL2011-word-colour-associations-poster.pdf get_emotion def get_emotion(word) get_orientation def get_orientation(word) get_sentence_color def get_sentence_color(sentence) get_sentence_emotions def get_sentence_emotions(sentence) get_sentence_sentiment def get_sentence_sentiment(sentence) get_sentence_subjectivity def get_sentence_subjectivity(sentence) get_sentiment def get_sentiment(word) get_subjectivity def get_subjectivity(word) Module lilacs.processing.nlp.word_vectors WordTwoVec a wrapper for gensim.Word2Vec with added functionality to embed phrases and compute the \"goodness\" of a question-answer pair based on embedding-vector similarity cosine_similarity def cosine_similarity(self, question_stem:str, choice_text:str) -> float how good is the choice for this question? embed def embed(self, words:Iterable[str]) -> numpy.ndarray given a list of words, find their vector embeddings and return the vector mean cosine_similarity def cosine_similarity(v1:numpy.ndarray, v2:numpy.ndarray) -> float https://en.wikipedia.org/wiki/Cosine_similarity similar_sense2vec def similar_sense2vec(text, nlp, num=5) similar_sense2vec_demo def similar_sense2vec_demo(text, sense='auto') similar_turkunlp_demo def similar_turkunlp_demo(text, n=10, model='Finnish+4B+wordforms+skipgram') stem def stem(word:str) -> str stemming words is not cheap, so use a cache decorator tokenizer def tokenizer(sentence:str) -> List[str] use gensim's simple_preprocess and STOPWORDS list Module lilacs.processing.vision LILACSVisualReasoner None answer_question def answer_question(self, question, picture_path, engine='sequel_demo') caption_image def caption_image(self, picture, engine='MAX-Image-Caption-Generator') colorize_image def colorize_image(self, picture, save_path=None, engine='MAX-Image-Colorizer') dense_captions def dense_captions(self, picture, engine='deepai_demo') image_segmentation def image_segmentation(self, picture, engine='MAX-Image-Segmenter', format='raw') image_similarity def image_similarity(self, picture1, picture2, engine='deepai_demo') label_image def label_image(self, picture, engine='MAX-ResNet-50') nudity_detection def nudity_detection(self, picture, engine='deepai_demo') recognize_objects def recognize_objects(self, picture, engine='MAX-Object-Detector') recognize_scene def recognize_scene(self, picture, engine='MAX-Scene-Classifier') deepmask def deepmask(picture, save_path=None, engine='deepai_demo') densecap def densecap(picture, engine='deepai_demo') image_captioning def image_captioning(picture, engine='MAX-Image-Caption-Generator') image_colorize def image_colorize(picture, engine='MAX-Image-Colorizer') image_label def image_label(picture, engine='MAX-ResNet-50') image_segmentation def image_segmentation(picture, engine='MAX-Image-Segmenter') image_similarity def image_similarity(picture1, picture2, engine='deepai_demo') lrp_demo def lrp_demo(picture, question) neuraltalk def neuraltalk(picture, engine='deepai_demo') nudity_detection def nudity_detection(picture, engine='deepai_demo') object_recognition def object_recognition(picture, engine='MAX-Object-Detector') scene_parsing def scene_parsing(picture) scene_recognition def scene_recognition(picture, engine='MAX-Scene-Classifier') scene_segmentation def scene_segmentation(picture) sequel_demo def sequel_demo(picture, question) Module lilacs.processing.vision.face LILACSFace None animate_eyes def animate_eyes(self, face_picture, mode=None, engine='deepwarp_demo') demographic_recognition def demographic_recognition(self, face_picture, engine='deepai_demo') face_age def face_age(self, face_picture, engine='MAX-Facial-Age-Estimator') face_analysis def face_analysis(self, face_picture, engine='deepface_demo') face_emotion def face_emotion(self, face_picture, engine='deepface_demo') animate_eyes def animate_eyes(face_picture, mode=None, engine='deepwarp_demo') demographic_recognition def demographic_recognition(face_picture, engine='deepai_demo') face_age def face_age(face_picture, engine='MAX-Facial-Age-Estimator') face_analysis def face_analysis(face_picture, engine='deepface_demo') face_emotion def face_emotion(face_picture, engine='deepface_demo') pornstar_match def pornstar_match(face_picture) Module lilacs.processing.vision.video temporal_action def temporal_action(frames)","title":"processing"},{"location":"lilacs.processing/#module-lilacsprocessing","text":"","title":"Module lilacs.processing"},{"location":"lilacs.processing/#lilacstextanalyzer","text":"None","title":"LILACSTextAnalyzer"},{"location":"lilacs.processing/#answer95question","text":"def answer_question(question, passage)","title":"answer_question"},{"location":"lilacs.processing/#constituency95parse","text":"def constituency_parse(text)","title":"constituency_parse"},{"location":"lilacs.processing/#coreference95resolution","text":"def coreference_resolution(text)","title":"coreference_resolution"},{"location":"lilacs.processing/#coreference95triples","text":"def coreference_triples(text)","title":"coreference_triples"},{"location":"lilacs.processing/#extract95facts","text":"def extract_facts(self, subject, text)","title":"extract_facts"},{"location":"lilacs.processing/#extract95nouns","text":"def extract_nouns(text)","title":"extract_nouns"},{"location":"lilacs.processing/#extract95triples","text":"def extract_triples(text)","title":"extract_triples"},{"location":"lilacs.processing/#interesting95triples","text":"def interesting_triples(text)","title":"interesting_triples"},{"location":"lilacs.processing/#normalize","text":"def normalize(text, remove_articles=False)","title":"normalize"},{"location":"lilacs.processing/#possible95relations","text":"def possible_relations(sentences)","title":"possible_relations"},{"location":"lilacs.processing/#validity95of95hypothesys","text":"def validity_of_hypothesys(premise, hypothesys)","title":"validity_of_hypothesys"},{"location":"lilacs.processing/#module-lilacsprocessingaudio","text":"","title":"Module lilacs.processing.audio"},{"location":"lilacs.processing/#classify95audio","text":"def classify_audio(wav_file, engine='MAX-Audio-Classifier')","title":"classify_audio"},{"location":"lilacs.processing/#module-lilacsprocessingcrawlers","text":"","title":"Module lilacs.processing.crawlers"},{"location":"lilacs.processing/#basecrawler","text":"None","title":"BaseCrawler"},{"location":"lilacs.processing/#choose95next95node","text":"def choose_next_node(self, connections)","title":"choose_next_node"},{"location":"lilacs.processing/#con95exists","text":"def con_exists(self, con_type, con_source, con_target)","title":"con_exists"},{"location":"lilacs.processing/#crawl95one","text":"def crawl_one(self)","title":"crawl_one"},{"location":"lilacs.processing/#default95node","text":"def default_node(self, start_node=None)","title":"default_node"},{"location":"lilacs.processing/#execute95action","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/#on95dead95end","text":"def on_dead_end(self)","title":"on_dead_end"},{"location":"lilacs.processing/#select95connections","text":"def select_connections(self)","title":"select_connections"},{"location":"lilacs.processing/#start95crawling","text":"def start_crawling(self, start_node=None)","title":"start_crawling"},{"location":"lilacs.processing/#stop95crawling","text":"def stop_crawling(self)","title":"stop_crawling"},{"location":"lilacs.processing/#dummycrawler","text":"None","title":"DummyCrawler"},{"location":"lilacs.processing/#choose95next95node_1","text":"def choose_next_node(self, connections)","title":"choose_next_node"},{"location":"lilacs.processing/#con95exists_1","text":"def con_exists(self, con_type, con_source, con_target)","title":"con_exists"},{"location":"lilacs.processing/#crawl95one_1","text":"def crawl_one(self)","title":"crawl_one"},{"location":"lilacs.processing/#default95node_1","text":"def default_node(self, start_node=None)","title":"default_node"},{"location":"lilacs.processing/#execute95action_1","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/#on95dead95end_1","text":"def on_dead_end(self)","title":"on_dead_end"},{"location":"lilacs.processing/#select95connections_1","text":"def select_connections(self)","title":"select_connections"},{"location":"lilacs.processing/#start95crawling_1","text":"def start_crawling(self, start_node=None)","title":"start_crawling"},{"location":"lilacs.processing/#stop95crawling_1","text":"def stop_crawling(self)","title":"stop_crawling"},{"location":"lilacs.processing/#dummynode","text":"None","title":"DummyNode"},{"location":"lilacs.processing/#module-lilacsprocessingcrawlersconnection_finder","text":"","title":"Module lilacs.processing.crawlers.connection_finder"},{"location":"lilacs.processing/#connectionfindercrawler","text":"None","title":"ConnectionFinderCrawler"},{"location":"lilacs.processing/#execute95action_2","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/#module-lilacsprocessingcrawlersdbpedia_crawler","text":"","title":"Module lilacs.processing.crawlers.dbpedia_crawler"},{"location":"lilacs.processing/#dbpediabasecrawler","text":"None","title":"DBpediaBaseCrawler"},{"location":"lilacs.processing/#choose95next95node_2","text":"def choose_next_node(self, connections)","title":"choose_next_node"},{"location":"lilacs.processing/#default95node_2","text":"def default_node(self, start_node=None)","title":"default_node"},{"location":"lilacs.processing/#execute95action_3","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/#on95dead95end_2","text":"def on_dead_end(self)","title":"on_dead_end"},{"location":"lilacs.processing/#select95connections_2","text":"def select_connections(self)","title":"select_connections"},{"location":"lilacs.processing/#module-lilacsprocessingcrawlersdictionary_finder","text":"","title":"Module lilacs.processing.crawlers.dictionary_finder"},{"location":"lilacs.processing/#dictionarycrawler","text":"None","title":"DictionaryCrawler"},{"location":"lilacs.processing/#execute95action_4","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/#module-lilacsprocessingcrawlersfact_finder","text":"","title":"Module lilacs.processing.crawlers.fact_finder"},{"location":"lilacs.processing/#factfindercrawler","text":"None","title":"FactFinderCrawler"},{"location":"lilacs.processing/#execute95action_5","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/#module-lilacsprocessingcrawlerslabel_finder","text":"","title":"Module lilacs.processing.crawlers.label_finder"},{"location":"lilacs.processing/#labelcrawler","text":"None","title":"LabelCrawler"},{"location":"lilacs.processing/#execute95action_6","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/#module-lilacsprocessingcrawlersmaintenance_crawler","text":"","title":"Module lilacs.processing.crawlers.maintenance_crawler"},{"location":"lilacs.processing/#maintenancecrawler","text":"None","title":"MaintenanceCrawler"},{"location":"lilacs.processing/#execute95action_7","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/#expand95synonyms","text":"def expand_synonyms(self)","title":"expand_synonyms"},{"location":"lilacs.processing/#fix95empty95cons","text":"def fix_empty_cons(self)","title":"fix_empty_cons"},{"location":"lilacs.processing/#fix95incompatible95labels","text":"def fix_incompatible_labels(self)","title":"fix_incompatible_labels"},{"location":"lilacs.processing/#fix95references95to95self","text":"def fix_references_to_self(self)","title":"fix_references_to_self"},{"location":"lilacs.processing/#fix95types","text":"def fix_types(self)","title":"fix_types"},{"location":"lilacs.processing/#module-lilacsprocessingcrawlersnlp_crawler","text":"","title":"Module lilacs.processing.crawlers.nlp_crawler"},{"location":"lilacs.processing/#nlpcrawler","text":"None","title":"NLPCrawler"},{"location":"lilacs.processing/#module-lilacsprocessingcrawlersrelated_finder","text":"","title":"Module lilacs.processing.crawlers.related_finder"},{"location":"lilacs.processing/#relatedcrawler","text":"None","title":"RelatedCrawler"},{"location":"lilacs.processing/#execute95action_8","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/#module-lilacsprocessingcrawlersrelationcruncher_crawler","text":"","title":"Module lilacs.processing.crawlers.relationcruncher_crawler"},{"location":"lilacs.processing/#relationcruncher","text":"None","title":"RelationCruncher"},{"location":"lilacs.processing/#execute95action_9","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/#relationshipcruncher","text":"None","title":"RelationshipCruncher"},{"location":"lilacs.processing/#execute95action_10","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/#module-lilacsprocessingcrawlerstriplecruncher_crawler","text":"","title":"Module lilacs.processing.crawlers.triplecruncher_crawler"},{"location":"lilacs.processing/#relationshipcruncher_1","text":"None","title":"RelationshipCruncher"},{"location":"lilacs.processing/#execute95action_11","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/#triplecruncher","text":"None","title":"TripleCruncher"},{"location":"lilacs.processing/#execute95action_12","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/#module-lilacsprocessingcrawlersurl_finder","text":"","title":"Module lilacs.processing.crawlers.url_finder"},{"location":"lilacs.processing/#urlcrawler","text":"None","title":"URLCrawler"},{"location":"lilacs.processing/#choose95next95node_3","text":"def choose_next_node(self, connections)","title":"choose_next_node"},{"location":"lilacs.processing/#execute95action_13","text":"def execute_action(self, connections)","title":"execute_action"},{"location":"lilacs.processing/#module-lilacsprocessingnlp","text":"","title":"Module lilacs.processing.nlp"},{"location":"lilacs.processing/#get95corefnlp","text":"def get_corefnlp()","title":"get_corefnlp"},{"location":"lilacs.processing/#get95nlp","text":"def get_nlp()","title":"get_nlp"},{"location":"lilacs.processing/#module-lilacsprocessingnlpinflect","text":"","title":"Module lilacs.processing.nlp.inflect"},{"location":"lilacs.processing/#article","text":"def article(word, function='indefinite') Returns the indefinite (a or an) or definite (the) article for the given word.","title":"article"},{"location":"lilacs.processing/#attributive","text":"def attributive(adjective)","title":"attributive"},{"location":"lilacs.processing/#comparative","text":"def comparative(adjective)","title":"comparative"},{"location":"lilacs.processing/#definite95article","text":"def definite_article(word)","title":"definite_article"},{"location":"lilacs.processing/#grade","text":"def grade(adjective, suffix='er') Returns the comparative or superlative form of the given adjective.","title":"grade"},{"location":"lilacs.processing/#indefinite95article","text":"def indefinite_article(word) Returns the indefinite article for a given word. For example: indefinite_article(\"university\") => \"a\" university.","title":"indefinite_article"},{"location":"lilacs.processing/#is95vowel","text":"def is_vowel(ch)","title":"is_vowel"},{"location":"lilacs.processing/#pluralize","text":"def pluralize(word, pos='NN', custom=None, classical=True) Returns the plural of a given word, e.g., child => children. Handles nouns and adjectives, using classical inflection by default (i.e., where \"matrix\" pluralizes to \"matrices\" and not \"matrixes\"). The custom dictionary is for user-defined replacements.","title":"pluralize"},{"location":"lilacs.processing/#predicative","text":"def predicative(adjective)","title":"predicative"},{"location":"lilacs.processing/#referenced","text":"def referenced(word, article='indefinite') Returns a string with the article + the word.","title":"referenced"},{"location":"lilacs.processing/#singularize","text":"def singularize(word, pos='NN', custom=None) Returns the singular of a given word.","title":"singularize"},{"location":"lilacs.processing/#superlative","text":"def superlative(adjective)","title":"superlative"},{"location":"lilacs.processing/#module-lilacsprocessingnlplexicons","text":"","title":"Module lilacs.processing.nlp.lexicons"},{"location":"lilacs.processing/#load95lexicon","text":"def load_lexicon()","title":"load_lexicon"},{"location":"lilacs.processing/#module-lilacsprocessingnlplexiconswnaffect","text":"","title":"Module lilacs.processing.nlp.lexicons.wnaffect"},{"location":"lilacs.processing/#wnaffect","text":"WordNet-Affect resource.","title":"WNAffect"},{"location":"lilacs.processing/#get95emotion","text":"def get_emotion(self, word, pos) Returns the emotion of the word. word -- the word (str) pos -- part-of-speech (str)","title":"get_emotion"},{"location":"lilacs.processing/#get95emotion95synset","text":"def get_emotion_synset(self, offset) Returns the emotion of the synset. offset -- synset offset (int)","title":"get_emotion_synset"},{"location":"lilacs.processing/#wnaffectemotion","text":"Defines an emotion.","title":"WNAffectEmotion"},{"location":"lilacs.processing/#get95level","text":"def get_level(self, level) Returns the parent of self at the given level. level -- level in the hierarchy (int)","title":"get_level"},{"location":"lilacs.processing/#nb95children","text":"def nb_children(self) Returns the number of children of the emotion.","title":"nb_children"},{"location":"lilacs.processing/#printtree","text":"def printTree(emotion=None, indent='', last='updown') Prints the hierarchy of emotions. emotion -- root emotion (Emotion)","title":"printTree"},{"location":"lilacs.processing/#module-lilacsprocessingnlpparse","text":"","title":"Module lilacs.processing.nlp.parse"},{"location":"lilacs.processing/#basicquestionparser","text":"Poor-man's english question parser. Not even close to conclusive, but appears to construct some decent w|a queries and responses.","title":"BasicQuestionParser"},{"location":"lilacs.processing/#normalize_1","text":"def normalize(self, text)","title":"normalize"},{"location":"lilacs.processing/#parse","text":"def parse(self, utterance)","title":"parse"},{"location":"lilacs.processing/#register95utterances","text":"def register_utterances(self)","title":"register_utterances"},{"location":"lilacs.processing/#basicteacher","text":"Poor-man's english connection extractor. Not even close to complete","title":"BasicTeacher"},{"location":"lilacs.processing/#normalize_2","text":"def normalize(self, text)","title":"normalize"},{"location":"lilacs.processing/#parse_1","text":"def parse(self, utterance)","title":"parse"},{"location":"lilacs.processing/#register95utterances_1","text":"def register_utterances(self)","title":"register_utterances"},{"location":"lilacs.processing/#lilacsquestionparser","text":"Poor-man's english question parser. Not even close to conclusive, but appears to construct some decent w|a queries and responses.","title":"LILACSQuestionParser"},{"location":"lilacs.processing/#get95main95verbs95of95sent","text":"def get_main_verbs_of_sent(self, doc) Return the main (non-auxiliary) verbs in a sentence.","title":"get_main_verbs_of_sent"},{"location":"lilacs.processing/#get95noun95chunks","text":"def get_noun_chunks(self, doc)","title":"get_noun_chunks"},{"location":"lilacs.processing/#get95root","text":"def get_root(self, doc)","title":"get_root"},{"location":"lilacs.processing/#get95subject95object","text":"def get_subject_object(self, doc)","title":"get_subject_object"},{"location":"lilacs.processing/#normalize_3","text":"def normalize(self, text)","title":"normalize"},{"location":"lilacs.processing/#parse_2","text":"def parse(self, utterance)","title":"parse"},{"location":"lilacs.processing/#parse95question","text":"def parse_question(self, text)","title":"parse_question"},{"location":"lilacs.processing/#regex95parse","text":"def regex_parse(self, text)","title":"regex_parse"},{"location":"lilacs.processing/#register95utterances_2","text":"def register_utterances(self)","title":"register_utterances"},{"location":"lilacs.processing/#spotlight95tag","text":"def spotlight_tag(text)","title":"spotlight_tag"},{"location":"lilacs.processing/#dependency95tree","text":"def dependency_tree(text, nlp=None)","title":"dependency_tree"},{"location":"lilacs.processing/#is95negated95verb","text":"def is_negated_verb(token) Returns True if verb is negated by one of its (dependency parse) children, False otherwise. Args: token (``spacy.Token``): parent document must have parse information Returns: bool TODO: generalize to other parts of speech; rule-based is pretty lacking, so will probably require training a model; this is an unsolved research problem","title":"is_negated_verb"},{"location":"lilacs.processing/#normalize_4","text":"def normalize(text, remove_articles=True, solve_corefs=True, coref_nlp=None, nlp=None) English string normalization","title":"normalize"},{"location":"lilacs.processing/#singularize_1","text":"def singularize(text, nlp=None)","title":"singularize"},{"location":"lilacs.processing/#test95qp","text":"def test_qp()","title":"test_qp"},{"location":"lilacs.processing/#test95teacher","text":"def test_teacher()","title":"test_teacher"},{"location":"lilacs.processing/#module-lilacsprocessingnlppolitness","text":"","title":"Module lilacs.processing.nlp.politness"},{"location":"lilacs.processing/#get95politness","text":"def get_politness(text)","title":"get_politness"},{"location":"lilacs.processing/#module-lilacsprocessingnlpsentiment_analysis","text":"","title":"Module lilacs.processing.nlp.sentiment_analysis"},{"location":"lilacs.processing/#get95sentiment","text":"def get_sentiment(text, lang='en', emoticons=True, emoji=True)","title":"get_sentiment"},{"location":"lilacs.processing/#module-lilacsprocessingnlpword_analysis","text":"","title":"Module lilacs.processing.nlp.word_analysis"},{"location":"lilacs.processing/#get95color","text":"def get_color(word) NOTES: http://www.saifmohammad.com/WebDocs/ACL2011-word-colour-associations-poster.pdf","title":"get_color"},{"location":"lilacs.processing/#get95emotion_1","text":"def get_emotion(word)","title":"get_emotion"},{"location":"lilacs.processing/#get95orientation","text":"def get_orientation(word)","title":"get_orientation"},{"location":"lilacs.processing/#get95sentence95color","text":"def get_sentence_color(sentence)","title":"get_sentence_color"},{"location":"lilacs.processing/#get95sentence95emotions","text":"def get_sentence_emotions(sentence)","title":"get_sentence_emotions"},{"location":"lilacs.processing/#get95sentence95sentiment","text":"def get_sentence_sentiment(sentence)","title":"get_sentence_sentiment"},{"location":"lilacs.processing/#get95sentence95subjectivity","text":"def get_sentence_subjectivity(sentence)","title":"get_sentence_subjectivity"},{"location":"lilacs.processing/#get95sentiment_1","text":"def get_sentiment(word)","title":"get_sentiment"},{"location":"lilacs.processing/#get95subjectivity","text":"def get_subjectivity(word)","title":"get_subjectivity"},{"location":"lilacs.processing/#module-lilacsprocessingnlpword_vectors","text":"","title":"Module lilacs.processing.nlp.word_vectors"},{"location":"lilacs.processing/#wordtwovec","text":"a wrapper for gensim.Word2Vec with added functionality to embed phrases and compute the \"goodness\" of a question-answer pair based on embedding-vector similarity","title":"WordTwoVec"},{"location":"lilacs.processing/#cosine95similarity","text":"def cosine_similarity(self, question_stem:str, choice_text:str) -> float how good is the choice for this question?","title":"cosine_similarity"},{"location":"lilacs.processing/#embed","text":"def embed(self, words:Iterable[str]) -> numpy.ndarray given a list of words, find their vector embeddings and return the vector mean","title":"embed"},{"location":"lilacs.processing/#cosine95similarity_1","text":"def cosine_similarity(v1:numpy.ndarray, v2:numpy.ndarray) -> float https://en.wikipedia.org/wiki/Cosine_similarity","title":"cosine_similarity"},{"location":"lilacs.processing/#similar95sense2vec","text":"def similar_sense2vec(text, nlp, num=5)","title":"similar_sense2vec"},{"location":"lilacs.processing/#similar95sense2vec95demo","text":"def similar_sense2vec_demo(text, sense='auto')","title":"similar_sense2vec_demo"},{"location":"lilacs.processing/#similar95turkunlp95demo","text":"def similar_turkunlp_demo(text, n=10, model='Finnish+4B+wordforms+skipgram')","title":"similar_turkunlp_demo"},{"location":"lilacs.processing/#stem","text":"def stem(word:str) -> str stemming words is not cheap, so use a cache decorator","title":"stem"},{"location":"lilacs.processing/#tokenizer","text":"def tokenizer(sentence:str) -> List[str] use gensim's simple_preprocess and STOPWORDS list","title":"tokenizer"},{"location":"lilacs.processing/#module-lilacsprocessingvision","text":"","title":"Module lilacs.processing.vision"},{"location":"lilacs.processing/#lilacsvisualreasoner","text":"None","title":"LILACSVisualReasoner"},{"location":"lilacs.processing/#answer95question_1","text":"def answer_question(self, question, picture_path, engine='sequel_demo')","title":"answer_question"},{"location":"lilacs.processing/#caption95image","text":"def caption_image(self, picture, engine='MAX-Image-Caption-Generator')","title":"caption_image"},{"location":"lilacs.processing/#colorize95image","text":"def colorize_image(self, picture, save_path=None, engine='MAX-Image-Colorizer')","title":"colorize_image"},{"location":"lilacs.processing/#dense95captions","text":"def dense_captions(self, picture, engine='deepai_demo')","title":"dense_captions"},{"location":"lilacs.processing/#image95segmentation","text":"def image_segmentation(self, picture, engine='MAX-Image-Segmenter', format='raw')","title":"image_segmentation"},{"location":"lilacs.processing/#image95similarity","text":"def image_similarity(self, picture1, picture2, engine='deepai_demo')","title":"image_similarity"},{"location":"lilacs.processing/#label95image","text":"def label_image(self, picture, engine='MAX-ResNet-50')","title":"label_image"},{"location":"lilacs.processing/#nudity95detection","text":"def nudity_detection(self, picture, engine='deepai_demo')","title":"nudity_detection"},{"location":"lilacs.processing/#recognize95objects","text":"def recognize_objects(self, picture, engine='MAX-Object-Detector')","title":"recognize_objects"},{"location":"lilacs.processing/#recognize95scene","text":"def recognize_scene(self, picture, engine='MAX-Scene-Classifier')","title":"recognize_scene"},{"location":"lilacs.processing/#deepmask","text":"def deepmask(picture, save_path=None, engine='deepai_demo')","title":"deepmask"},{"location":"lilacs.processing/#densecap","text":"def densecap(picture, engine='deepai_demo')","title":"densecap"},{"location":"lilacs.processing/#image95captioning","text":"def image_captioning(picture, engine='MAX-Image-Caption-Generator')","title":"image_captioning"},{"location":"lilacs.processing/#image95colorize","text":"def image_colorize(picture, engine='MAX-Image-Colorizer')","title":"image_colorize"},{"location":"lilacs.processing/#image95label","text":"def image_label(picture, engine='MAX-ResNet-50')","title":"image_label"},{"location":"lilacs.processing/#image95segmentation_1","text":"def image_segmentation(picture, engine='MAX-Image-Segmenter')","title":"image_segmentation"},{"location":"lilacs.processing/#image95similarity_1","text":"def image_similarity(picture1, picture2, engine='deepai_demo')","title":"image_similarity"},{"location":"lilacs.processing/#lrp95demo","text":"def lrp_demo(picture, question)","title":"lrp_demo"},{"location":"lilacs.processing/#neuraltalk","text":"def neuraltalk(picture, engine='deepai_demo')","title":"neuraltalk"},{"location":"lilacs.processing/#nudity95detection_1","text":"def nudity_detection(picture, engine='deepai_demo')","title":"nudity_detection"},{"location":"lilacs.processing/#object95recognition","text":"def object_recognition(picture, engine='MAX-Object-Detector')","title":"object_recognition"},{"location":"lilacs.processing/#scene95parsing","text":"def scene_parsing(picture)","title":"scene_parsing"},{"location":"lilacs.processing/#scene95recognition","text":"def scene_recognition(picture, engine='MAX-Scene-Classifier')","title":"scene_recognition"},{"location":"lilacs.processing/#scene95segmentation","text":"def scene_segmentation(picture)","title":"scene_segmentation"},{"location":"lilacs.processing/#sequel95demo","text":"def sequel_demo(picture, question)","title":"sequel_demo"},{"location":"lilacs.processing/#module-lilacsprocessingvisionface","text":"","title":"Module lilacs.processing.vision.face"},{"location":"lilacs.processing/#lilacsface","text":"None","title":"LILACSFace"},{"location":"lilacs.processing/#animate95eyes","text":"def animate_eyes(self, face_picture, mode=None, engine='deepwarp_demo')","title":"animate_eyes"},{"location":"lilacs.processing/#demographic95recognition","text":"def demographic_recognition(self, face_picture, engine='deepai_demo')","title":"demographic_recognition"},{"location":"lilacs.processing/#face95age","text":"def face_age(self, face_picture, engine='MAX-Facial-Age-Estimator')","title":"face_age"},{"location":"lilacs.processing/#face95analysis","text":"def face_analysis(self, face_picture, engine='deepface_demo')","title":"face_analysis"},{"location":"lilacs.processing/#face95emotion","text":"def face_emotion(self, face_picture, engine='deepface_demo')","title":"face_emotion"},{"location":"lilacs.processing/#animate95eyes_1","text":"def animate_eyes(face_picture, mode=None, engine='deepwarp_demo')","title":"animate_eyes"},{"location":"lilacs.processing/#demographic95recognition_1","text":"def demographic_recognition(face_picture, engine='deepai_demo')","title":"demographic_recognition"},{"location":"lilacs.processing/#face95age_1","text":"def face_age(face_picture, engine='MAX-Facial-Age-Estimator')","title":"face_age"},{"location":"lilacs.processing/#face95analysis_1","text":"def face_analysis(face_picture, engine='deepface_demo')","title":"face_analysis"},{"location":"lilacs.processing/#face95emotion_1","text":"def face_emotion(face_picture, engine='deepface_demo')","title":"face_emotion"},{"location":"lilacs.processing/#pornstar95match","text":"def pornstar_match(face_picture)","title":"pornstar_match"},{"location":"lilacs.processing/#module-lilacsprocessingvisionvideo","text":"","title":"Module lilacs.processing.vision.video"},{"location":"lilacs.processing/#temporal95action","text":"def temporal_action(frames)","title":"temporal_action"},{"location":"lilacs.processing.nlp.inflect/","text":"Module lilacs.processing.nlp.inflect article def article(word, function='indefinite') Returns the indefinite (a or an) or definite (the) article for the given word. attributive def attributive(adjective) comparative def comparative(adjective) definite_article def definite_article(word) grade def grade(adjective, suffix='er') Returns the comparative or superlative form of the given adjective. indefinite_article def indefinite_article(word) Returns the indefinite article for a given word. For example: indefinite_article(\"university\") => \"a\" university. is_vowel def is_vowel(ch) pluralize def pluralize(word, pos='NN', custom=None, classical=True) Returns the plural of a given word, e.g., child => children. Handles nouns and adjectives, using classical inflection by default (i.e., where \"matrix\" pluralizes to \"matrices\" and not \"matrixes\"). The custom dictionary is for user-defined replacements. predicative def predicative(adjective) referenced def referenced(word, article='indefinite') Returns a string with the article + the word. singularize def singularize(word, pos='NN', custom=None) Returns the singular of a given word. superlative def superlative(adjective)","title":"inflect"},{"location":"lilacs.processing.nlp.inflect/#module-lilacsprocessingnlpinflect","text":"","title":"Module lilacs.processing.nlp.inflect"},{"location":"lilacs.processing.nlp.inflect/#article","text":"def article(word, function='indefinite') Returns the indefinite (a or an) or definite (the) article for the given word.","title":"article"},{"location":"lilacs.processing.nlp.inflect/#attributive","text":"def attributive(adjective)","title":"attributive"},{"location":"lilacs.processing.nlp.inflect/#comparative","text":"def comparative(adjective)","title":"comparative"},{"location":"lilacs.processing.nlp.inflect/#definite95article","text":"def definite_article(word)","title":"definite_article"},{"location":"lilacs.processing.nlp.inflect/#grade","text":"def grade(adjective, suffix='er') Returns the comparative or superlative form of the given adjective.","title":"grade"},{"location":"lilacs.processing.nlp.inflect/#indefinite95article","text":"def indefinite_article(word) Returns the indefinite article for a given word. For example: indefinite_article(\"university\") => \"a\" university.","title":"indefinite_article"},{"location":"lilacs.processing.nlp.inflect/#is95vowel","text":"def is_vowel(ch)","title":"is_vowel"},{"location":"lilacs.processing.nlp.inflect/#pluralize","text":"def pluralize(word, pos='NN', custom=None, classical=True) Returns the plural of a given word, e.g., child => children. Handles nouns and adjectives, using classical inflection by default (i.e., where \"matrix\" pluralizes to \"matrices\" and not \"matrixes\"). The custom dictionary is for user-defined replacements.","title":"pluralize"},{"location":"lilacs.processing.nlp.inflect/#predicative","text":"def predicative(adjective)","title":"predicative"},{"location":"lilacs.processing.nlp.inflect/#referenced","text":"def referenced(word, article='indefinite') Returns a string with the article + the word.","title":"referenced"},{"location":"lilacs.processing.nlp.inflect/#singularize","text":"def singularize(word, pos='NN', custom=None) Returns the singular of a given word.","title":"singularize"},{"location":"lilacs.processing.nlp.inflect/#superlative","text":"def superlative(adjective)","title":"superlative"},{"location":"lilacs.processing.nlp.lexicons/","text":"Module lilacs.processing.nlp.lexicons load_lexicon def load_lexicon() Module lilacs.processing.nlp.lexicons.wnaffect WNAffect WordNet-Affect resource. get_emotion def get_emotion(self, word, pos) Returns the emotion of the word. word -- the word (str) pos -- part-of-speech (str) get_emotion_synset def get_emotion_synset(self, offset) Returns the emotion of the synset. offset -- synset offset (int) WNAffectEmotion Defines an emotion. get_level def get_level(self, level) Returns the parent of self at the given level. level -- level in the hierarchy (int) nb_children def nb_children(self) Returns the number of children of the emotion. printTree def printTree(emotion=None, indent='', last='updown') Prints the hierarchy of emotions. emotion -- root emotion (Emotion)","title":"lexicons"},{"location":"lilacs.processing.nlp.lexicons/#module-lilacsprocessingnlplexicons","text":"","title":"Module lilacs.processing.nlp.lexicons"},{"location":"lilacs.processing.nlp.lexicons/#load95lexicon","text":"def load_lexicon()","title":"load_lexicon"},{"location":"lilacs.processing.nlp.lexicons/#module-lilacsprocessingnlplexiconswnaffect","text":"","title":"Module lilacs.processing.nlp.lexicons.wnaffect"},{"location":"lilacs.processing.nlp.lexicons/#wnaffect","text":"WordNet-Affect resource.","title":"WNAffect"},{"location":"lilacs.processing.nlp.lexicons/#get95emotion","text":"def get_emotion(self, word, pos) Returns the emotion of the word. word -- the word (str) pos -- part-of-speech (str)","title":"get_emotion"},{"location":"lilacs.processing.nlp.lexicons/#get95emotion95synset","text":"def get_emotion_synset(self, offset) Returns the emotion of the synset. offset -- synset offset (int)","title":"get_emotion_synset"},{"location":"lilacs.processing.nlp.lexicons/#wnaffectemotion","text":"Defines an emotion.","title":"WNAffectEmotion"},{"location":"lilacs.processing.nlp.lexicons/#get95level","text":"def get_level(self, level) Returns the parent of self at the given level. level -- level in the hierarchy (int)","title":"get_level"},{"location":"lilacs.processing.nlp.lexicons/#nb95children","text":"def nb_children(self) Returns the number of children of the emotion.","title":"nb_children"},{"location":"lilacs.processing.nlp.lexicons/#printtree","text":"def printTree(emotion=None, indent='', last='updown') Prints the hierarchy of emotions. emotion -- root emotion (Emotion)","title":"printTree"},{"location":"lilacs.processing.nlp.lexicons.wnaffect/","text":"Module lilacs.processing.nlp.lexicons.wnaffect WNAffect WordNet-Affect resource. get_emotion def get_emotion(self, word, pos) Returns the emotion of the word. word -- the word (str) pos -- part-of-speech (str) get_emotion_synset def get_emotion_synset(self, offset) Returns the emotion of the synset. offset -- synset offset (int) WNAffectEmotion Defines an emotion. get_level def get_level(self, level) Returns the parent of self at the given level. level -- level in the hierarchy (int) nb_children def nb_children(self) Returns the number of children of the emotion. printTree def printTree(emotion=None, indent='', last='updown') Prints the hierarchy of emotions. emotion -- root emotion (Emotion)","title":"wnaffect"},{"location":"lilacs.processing.nlp.lexicons.wnaffect/#module-lilacsprocessingnlplexiconswnaffect","text":"","title":"Module lilacs.processing.nlp.lexicons.wnaffect"},{"location":"lilacs.processing.nlp.lexicons.wnaffect/#wnaffect","text":"WordNet-Affect resource.","title":"WNAffect"},{"location":"lilacs.processing.nlp.lexicons.wnaffect/#get95emotion","text":"def get_emotion(self, word, pos) Returns the emotion of the word. word -- the word (str) pos -- part-of-speech (str)","title":"get_emotion"},{"location":"lilacs.processing.nlp.lexicons.wnaffect/#get95emotion95synset","text":"def get_emotion_synset(self, offset) Returns the emotion of the synset. offset -- synset offset (int)","title":"get_emotion_synset"},{"location":"lilacs.processing.nlp.lexicons.wnaffect/#wnaffectemotion","text":"Defines an emotion.","title":"WNAffectEmotion"},{"location":"lilacs.processing.nlp.lexicons.wnaffect/#get95level","text":"def get_level(self, level) Returns the parent of self at the given level. level -- level in the hierarchy (int)","title":"get_level"},{"location":"lilacs.processing.nlp.lexicons.wnaffect/#nb95children","text":"def nb_children(self) Returns the number of children of the emotion.","title":"nb_children"},{"location":"lilacs.processing.nlp.lexicons.wnaffect/#printtree","text":"def printTree(emotion=None, indent='', last='updown') Prints the hierarchy of emotions. emotion -- root emotion (Emotion)","title":"printTree"},{"location":"lilacs.processing.nlp/","text":"Module lilacs.processing.nlp get_corefnlp def get_corefnlp() get_nlp def get_nlp() Module lilacs.processing.nlp.inflect article def article(word, function='indefinite') Returns the indefinite (a or an) or definite (the) article for the given word. attributive def attributive(adjective) comparative def comparative(adjective) definite_article def definite_article(word) grade def grade(adjective, suffix='er') Returns the comparative or superlative form of the given adjective. indefinite_article def indefinite_article(word) Returns the indefinite article for a given word. For example: indefinite_article(\"university\") => \"a\" university. is_vowel def is_vowel(ch) pluralize def pluralize(word, pos='NN', custom=None, classical=True) Returns the plural of a given word, e.g., child => children. Handles nouns and adjectives, using classical inflection by default (i.e., where \"matrix\" pluralizes to \"matrices\" and not \"matrixes\"). The custom dictionary is for user-defined replacements. predicative def predicative(adjective) referenced def referenced(word, article='indefinite') Returns a string with the article + the word. singularize def singularize(word, pos='NN', custom=None) Returns the singular of a given word. superlative def superlative(adjective) Module lilacs.processing.nlp.lexicons load_lexicon def load_lexicon() Module lilacs.processing.nlp.lexicons.wnaffect WNAffect WordNet-Affect resource. get_emotion def get_emotion(self, word, pos) Returns the emotion of the word. word -- the word (str) pos -- part-of-speech (str) get_emotion_synset def get_emotion_synset(self, offset) Returns the emotion of the synset. offset -- synset offset (int) WNAffectEmotion Defines an emotion. get_level def get_level(self, level) Returns the parent of self at the given level. level -- level in the hierarchy (int) nb_children def nb_children(self) Returns the number of children of the emotion. printTree def printTree(emotion=None, indent='', last='updown') Prints the hierarchy of emotions. emotion -- root emotion (Emotion) Module lilacs.processing.nlp.parse BasicQuestionParser Poor-man's english question parser. Not even close to conclusive, but appears to construct some decent w|a queries and responses. normalize def normalize(self, text) parse def parse(self, utterance) register_utterances def register_utterances(self) BasicTeacher Poor-man's english connection extractor. Not even close to complete normalize def normalize(self, text) parse def parse(self, utterance) register_utterances def register_utterances(self) LILACSQuestionParser Poor-man's english question parser. Not even close to conclusive, but appears to construct some decent w|a queries and responses. get_main_verbs_of_sent def get_main_verbs_of_sent(self, doc) Return the main (non-auxiliary) verbs in a sentence. get_noun_chunks def get_noun_chunks(self, doc) get_root def get_root(self, doc) get_subject_object def get_subject_object(self, doc) normalize def normalize(self, text) parse def parse(self, utterance) parse_question def parse_question(self, text) regex_parse def regex_parse(self, text) register_utterances def register_utterances(self) spotlight_tag def spotlight_tag(text) dependency_tree def dependency_tree(text, nlp=None) is_negated_verb def is_negated_verb(token) Returns True if verb is negated by one of its (dependency parse) children, False otherwise. Args: token (``spacy.Token``): parent document must have parse information Returns: bool TODO: generalize to other parts of speech; rule-based is pretty lacking, so will probably require training a model; this is an unsolved research problem normalize def normalize(text, remove_articles=True, solve_corefs=True, coref_nlp=None, nlp=None) English string normalization singularize def singularize(text, nlp=None) test_qp def test_qp() test_teacher def test_teacher() Module lilacs.processing.nlp.politness get_politness def get_politness(text) Module lilacs.processing.nlp.sentiment_analysis get_sentiment def get_sentiment(text, lang='en', emoticons=True, emoji=True) Module lilacs.processing.nlp.word_analysis get_color def get_color(word) NOTES: http://www.saifmohammad.com/WebDocs/ACL2011-word-colour-associations-poster.pdf get_emotion def get_emotion(word) get_orientation def get_orientation(word) get_sentence_color def get_sentence_color(sentence) get_sentence_emotions def get_sentence_emotions(sentence) get_sentence_sentiment def get_sentence_sentiment(sentence) get_sentence_subjectivity def get_sentence_subjectivity(sentence) get_sentiment def get_sentiment(word) get_subjectivity def get_subjectivity(word) Module lilacs.processing.nlp.word_vectors WordTwoVec a wrapper for gensim.Word2Vec with added functionality to embed phrases and compute the \"goodness\" of a question-answer pair based on embedding-vector similarity cosine_similarity def cosine_similarity(self, question_stem:str, choice_text:str) -> float how good is the choice for this question? embed def embed(self, words:Iterable[str]) -> numpy.ndarray given a list of words, find their vector embeddings and return the vector mean cosine_similarity def cosine_similarity(v1:numpy.ndarray, v2:numpy.ndarray) -> float https://en.wikipedia.org/wiki/Cosine_similarity similar_sense2vec def similar_sense2vec(text, nlp, num=5) similar_sense2vec_demo def similar_sense2vec_demo(text, sense='auto') similar_turkunlp_demo def similar_turkunlp_demo(text, n=10, model='Finnish+4B+wordforms+skipgram') stem def stem(word:str) -> str stemming words is not cheap, so use a cache decorator tokenizer def tokenizer(sentence:str) -> List[str] use gensim's simple_preprocess and STOPWORDS list","title":"nlp"},{"location":"lilacs.processing.nlp/#module-lilacsprocessingnlp","text":"","title":"Module lilacs.processing.nlp"},{"location":"lilacs.processing.nlp/#get95corefnlp","text":"def get_corefnlp()","title":"get_corefnlp"},{"location":"lilacs.processing.nlp/#get95nlp","text":"def get_nlp()","title":"get_nlp"},{"location":"lilacs.processing.nlp/#module-lilacsprocessingnlpinflect","text":"","title":"Module lilacs.processing.nlp.inflect"},{"location":"lilacs.processing.nlp/#article","text":"def article(word, function='indefinite') Returns the indefinite (a or an) or definite (the) article for the given word.","title":"article"},{"location":"lilacs.processing.nlp/#attributive","text":"def attributive(adjective)","title":"attributive"},{"location":"lilacs.processing.nlp/#comparative","text":"def comparative(adjective)","title":"comparative"},{"location":"lilacs.processing.nlp/#definite95article","text":"def definite_article(word)","title":"definite_article"},{"location":"lilacs.processing.nlp/#grade","text":"def grade(adjective, suffix='er') Returns the comparative or superlative form of the given adjective.","title":"grade"},{"location":"lilacs.processing.nlp/#indefinite95article","text":"def indefinite_article(word) Returns the indefinite article for a given word. For example: indefinite_article(\"university\") => \"a\" university.","title":"indefinite_article"},{"location":"lilacs.processing.nlp/#is95vowel","text":"def is_vowel(ch)","title":"is_vowel"},{"location":"lilacs.processing.nlp/#pluralize","text":"def pluralize(word, pos='NN', custom=None, classical=True) Returns the plural of a given word, e.g., child => children. Handles nouns and adjectives, using classical inflection by default (i.e., where \"matrix\" pluralizes to \"matrices\" and not \"matrixes\"). The custom dictionary is for user-defined replacements.","title":"pluralize"},{"location":"lilacs.processing.nlp/#predicative","text":"def predicative(adjective)","title":"predicative"},{"location":"lilacs.processing.nlp/#referenced","text":"def referenced(word, article='indefinite') Returns a string with the article + the word.","title":"referenced"},{"location":"lilacs.processing.nlp/#singularize","text":"def singularize(word, pos='NN', custom=None) Returns the singular of a given word.","title":"singularize"},{"location":"lilacs.processing.nlp/#superlative","text":"def superlative(adjective)","title":"superlative"},{"location":"lilacs.processing.nlp/#module-lilacsprocessingnlplexicons","text":"","title":"Module lilacs.processing.nlp.lexicons"},{"location":"lilacs.processing.nlp/#load95lexicon","text":"def load_lexicon()","title":"load_lexicon"},{"location":"lilacs.processing.nlp/#module-lilacsprocessingnlplexiconswnaffect","text":"","title":"Module lilacs.processing.nlp.lexicons.wnaffect"},{"location":"lilacs.processing.nlp/#wnaffect","text":"WordNet-Affect resource.","title":"WNAffect"},{"location":"lilacs.processing.nlp/#get95emotion","text":"def get_emotion(self, word, pos) Returns the emotion of the word. word -- the word (str) pos -- part-of-speech (str)","title":"get_emotion"},{"location":"lilacs.processing.nlp/#get95emotion95synset","text":"def get_emotion_synset(self, offset) Returns the emotion of the synset. offset -- synset offset (int)","title":"get_emotion_synset"},{"location":"lilacs.processing.nlp/#wnaffectemotion","text":"Defines an emotion.","title":"WNAffectEmotion"},{"location":"lilacs.processing.nlp/#get95level","text":"def get_level(self, level) Returns the parent of self at the given level. level -- level in the hierarchy (int)","title":"get_level"},{"location":"lilacs.processing.nlp/#nb95children","text":"def nb_children(self) Returns the number of children of the emotion.","title":"nb_children"},{"location":"lilacs.processing.nlp/#printtree","text":"def printTree(emotion=None, indent='', last='updown') Prints the hierarchy of emotions. emotion -- root emotion (Emotion)","title":"printTree"},{"location":"lilacs.processing.nlp/#module-lilacsprocessingnlpparse","text":"","title":"Module lilacs.processing.nlp.parse"},{"location":"lilacs.processing.nlp/#basicquestionparser","text":"Poor-man's english question parser. Not even close to conclusive, but appears to construct some decent w|a queries and responses.","title":"BasicQuestionParser"},{"location":"lilacs.processing.nlp/#normalize","text":"def normalize(self, text)","title":"normalize"},{"location":"lilacs.processing.nlp/#parse","text":"def parse(self, utterance)","title":"parse"},{"location":"lilacs.processing.nlp/#register95utterances","text":"def register_utterances(self)","title":"register_utterances"},{"location":"lilacs.processing.nlp/#basicteacher","text":"Poor-man's english connection extractor. Not even close to complete","title":"BasicTeacher"},{"location":"lilacs.processing.nlp/#normalize_1","text":"def normalize(self, text)","title":"normalize"},{"location":"lilacs.processing.nlp/#parse_1","text":"def parse(self, utterance)","title":"parse"},{"location":"lilacs.processing.nlp/#register95utterances_1","text":"def register_utterances(self)","title":"register_utterances"},{"location":"lilacs.processing.nlp/#lilacsquestionparser","text":"Poor-man's english question parser. Not even close to conclusive, but appears to construct some decent w|a queries and responses.","title":"LILACSQuestionParser"},{"location":"lilacs.processing.nlp/#get95main95verbs95of95sent","text":"def get_main_verbs_of_sent(self, doc) Return the main (non-auxiliary) verbs in a sentence.","title":"get_main_verbs_of_sent"},{"location":"lilacs.processing.nlp/#get95noun95chunks","text":"def get_noun_chunks(self, doc)","title":"get_noun_chunks"},{"location":"lilacs.processing.nlp/#get95root","text":"def get_root(self, doc)","title":"get_root"},{"location":"lilacs.processing.nlp/#get95subject95object","text":"def get_subject_object(self, doc)","title":"get_subject_object"},{"location":"lilacs.processing.nlp/#normalize_2","text":"def normalize(self, text)","title":"normalize"},{"location":"lilacs.processing.nlp/#parse_2","text":"def parse(self, utterance)","title":"parse"},{"location":"lilacs.processing.nlp/#parse95question","text":"def parse_question(self, text)","title":"parse_question"},{"location":"lilacs.processing.nlp/#regex95parse","text":"def regex_parse(self, text)","title":"regex_parse"},{"location":"lilacs.processing.nlp/#register95utterances_2","text":"def register_utterances(self)","title":"register_utterances"},{"location":"lilacs.processing.nlp/#spotlight95tag","text":"def spotlight_tag(text)","title":"spotlight_tag"},{"location":"lilacs.processing.nlp/#dependency95tree","text":"def dependency_tree(text, nlp=None)","title":"dependency_tree"},{"location":"lilacs.processing.nlp/#is95negated95verb","text":"def is_negated_verb(token) Returns True if verb is negated by one of its (dependency parse) children, False otherwise. Args: token (``spacy.Token``): parent document must have parse information Returns: bool TODO: generalize to other parts of speech; rule-based is pretty lacking, so will probably require training a model; this is an unsolved research problem","title":"is_negated_verb"},{"location":"lilacs.processing.nlp/#normalize_3","text":"def normalize(text, remove_articles=True, solve_corefs=True, coref_nlp=None, nlp=None) English string normalization","title":"normalize"},{"location":"lilacs.processing.nlp/#singularize_1","text":"def singularize(text, nlp=None)","title":"singularize"},{"location":"lilacs.processing.nlp/#test95qp","text":"def test_qp()","title":"test_qp"},{"location":"lilacs.processing.nlp/#test95teacher","text":"def test_teacher()","title":"test_teacher"},{"location":"lilacs.processing.nlp/#module-lilacsprocessingnlppolitness","text":"","title":"Module lilacs.processing.nlp.politness"},{"location":"lilacs.processing.nlp/#get95politness","text":"def get_politness(text)","title":"get_politness"},{"location":"lilacs.processing.nlp/#module-lilacsprocessingnlpsentiment_analysis","text":"","title":"Module lilacs.processing.nlp.sentiment_analysis"},{"location":"lilacs.processing.nlp/#get95sentiment","text":"def get_sentiment(text, lang='en', emoticons=True, emoji=True)","title":"get_sentiment"},{"location":"lilacs.processing.nlp/#module-lilacsprocessingnlpword_analysis","text":"","title":"Module lilacs.processing.nlp.word_analysis"},{"location":"lilacs.processing.nlp/#get95color","text":"def get_color(word) NOTES: http://www.saifmohammad.com/WebDocs/ACL2011-word-colour-associations-poster.pdf","title":"get_color"},{"location":"lilacs.processing.nlp/#get95emotion_1","text":"def get_emotion(word)","title":"get_emotion"},{"location":"lilacs.processing.nlp/#get95orientation","text":"def get_orientation(word)","title":"get_orientation"},{"location":"lilacs.processing.nlp/#get95sentence95color","text":"def get_sentence_color(sentence)","title":"get_sentence_color"},{"location":"lilacs.processing.nlp/#get95sentence95emotions","text":"def get_sentence_emotions(sentence)","title":"get_sentence_emotions"},{"location":"lilacs.processing.nlp/#get95sentence95sentiment","text":"def get_sentence_sentiment(sentence)","title":"get_sentence_sentiment"},{"location":"lilacs.processing.nlp/#get95sentence95subjectivity","text":"def get_sentence_subjectivity(sentence)","title":"get_sentence_subjectivity"},{"location":"lilacs.processing.nlp/#get95sentiment_1","text":"def get_sentiment(word)","title":"get_sentiment"},{"location":"lilacs.processing.nlp/#get95subjectivity","text":"def get_subjectivity(word)","title":"get_subjectivity"},{"location":"lilacs.processing.nlp/#module-lilacsprocessingnlpword_vectors","text":"","title":"Module lilacs.processing.nlp.word_vectors"},{"location":"lilacs.processing.nlp/#wordtwovec","text":"a wrapper for gensim.Word2Vec with added functionality to embed phrases and compute the \"goodness\" of a question-answer pair based on embedding-vector similarity","title":"WordTwoVec"},{"location":"lilacs.processing.nlp/#cosine95similarity","text":"def cosine_similarity(self, question_stem:str, choice_text:str) -> float how good is the choice for this question?","title":"cosine_similarity"},{"location":"lilacs.processing.nlp/#embed","text":"def embed(self, words:Iterable[str]) -> numpy.ndarray given a list of words, find their vector embeddings and return the vector mean","title":"embed"},{"location":"lilacs.processing.nlp/#cosine95similarity_1","text":"def cosine_similarity(v1:numpy.ndarray, v2:numpy.ndarray) -> float https://en.wikipedia.org/wiki/Cosine_similarity","title":"cosine_similarity"},{"location":"lilacs.processing.nlp/#similar95sense2vec","text":"def similar_sense2vec(text, nlp, num=5)","title":"similar_sense2vec"},{"location":"lilacs.processing.nlp/#similar95sense2vec95demo","text":"def similar_sense2vec_demo(text, sense='auto')","title":"similar_sense2vec_demo"},{"location":"lilacs.processing.nlp/#similar95turkunlp95demo","text":"def similar_turkunlp_demo(text, n=10, model='Finnish+4B+wordforms+skipgram')","title":"similar_turkunlp_demo"},{"location":"lilacs.processing.nlp/#stem","text":"def stem(word:str) -> str stemming words is not cheap, so use a cache decorator","title":"stem"},{"location":"lilacs.processing.nlp/#tokenizer","text":"def tokenizer(sentence:str) -> List[str] use gensim's simple_preprocess and STOPWORDS list","title":"tokenizer"},{"location":"lilacs.processing.nlp.parse/","text":"Module lilacs.processing.nlp.parse BasicQuestionParser Poor-man's english question parser. Not even close to conclusive, but appears to construct some decent w|a queries and responses. normalize def normalize(self, text) parse def parse(self, utterance) register_utterances def register_utterances(self) BasicTeacher Poor-man's english connection extractor. Not even close to complete normalize def normalize(self, text) parse def parse(self, utterance) register_utterances def register_utterances(self) LILACSQuestionParser Poor-man's english question parser. Not even close to conclusive, but appears to construct some decent w|a queries and responses. get_main_verbs_of_sent def get_main_verbs_of_sent(self, doc) Return the main (non-auxiliary) verbs in a sentence. get_noun_chunks def get_noun_chunks(self, doc) get_root def get_root(self, doc) get_subject_object def get_subject_object(self, doc) normalize def normalize(self, text) parse def parse(self, utterance) parse_question def parse_question(self, text) regex_parse def regex_parse(self, text) register_utterances def register_utterances(self) spotlight_tag def spotlight_tag(text) dependency_tree def dependency_tree(text, nlp=None) is_negated_verb def is_negated_verb(token) Returns True if verb is negated by one of its (dependency parse) children, False otherwise. Args: token (``spacy.Token``): parent document must have parse information Returns: bool TODO: generalize to other parts of speech; rule-based is pretty lacking, so will probably require training a model; this is an unsolved research problem normalize def normalize(text, remove_articles=True, solve_corefs=True, coref_nlp=None, nlp=None) English string normalization singularize def singularize(text, nlp=None) test_qp def test_qp() test_teacher def test_teacher()","title":"parse"},{"location":"lilacs.processing.nlp.parse/#module-lilacsprocessingnlpparse","text":"","title":"Module lilacs.processing.nlp.parse"},{"location":"lilacs.processing.nlp.parse/#basicquestionparser","text":"Poor-man's english question parser. Not even close to conclusive, but appears to construct some decent w|a queries and responses.","title":"BasicQuestionParser"},{"location":"lilacs.processing.nlp.parse/#normalize","text":"def normalize(self, text)","title":"normalize"},{"location":"lilacs.processing.nlp.parse/#parse","text":"def parse(self, utterance)","title":"parse"},{"location":"lilacs.processing.nlp.parse/#register95utterances","text":"def register_utterances(self)","title":"register_utterances"},{"location":"lilacs.processing.nlp.parse/#basicteacher","text":"Poor-man's english connection extractor. Not even close to complete","title":"BasicTeacher"},{"location":"lilacs.processing.nlp.parse/#normalize_1","text":"def normalize(self, text)","title":"normalize"},{"location":"lilacs.processing.nlp.parse/#parse_1","text":"def parse(self, utterance)","title":"parse"},{"location":"lilacs.processing.nlp.parse/#register95utterances_1","text":"def register_utterances(self)","title":"register_utterances"},{"location":"lilacs.processing.nlp.parse/#lilacsquestionparser","text":"Poor-man's english question parser. Not even close to conclusive, but appears to construct some decent w|a queries and responses.","title":"LILACSQuestionParser"},{"location":"lilacs.processing.nlp.parse/#get95main95verbs95of95sent","text":"def get_main_verbs_of_sent(self, doc) Return the main (non-auxiliary) verbs in a sentence.","title":"get_main_verbs_of_sent"},{"location":"lilacs.processing.nlp.parse/#get95noun95chunks","text":"def get_noun_chunks(self, doc)","title":"get_noun_chunks"},{"location":"lilacs.processing.nlp.parse/#get95root","text":"def get_root(self, doc)","title":"get_root"},{"location":"lilacs.processing.nlp.parse/#get95subject95object","text":"def get_subject_object(self, doc)","title":"get_subject_object"},{"location":"lilacs.processing.nlp.parse/#normalize_2","text":"def normalize(self, text)","title":"normalize"},{"location":"lilacs.processing.nlp.parse/#parse_2","text":"def parse(self, utterance)","title":"parse"},{"location":"lilacs.processing.nlp.parse/#parse95question","text":"def parse_question(self, text)","title":"parse_question"},{"location":"lilacs.processing.nlp.parse/#regex95parse","text":"def regex_parse(self, text)","title":"regex_parse"},{"location":"lilacs.processing.nlp.parse/#register95utterances_2","text":"def register_utterances(self)","title":"register_utterances"},{"location":"lilacs.processing.nlp.parse/#spotlight95tag","text":"def spotlight_tag(text)","title":"spotlight_tag"},{"location":"lilacs.processing.nlp.parse/#dependency95tree","text":"def dependency_tree(text, nlp=None)","title":"dependency_tree"},{"location":"lilacs.processing.nlp.parse/#is95negated95verb","text":"def is_negated_verb(token) Returns True if verb is negated by one of its (dependency parse) children, False otherwise. Args: token (``spacy.Token``): parent document must have parse information Returns: bool TODO: generalize to other parts of speech; rule-based is pretty lacking, so will probably require training a model; this is an unsolved research problem","title":"is_negated_verb"},{"location":"lilacs.processing.nlp.parse/#normalize_3","text":"def normalize(text, remove_articles=True, solve_corefs=True, coref_nlp=None, nlp=None) English string normalization","title":"normalize"},{"location":"lilacs.processing.nlp.parse/#singularize","text":"def singularize(text, nlp=None)","title":"singularize"},{"location":"lilacs.processing.nlp.parse/#test95qp","text":"def test_qp()","title":"test_qp"},{"location":"lilacs.processing.nlp.parse/#test95teacher","text":"def test_teacher()","title":"test_teacher"},{"location":"lilacs.processing.nlp.politness/","text":"Module lilacs.processing.nlp.politness get_politness def get_politness(text)","title":"politness"},{"location":"lilacs.processing.nlp.politness/#module-lilacsprocessingnlppolitness","text":"","title":"Module lilacs.processing.nlp.politness"},{"location":"lilacs.processing.nlp.politness/#get95politness","text":"def get_politness(text)","title":"get_politness"},{"location":"lilacs.processing.nlp.sentiment_analysis/","text":"Module lilacs.processing.nlp.sentiment_analysis get_sentiment def get_sentiment(text, lang='en', emoticons=True, emoji=True)","title":"sentiment_analysis"},{"location":"lilacs.processing.nlp.sentiment_analysis/#module-lilacsprocessingnlpsentiment_analysis","text":"","title":"Module lilacs.processing.nlp.sentiment_analysis"},{"location":"lilacs.processing.nlp.sentiment_analysis/#get95sentiment","text":"def get_sentiment(text, lang='en', emoticons=True, emoji=True)","title":"get_sentiment"},{"location":"lilacs.processing.nlp.word_analysis/","text":"Module lilacs.processing.nlp.word_analysis get_color def get_color(word) NOTES: http://www.saifmohammad.com/WebDocs/ACL2011-word-colour-associations-poster.pdf get_emotion def get_emotion(word) get_orientation def get_orientation(word) get_sentence_color def get_sentence_color(sentence) get_sentence_emotions def get_sentence_emotions(sentence) get_sentence_sentiment def get_sentence_sentiment(sentence) get_sentence_subjectivity def get_sentence_subjectivity(sentence) get_sentiment def get_sentiment(word) get_subjectivity def get_subjectivity(word)","title":"word_analysis"},{"location":"lilacs.processing.nlp.word_analysis/#module-lilacsprocessingnlpword_analysis","text":"","title":"Module lilacs.processing.nlp.word_analysis"},{"location":"lilacs.processing.nlp.word_analysis/#get95color","text":"def get_color(word) NOTES: http://www.saifmohammad.com/WebDocs/ACL2011-word-colour-associations-poster.pdf","title":"get_color"},{"location":"lilacs.processing.nlp.word_analysis/#get95emotion","text":"def get_emotion(word)","title":"get_emotion"},{"location":"lilacs.processing.nlp.word_analysis/#get95orientation","text":"def get_orientation(word)","title":"get_orientation"},{"location":"lilacs.processing.nlp.word_analysis/#get95sentence95color","text":"def get_sentence_color(sentence)","title":"get_sentence_color"},{"location":"lilacs.processing.nlp.word_analysis/#get95sentence95emotions","text":"def get_sentence_emotions(sentence)","title":"get_sentence_emotions"},{"location":"lilacs.processing.nlp.word_analysis/#get95sentence95sentiment","text":"def get_sentence_sentiment(sentence)","title":"get_sentence_sentiment"},{"location":"lilacs.processing.nlp.word_analysis/#get95sentence95subjectivity","text":"def get_sentence_subjectivity(sentence)","title":"get_sentence_subjectivity"},{"location":"lilacs.processing.nlp.word_analysis/#get95sentiment","text":"def get_sentiment(word)","title":"get_sentiment"},{"location":"lilacs.processing.nlp.word_analysis/#get95subjectivity","text":"def get_subjectivity(word)","title":"get_subjectivity"},{"location":"lilacs.processing.nlp.word_vectors/","text":"Module lilacs.processing.nlp.word_vectors WordTwoVec a wrapper for gensim.Word2Vec with added functionality to embed phrases and compute the \"goodness\" of a question-answer pair based on embedding-vector similarity cosine_similarity def cosine_similarity(self, question_stem:str, choice_text:str) -> float how good is the choice for this question? embed def embed(self, words:Iterable[str]) -> numpy.ndarray given a list of words, find their vector embeddings and return the vector mean cosine_similarity def cosine_similarity(v1:numpy.ndarray, v2:numpy.ndarray) -> float https://en.wikipedia.org/wiki/Cosine_similarity similar_sense2vec def similar_sense2vec(text, nlp, num=5) similar_sense2vec_demo def similar_sense2vec_demo(text, sense='auto') similar_turkunlp_demo def similar_turkunlp_demo(text, n=10, model='Finnish+4B+wordforms+skipgram') stem def stem(word:str) -> str stemming words is not cheap, so use a cache decorator tokenizer def tokenizer(sentence:str) -> List[str] use gensim's simple_preprocess and STOPWORDS list","title":"word_vectors"},{"location":"lilacs.processing.nlp.word_vectors/#module-lilacsprocessingnlpword_vectors","text":"","title":"Module lilacs.processing.nlp.word_vectors"},{"location":"lilacs.processing.nlp.word_vectors/#wordtwovec","text":"a wrapper for gensim.Word2Vec with added functionality to embed phrases and compute the \"goodness\" of a question-answer pair based on embedding-vector similarity","title":"WordTwoVec"},{"location":"lilacs.processing.nlp.word_vectors/#cosine95similarity","text":"def cosine_similarity(self, question_stem:str, choice_text:str) -> float how good is the choice for this question?","title":"cosine_similarity"},{"location":"lilacs.processing.nlp.word_vectors/#embed","text":"def embed(self, words:Iterable[str]) -> numpy.ndarray given a list of words, find their vector embeddings and return the vector mean","title":"embed"},{"location":"lilacs.processing.nlp.word_vectors/#cosine95similarity_1","text":"def cosine_similarity(v1:numpy.ndarray, v2:numpy.ndarray) -> float https://en.wikipedia.org/wiki/Cosine_similarity","title":"cosine_similarity"},{"location":"lilacs.processing.nlp.word_vectors/#similar95sense2vec","text":"def similar_sense2vec(text, nlp, num=5)","title":"similar_sense2vec"},{"location":"lilacs.processing.nlp.word_vectors/#similar95sense2vec95demo","text":"def similar_sense2vec_demo(text, sense='auto')","title":"similar_sense2vec_demo"},{"location":"lilacs.processing.nlp.word_vectors/#similar95turkunlp95demo","text":"def similar_turkunlp_demo(text, n=10, model='Finnish+4B+wordforms+skipgram')","title":"similar_turkunlp_demo"},{"location":"lilacs.processing.nlp.word_vectors/#stem","text":"def stem(word:str) -> str stemming words is not cheap, so use a cache decorator","title":"stem"},{"location":"lilacs.processing.nlp.word_vectors/#tokenizer","text":"def tokenizer(sentence:str) -> List[str] use gensim's simple_preprocess and STOPWORDS list","title":"tokenizer"},{"location":"lilacs.processing.vision.face/","text":"Module lilacs.processing.vision.face LILACSFace None animate_eyes def animate_eyes(self, face_picture, mode=None, engine='deepwarp_demo') demographic_recognition def demographic_recognition(self, face_picture, engine='deepai_demo') face_age def face_age(self, face_picture, engine='MAX-Facial-Age-Estimator') face_analysis def face_analysis(self, face_picture, engine='deepface_demo') face_emotion def face_emotion(self, face_picture, engine='deepface_demo') animate_eyes def animate_eyes(face_picture, mode=None, engine='deepwarp_demo') demographic_recognition def demographic_recognition(face_picture, engine='deepai_demo') face_age def face_age(face_picture, engine='MAX-Facial-Age-Estimator') face_analysis def face_analysis(face_picture, engine='deepface_demo') face_emotion def face_emotion(face_picture, engine='deepface_demo') pornstar_match def pornstar_match(face_picture)","title":"face"},{"location":"lilacs.processing.vision.face/#module-lilacsprocessingvisionface","text":"","title":"Module lilacs.processing.vision.face"},{"location":"lilacs.processing.vision.face/#lilacsface","text":"None","title":"LILACSFace"},{"location":"lilacs.processing.vision.face/#animate95eyes","text":"def animate_eyes(self, face_picture, mode=None, engine='deepwarp_demo')","title":"animate_eyes"},{"location":"lilacs.processing.vision.face/#demographic95recognition","text":"def demographic_recognition(self, face_picture, engine='deepai_demo')","title":"demographic_recognition"},{"location":"lilacs.processing.vision.face/#face95age","text":"def face_age(self, face_picture, engine='MAX-Facial-Age-Estimator')","title":"face_age"},{"location":"lilacs.processing.vision.face/#face95analysis","text":"def face_analysis(self, face_picture, engine='deepface_demo')","title":"face_analysis"},{"location":"lilacs.processing.vision.face/#face95emotion","text":"def face_emotion(self, face_picture, engine='deepface_demo')","title":"face_emotion"},{"location":"lilacs.processing.vision.face/#animate95eyes_1","text":"def animate_eyes(face_picture, mode=None, engine='deepwarp_demo')","title":"animate_eyes"},{"location":"lilacs.processing.vision.face/#demographic95recognition_1","text":"def demographic_recognition(face_picture, engine='deepai_demo')","title":"demographic_recognition"},{"location":"lilacs.processing.vision.face/#face95age_1","text":"def face_age(face_picture, engine='MAX-Facial-Age-Estimator')","title":"face_age"},{"location":"lilacs.processing.vision.face/#face95analysis_1","text":"def face_analysis(face_picture, engine='deepface_demo')","title":"face_analysis"},{"location":"lilacs.processing.vision.face/#face95emotion_1","text":"def face_emotion(face_picture, engine='deepface_demo')","title":"face_emotion"},{"location":"lilacs.processing.vision.face/#pornstar95match","text":"def pornstar_match(face_picture)","title":"pornstar_match"},{"location":"lilacs.processing.vision/","text":"Module lilacs.processing.vision LILACSVisualReasoner None answer_question def answer_question(self, question, picture_path, engine='sequel_demo') caption_image def caption_image(self, picture, engine='MAX-Image-Caption-Generator') colorize_image def colorize_image(self, picture, save_path=None, engine='MAX-Image-Colorizer') dense_captions def dense_captions(self, picture, engine='deepai_demo') image_segmentation def image_segmentation(self, picture, engine='MAX-Image-Segmenter', format='raw') image_similarity def image_similarity(self, picture1, picture2, engine='deepai_demo') label_image def label_image(self, picture, engine='MAX-ResNet-50') nudity_detection def nudity_detection(self, picture, engine='deepai_demo') recognize_objects def recognize_objects(self, picture, engine='MAX-Object-Detector') recognize_scene def recognize_scene(self, picture, engine='MAX-Scene-Classifier') deepmask def deepmask(picture, save_path=None, engine='deepai_demo') densecap def densecap(picture, engine='deepai_demo') image_captioning def image_captioning(picture, engine='MAX-Image-Caption-Generator') image_colorize def image_colorize(picture, engine='MAX-Image-Colorizer') image_label def image_label(picture, engine='MAX-ResNet-50') image_segmentation def image_segmentation(picture, engine='MAX-Image-Segmenter') image_similarity def image_similarity(picture1, picture2, engine='deepai_demo') lrp_demo def lrp_demo(picture, question) neuraltalk def neuraltalk(picture, engine='deepai_demo') nudity_detection def nudity_detection(picture, engine='deepai_demo') object_recognition def object_recognition(picture, engine='MAX-Object-Detector') scene_parsing def scene_parsing(picture) scene_recognition def scene_recognition(picture, engine='MAX-Scene-Classifier') scene_segmentation def scene_segmentation(picture) sequel_demo def sequel_demo(picture, question) Module lilacs.processing.vision.face LILACSFace None animate_eyes def animate_eyes(self, face_picture, mode=None, engine='deepwarp_demo') demographic_recognition def demographic_recognition(self, face_picture, engine='deepai_demo') face_age def face_age(self, face_picture, engine='MAX-Facial-Age-Estimator') face_analysis def face_analysis(self, face_picture, engine='deepface_demo') face_emotion def face_emotion(self, face_picture, engine='deepface_demo') animate_eyes def animate_eyes(face_picture, mode=None, engine='deepwarp_demo') demographic_recognition def demographic_recognition(face_picture, engine='deepai_demo') face_age def face_age(face_picture, engine='MAX-Facial-Age-Estimator') face_analysis def face_analysis(face_picture, engine='deepface_demo') face_emotion def face_emotion(face_picture, engine='deepface_demo') pornstar_match def pornstar_match(face_picture) Module lilacs.processing.vision.video temporal_action def temporal_action(frames)","title":"vision"},{"location":"lilacs.processing.vision/#module-lilacsprocessingvision","text":"","title":"Module lilacs.processing.vision"},{"location":"lilacs.processing.vision/#lilacsvisualreasoner","text":"None","title":"LILACSVisualReasoner"},{"location":"lilacs.processing.vision/#answer95question","text":"def answer_question(self, question, picture_path, engine='sequel_demo')","title":"answer_question"},{"location":"lilacs.processing.vision/#caption95image","text":"def caption_image(self, picture, engine='MAX-Image-Caption-Generator')","title":"caption_image"},{"location":"lilacs.processing.vision/#colorize95image","text":"def colorize_image(self, picture, save_path=None, engine='MAX-Image-Colorizer')","title":"colorize_image"},{"location":"lilacs.processing.vision/#dense95captions","text":"def dense_captions(self, picture, engine='deepai_demo')","title":"dense_captions"},{"location":"lilacs.processing.vision/#image95segmentation","text":"def image_segmentation(self, picture, engine='MAX-Image-Segmenter', format='raw')","title":"image_segmentation"},{"location":"lilacs.processing.vision/#image95similarity","text":"def image_similarity(self, picture1, picture2, engine='deepai_demo')","title":"image_similarity"},{"location":"lilacs.processing.vision/#label95image","text":"def label_image(self, picture, engine='MAX-ResNet-50')","title":"label_image"},{"location":"lilacs.processing.vision/#nudity95detection","text":"def nudity_detection(self, picture, engine='deepai_demo')","title":"nudity_detection"},{"location":"lilacs.processing.vision/#recognize95objects","text":"def recognize_objects(self, picture, engine='MAX-Object-Detector')","title":"recognize_objects"},{"location":"lilacs.processing.vision/#recognize95scene","text":"def recognize_scene(self, picture, engine='MAX-Scene-Classifier')","title":"recognize_scene"},{"location":"lilacs.processing.vision/#deepmask","text":"def deepmask(picture, save_path=None, engine='deepai_demo')","title":"deepmask"},{"location":"lilacs.processing.vision/#densecap","text":"def densecap(picture, engine='deepai_demo')","title":"densecap"},{"location":"lilacs.processing.vision/#image95captioning","text":"def image_captioning(picture, engine='MAX-Image-Caption-Generator')","title":"image_captioning"},{"location":"lilacs.processing.vision/#image95colorize","text":"def image_colorize(picture, engine='MAX-Image-Colorizer')","title":"image_colorize"},{"location":"lilacs.processing.vision/#image95label","text":"def image_label(picture, engine='MAX-ResNet-50')","title":"image_label"},{"location":"lilacs.processing.vision/#image95segmentation_1","text":"def image_segmentation(picture, engine='MAX-Image-Segmenter')","title":"image_segmentation"},{"location":"lilacs.processing.vision/#image95similarity_1","text":"def image_similarity(picture1, picture2, engine='deepai_demo')","title":"image_similarity"},{"location":"lilacs.processing.vision/#lrp95demo","text":"def lrp_demo(picture, question)","title":"lrp_demo"},{"location":"lilacs.processing.vision/#neuraltalk","text":"def neuraltalk(picture, engine='deepai_demo')","title":"neuraltalk"},{"location":"lilacs.processing.vision/#nudity95detection_1","text":"def nudity_detection(picture, engine='deepai_demo')","title":"nudity_detection"},{"location":"lilacs.processing.vision/#object95recognition","text":"def object_recognition(picture, engine='MAX-Object-Detector')","title":"object_recognition"},{"location":"lilacs.processing.vision/#scene95parsing","text":"def scene_parsing(picture)","title":"scene_parsing"},{"location":"lilacs.processing.vision/#scene95recognition","text":"def scene_recognition(picture, engine='MAX-Scene-Classifier')","title":"scene_recognition"},{"location":"lilacs.processing.vision/#scene95segmentation","text":"def scene_segmentation(picture)","title":"scene_segmentation"},{"location":"lilacs.processing.vision/#sequel95demo","text":"def sequel_demo(picture, question)","title":"sequel_demo"},{"location":"lilacs.processing.vision/#module-lilacsprocessingvisionface","text":"","title":"Module lilacs.processing.vision.face"},{"location":"lilacs.processing.vision/#lilacsface","text":"None","title":"LILACSFace"},{"location":"lilacs.processing.vision/#animate95eyes","text":"def animate_eyes(self, face_picture, mode=None, engine='deepwarp_demo')","title":"animate_eyes"},{"location":"lilacs.processing.vision/#demographic95recognition","text":"def demographic_recognition(self, face_picture, engine='deepai_demo')","title":"demographic_recognition"},{"location":"lilacs.processing.vision/#face95age","text":"def face_age(self, face_picture, engine='MAX-Facial-Age-Estimator')","title":"face_age"},{"location":"lilacs.processing.vision/#face95analysis","text":"def face_analysis(self, face_picture, engine='deepface_demo')","title":"face_analysis"},{"location":"lilacs.processing.vision/#face95emotion","text":"def face_emotion(self, face_picture, engine='deepface_demo')","title":"face_emotion"},{"location":"lilacs.processing.vision/#animate95eyes_1","text":"def animate_eyes(face_picture, mode=None, engine='deepwarp_demo')","title":"animate_eyes"},{"location":"lilacs.processing.vision/#demographic95recognition_1","text":"def demographic_recognition(face_picture, engine='deepai_demo')","title":"demographic_recognition"},{"location":"lilacs.processing.vision/#face95age_1","text":"def face_age(face_picture, engine='MAX-Facial-Age-Estimator')","title":"face_age"},{"location":"lilacs.processing.vision/#face95analysis_1","text":"def face_analysis(face_picture, engine='deepface_demo')","title":"face_analysis"},{"location":"lilacs.processing.vision/#face95emotion_1","text":"def face_emotion(face_picture, engine='deepface_demo')","title":"face_emotion"},{"location":"lilacs.processing.vision/#pornstar95match","text":"def pornstar_match(face_picture)","title":"pornstar_match"},{"location":"lilacs.processing.vision/#module-lilacsprocessingvisionvideo","text":"","title":"Module lilacs.processing.vision.video"},{"location":"lilacs.processing.vision/#temporal95action","text":"def temporal_action(frames)","title":"temporal_action"},{"location":"lilacs.processing.vision.video/","text":"Module lilacs.processing.vision.video temporal_action def temporal_action(frames)","title":"video"},{"location":"lilacs.processing.vision.video/#module-lilacsprocessingvisionvideo","text":"","title":"Module lilacs.processing.vision.video"},{"location":"lilacs.processing.vision.video/#temporal95action","text":"def temporal_action(frames)","title":"temporal_action"},{"location":"lilacs.sentience.context.core/","text":"Module lilacs.sentience.context.core ActionContext None EmotionContext None influence_handler def influence_handler(self, data) PastActionContext None PastEmotionContext None influence_handler def influence_handler(self, data) PastUserActionContext None PastUserEmotionContext None influence_handler def influence_handler(self, data) UserActionContext None UserEmotionContext None influence_handler def influence_handler(self, data)","title":"core"},{"location":"lilacs.sentience.context.core/#module-lilacssentiencecontextcore","text":"","title":"Module lilacs.sentience.context.core"},{"location":"lilacs.sentience.context.core/#actioncontext","text":"None","title":"ActionContext"},{"location":"lilacs.sentience.context.core/#emotioncontext","text":"None","title":"EmotionContext"},{"location":"lilacs.sentience.context.core/#influence95handler","text":"def influence_handler(self, data)","title":"influence_handler"},{"location":"lilacs.sentience.context.core/#pastactioncontext","text":"None","title":"PastActionContext"},{"location":"lilacs.sentience.context.core/#pastemotioncontext","text":"None","title":"PastEmotionContext"},{"location":"lilacs.sentience.context.core/#influence95handler_1","text":"def influence_handler(self, data)","title":"influence_handler"},{"location":"lilacs.sentience.context.core/#pastuseractioncontext","text":"None","title":"PastUserActionContext"},{"location":"lilacs.sentience.context.core/#pastuseremotioncontext","text":"None","title":"PastUserEmotionContext"},{"location":"lilacs.sentience.context.core/#influence95handler_2","text":"def influence_handler(self, data)","title":"influence_handler"},{"location":"lilacs.sentience.context.core/#useractioncontext","text":"None","title":"UserActionContext"},{"location":"lilacs.sentience.context.core/#useremotioncontext","text":"None","title":"UserEmotionContext"},{"location":"lilacs.sentience.context.core/#influence95handler_3","text":"def influence_handler(self, data)","title":"influence_handler"},{"location":"lilacs.sentience.context/","text":"Module lilacs.sentience.context BaseSituationalContext None execute def execute(self, data=None) register_accuracy_change def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return: register_availability_change def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return: register_influence_change def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return: register_meaning_change def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return: ComputationalContext None execute def execute(self, data=None) register_accuracy_change def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return: register_availability_change def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return: register_influence_change def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return: register_meaning_change def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return: DataChange None execute def execute(self, data=None) initialize def initialize(self) register_handler def register_handler(self, handler) EnvironmentalContext None execute def execute(self, data=None) register_accuracy_change def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return: register_availability_change def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return: register_influence_change def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return: register_meaning_change def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return: HistoricalContext None execute def execute(self, data=None) register_accuracy_change def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return: register_availability_change def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return: register_influence_change def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return: register_meaning_change def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return: SocialContext None execute def execute(self, data=None) register_accuracy_change def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return: register_availability_change def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return: register_influence_change def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return: register_meaning_change def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return: TaskContext None execute def execute(self, data=None) register_accuracy_change def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return: register_availability_change def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return: register_influence_change def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return: register_meaning_change def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return: Module lilacs.sentience.context.core ActionContext None EmotionContext None influence_handler def influence_handler(self, data) PastActionContext None PastEmotionContext None influence_handler def influence_handler(self, data) PastUserActionContext None PastUserEmotionContext None influence_handler def influence_handler(self, data) UserActionContext None UserEmotionContext None influence_handler def influence_handler(self, data)","title":"context"},{"location":"lilacs.sentience.context/#module-lilacssentiencecontext","text":"","title":"Module lilacs.sentience.context"},{"location":"lilacs.sentience.context/#basesituationalcontext","text":"None","title":"BaseSituationalContext"},{"location":"lilacs.sentience.context/#execute","text":"def execute(self, data=None)","title":"execute"},{"location":"lilacs.sentience.context/#register95accuracy95change","text":"def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return:","title":"register_accuracy_change"},{"location":"lilacs.sentience.context/#register95availability95change","text":"def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return:","title":"register_availability_change"},{"location":"lilacs.sentience.context/#register95influence95change","text":"def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return:","title":"register_influence_change"},{"location":"lilacs.sentience.context/#register95meaning95change","text":"def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return:","title":"register_meaning_change"},{"location":"lilacs.sentience.context/#computationalcontext","text":"None","title":"ComputationalContext"},{"location":"lilacs.sentience.context/#execute_1","text":"def execute(self, data=None)","title":"execute"},{"location":"lilacs.sentience.context/#register95accuracy95change_1","text":"def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return:","title":"register_accuracy_change"},{"location":"lilacs.sentience.context/#register95availability95change_1","text":"def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return:","title":"register_availability_change"},{"location":"lilacs.sentience.context/#register95influence95change_1","text":"def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return:","title":"register_influence_change"},{"location":"lilacs.sentience.context/#register95meaning95change_1","text":"def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return:","title":"register_meaning_change"},{"location":"lilacs.sentience.context/#datachange","text":"None","title":"DataChange"},{"location":"lilacs.sentience.context/#execute_2","text":"def execute(self, data=None)","title":"execute"},{"location":"lilacs.sentience.context/#initialize","text":"def initialize(self)","title":"initialize"},{"location":"lilacs.sentience.context/#register95handler","text":"def register_handler(self, handler)","title":"register_handler"},{"location":"lilacs.sentience.context/#environmentalcontext","text":"None","title":"EnvironmentalContext"},{"location":"lilacs.sentience.context/#execute_3","text":"def execute(self, data=None)","title":"execute"},{"location":"lilacs.sentience.context/#register95accuracy95change_2","text":"def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return:","title":"register_accuracy_change"},{"location":"lilacs.sentience.context/#register95availability95change_2","text":"def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return:","title":"register_availability_change"},{"location":"lilacs.sentience.context/#register95influence95change_2","text":"def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return:","title":"register_influence_change"},{"location":"lilacs.sentience.context/#register95meaning95change_2","text":"def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return:","title":"register_meaning_change"},{"location":"lilacs.sentience.context/#historicalcontext","text":"None","title":"HistoricalContext"},{"location":"lilacs.sentience.context/#execute_4","text":"def execute(self, data=None)","title":"execute"},{"location":"lilacs.sentience.context/#register95accuracy95change_3","text":"def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return:","title":"register_accuracy_change"},{"location":"lilacs.sentience.context/#register95availability95change_3","text":"def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return:","title":"register_availability_change"},{"location":"lilacs.sentience.context/#register95influence95change_3","text":"def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return:","title":"register_influence_change"},{"location":"lilacs.sentience.context/#register95meaning95change_3","text":"def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return:","title":"register_meaning_change"},{"location":"lilacs.sentience.context/#socialcontext","text":"None","title":"SocialContext"},{"location":"lilacs.sentience.context/#execute_5","text":"def execute(self, data=None)","title":"execute"},{"location":"lilacs.sentience.context/#register95accuracy95change_4","text":"def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return:","title":"register_accuracy_change"},{"location":"lilacs.sentience.context/#register95availability95change_4","text":"def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return:","title":"register_availability_change"},{"location":"lilacs.sentience.context/#register95influence95change_4","text":"def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return:","title":"register_influence_change"},{"location":"lilacs.sentience.context/#register95meaning95change_4","text":"def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return:","title":"register_meaning_change"},{"location":"lilacs.sentience.context/#taskcontext","text":"None","title":"TaskContext"},{"location":"lilacs.sentience.context/#execute_6","text":"def execute(self, data=None)","title":"execute"},{"location":"lilacs.sentience.context/#register95accuracy95change_5","text":"def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return:","title":"register_accuracy_change"},{"location":"lilacs.sentience.context/#register95availability95change_5","text":"def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return:","title":"register_availability_change"},{"location":"lilacs.sentience.context/#register95influence95change_5","text":"def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return:","title":"register_influence_change"},{"location":"lilacs.sentience.context/#register95meaning95change_5","text":"def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return:","title":"register_meaning_change"},{"location":"lilacs.sentience.context/#module-lilacssentiencecontextcore","text":"","title":"Module lilacs.sentience.context.core"},{"location":"lilacs.sentience.context/#actioncontext","text":"None","title":"ActionContext"},{"location":"lilacs.sentience.context/#emotioncontext","text":"None","title":"EmotionContext"},{"location":"lilacs.sentience.context/#influence95handler","text":"def influence_handler(self, data)","title":"influence_handler"},{"location":"lilacs.sentience.context/#pastactioncontext","text":"None","title":"PastActionContext"},{"location":"lilacs.sentience.context/#pastemotioncontext","text":"None","title":"PastEmotionContext"},{"location":"lilacs.sentience.context/#influence95handler_1","text":"def influence_handler(self, data)","title":"influence_handler"},{"location":"lilacs.sentience.context/#pastuseractioncontext","text":"None","title":"PastUserActionContext"},{"location":"lilacs.sentience.context/#pastuseremotioncontext","text":"None","title":"PastUserEmotionContext"},{"location":"lilacs.sentience.context/#influence95handler_2","text":"def influence_handler(self, data)","title":"influence_handler"},{"location":"lilacs.sentience.context/#useractioncontext","text":"None","title":"UserActionContext"},{"location":"lilacs.sentience.context/#useremotioncontext","text":"None","title":"UserEmotionContext"},{"location":"lilacs.sentience.context/#influence95handler_3","text":"def influence_handler(self, data)","title":"influence_handler"},{"location":"lilacs.sentience.emotions.behaviour/","text":"Module lilacs.sentience.emotions.behaviour BehavioralReaction None can_solve def can_solve(self, data) execute def execute(self, data) from_data def from_data(self, data=None) test def test(self, data) wants_to_execute def wants_to_execute(self) Behaviour None","title":"behaviour"},{"location":"lilacs.sentience.emotions.behaviour/#module-lilacssentienceemotionsbehaviour","text":"","title":"Module lilacs.sentience.emotions.behaviour"},{"location":"lilacs.sentience.emotions.behaviour/#behavioralreaction","text":"None","title":"BehavioralReaction"},{"location":"lilacs.sentience.emotions.behaviour/#can95solve","text":"def can_solve(self, data)","title":"can_solve"},{"location":"lilacs.sentience.emotions.behaviour/#execute","text":"def execute(self, data)","title":"execute"},{"location":"lilacs.sentience.emotions.behaviour/#from95data","text":"def from_data(self, data=None)","title":"from_data"},{"location":"lilacs.sentience.emotions.behaviour/#test","text":"def test(self, data)","title":"test"},{"location":"lilacs.sentience.emotions.behaviour/#wants95to95execute","text":"def wants_to_execute(self)","title":"wants_to_execute"},{"location":"lilacs.sentience.emotions.behaviour/#behaviour","text":"None","title":"Behaviour"},{"location":"lilacs.sentience.emotions.composite_emotions/","text":"Module lilacs.sentience.emotions.composite_emotions CompositeDimension None CompositeEmotion None array_to_emotion def array_to_emotion(arr) get_composite_from_emotions def get_composite_from_emotions(emotion1, emotion2) matrix_to_array def matrix_to_array(m)","title":"composite_emotions"},{"location":"lilacs.sentience.emotions.composite_emotions/#module-lilacssentienceemotionscomposite_emotions","text":"","title":"Module lilacs.sentience.emotions.composite_emotions"},{"location":"lilacs.sentience.emotions.composite_emotions/#compositedimension","text":"None","title":"CompositeDimension"},{"location":"lilacs.sentience.emotions.composite_emotions/#compositeemotion","text":"None","title":"CompositeEmotion"},{"location":"lilacs.sentience.emotions.composite_emotions/#array95to95emotion","text":"def array_to_emotion(arr)","title":"array_to_emotion"},{"location":"lilacs.sentience.emotions.composite_emotions/#get95composite95from95emotions","text":"def get_composite_from_emotions(emotion1, emotion2)","title":"get_composite_from_emotions"},{"location":"lilacs.sentience.emotions.composite_emotions/#matrix95to95array","text":"def matrix_to_array(m)","title":"matrix_to_array"},{"location":"lilacs.sentience.emotions.deepmoji/","text":"Module lilacs.sentience.emotions.deepmoji get_emoji_scores def get_emoji_scores(text) get_emojis def get_emojis(text) get_emotions def get_emotions(text) test def test()","title":"deepmoji"},{"location":"lilacs.sentience.emotions.deepmoji/#module-lilacssentienceemotionsdeepmoji","text":"","title":"Module lilacs.sentience.emotions.deepmoji"},{"location":"lilacs.sentience.emotions.deepmoji/#get95emoji95scores","text":"def get_emoji_scores(text)","title":"get_emoji_scores"},{"location":"lilacs.sentience.emotions.deepmoji/#get95emojis","text":"def get_emojis(text)","title":"get_emojis"},{"location":"lilacs.sentience.emotions.deepmoji/#get95emotions","text":"def get_emotions(text)","title":"get_emotions"},{"location":"lilacs.sentience.emotions.deepmoji/#test","text":"def test()","title":"test"},{"location":"lilacs.sentience.emotions.emotions/","text":"Module lilacs.sentience.emotions.emotions get_dimension def get_dimension(emotion_name) get_emotion def get_emotion(emotion_name) random_emotion def random_emotion()","title":"emotions"},{"location":"lilacs.sentience.emotions.emotions/#module-lilacssentienceemotionsemotions","text":"","title":"Module lilacs.sentience.emotions.emotions"},{"location":"lilacs.sentience.emotions.emotions/#get95dimension","text":"def get_dimension(emotion_name)","title":"get_dimension"},{"location":"lilacs.sentience.emotions.emotions/#get95emotion","text":"def get_emotion(emotion_name)","title":"get_emotion"},{"location":"lilacs.sentience.emotions.emotions/#random95emotion","text":"def random_emotion()","title":"random_emotion"},{"location":"lilacs.sentience.emotions.feelings/","text":"Module lilacs.sentience.emotions.feelings Feeling None string_to_emotion def string_to_emotion(string='') get_feeling def get_feeling(name) get_feeling_from_emotions def get_feeling_from_emotions(emotion1, emotion2) random_feeling def random_feeling()","title":"feelings"},{"location":"lilacs.sentience.emotions.feelings/#module-lilacssentienceemotionsfeelings","text":"","title":"Module lilacs.sentience.emotions.feelings"},{"location":"lilacs.sentience.emotions.feelings/#feeling","text":"None","title":"Feeling"},{"location":"lilacs.sentience.emotions.feelings/#string95to95emotion","text":"def string_to_emotion(string='')","title":"string_to_emotion"},{"location":"lilacs.sentience.emotions.feelings/#get95feeling","text":"def get_feeling(name)","title":"get_feeling"},{"location":"lilacs.sentience.emotions.feelings/#get95feeling95from95emotions","text":"def get_feeling_from_emotions(emotion1, emotion2)","title":"get_feeling_from_emotions"},{"location":"lilacs.sentience.emotions.feelings/#random95feeling","text":"def random_feeling()","title":"random_feeling"},{"location":"lilacs.sentience.emotions/","text":"Module lilacs.sentience.emotions LILACSEmotionalReactor None emoji_reaction def emoji_reaction(text) emotion_analysis def emotion_analysis(text) politeness_analysis def politeness_analysis(text) sentiment_analysis def sentiment_analysis(text) Module lilacs.sentience.emotions.behaviour BehavioralReaction None can_solve def can_solve(self, data) execute def execute(self, data) from_data def from_data(self, data=None) test def test(self, data) wants_to_execute def wants_to_execute(self) Behaviour None Module lilacs.sentience.emotions.composite_emotions CompositeDimension None CompositeEmotion None array_to_emotion def array_to_emotion(arr) get_composite_from_emotions def get_composite_from_emotions(emotion1, emotion2) matrix_to_array def matrix_to_array(m) Module lilacs.sentience.emotions.deepmoji get_emoji_scores def get_emoji_scores(text) get_emojis def get_emojis(text) get_emotions def get_emotions(text) test def test() Module lilacs.sentience.emotions.emotions get_dimension def get_dimension(emotion_name) get_emotion def get_emotion(emotion_name) random_emotion def random_emotion() Module lilacs.sentience.emotions.feelings Feeling None string_to_emotion def string_to_emotion(string='') get_feeling def get_feeling(name) get_feeling_from_emotions def get_feeling_from_emotions(emotion1, emotion2) random_feeling def random_feeling() Module lilacs.sentience.emotions.plutchik Emotion None emotion_from_flow def emotion_from_flow(self, flow) string_to_emotion def string_to_emotion(string='') EmotionalDimension None Neutrality None emotion_from_flow def emotion_from_flow(self, flow) string_to_emotion def string_to_emotion(string='') Module lilacs.sentience.emotions.reference_maps Module lilacs.sentience.emotions.tag best_emotion def best_emotion(text, lang='en-us') tag def tag(text, lang='en-us') test def test()","title":"emotions"},{"location":"lilacs.sentience.emotions/#module-lilacssentienceemotions","text":"","title":"Module lilacs.sentience.emotions"},{"location":"lilacs.sentience.emotions/#lilacsemotionalreactor","text":"None","title":"LILACSEmotionalReactor"},{"location":"lilacs.sentience.emotions/#emoji95reaction","text":"def emoji_reaction(text)","title":"emoji_reaction"},{"location":"lilacs.sentience.emotions/#emotion95analysis","text":"def emotion_analysis(text)","title":"emotion_analysis"},{"location":"lilacs.sentience.emotions/#politeness95analysis","text":"def politeness_analysis(text)","title":"politeness_analysis"},{"location":"lilacs.sentience.emotions/#sentiment95analysis","text":"def sentiment_analysis(text)","title":"sentiment_analysis"},{"location":"lilacs.sentience.emotions/#module-lilacssentienceemotionsbehaviour","text":"","title":"Module lilacs.sentience.emotions.behaviour"},{"location":"lilacs.sentience.emotions/#behavioralreaction","text":"None","title":"BehavioralReaction"},{"location":"lilacs.sentience.emotions/#can95solve","text":"def can_solve(self, data)","title":"can_solve"},{"location":"lilacs.sentience.emotions/#execute","text":"def execute(self, data)","title":"execute"},{"location":"lilacs.sentience.emotions/#from95data","text":"def from_data(self, data=None)","title":"from_data"},{"location":"lilacs.sentience.emotions/#test","text":"def test(self, data)","title":"test"},{"location":"lilacs.sentience.emotions/#wants95to95execute","text":"def wants_to_execute(self)","title":"wants_to_execute"},{"location":"lilacs.sentience.emotions/#behaviour","text":"None","title":"Behaviour"},{"location":"lilacs.sentience.emotions/#module-lilacssentienceemotionscomposite_emotions","text":"","title":"Module lilacs.sentience.emotions.composite_emotions"},{"location":"lilacs.sentience.emotions/#compositedimension","text":"None","title":"CompositeDimension"},{"location":"lilacs.sentience.emotions/#compositeemotion","text":"None","title":"CompositeEmotion"},{"location":"lilacs.sentience.emotions/#array95to95emotion","text":"def array_to_emotion(arr)","title":"array_to_emotion"},{"location":"lilacs.sentience.emotions/#get95composite95from95emotions","text":"def get_composite_from_emotions(emotion1, emotion2)","title":"get_composite_from_emotions"},{"location":"lilacs.sentience.emotions/#matrix95to95array","text":"def matrix_to_array(m)","title":"matrix_to_array"},{"location":"lilacs.sentience.emotions/#module-lilacssentienceemotionsdeepmoji","text":"","title":"Module lilacs.sentience.emotions.deepmoji"},{"location":"lilacs.sentience.emotions/#get95emoji95scores","text":"def get_emoji_scores(text)","title":"get_emoji_scores"},{"location":"lilacs.sentience.emotions/#get95emojis","text":"def get_emojis(text)","title":"get_emojis"},{"location":"lilacs.sentience.emotions/#get95emotions","text":"def get_emotions(text)","title":"get_emotions"},{"location":"lilacs.sentience.emotions/#test_1","text":"def test()","title":"test"},{"location":"lilacs.sentience.emotions/#module-lilacssentienceemotionsemotions","text":"","title":"Module lilacs.sentience.emotions.emotions"},{"location":"lilacs.sentience.emotions/#get95dimension","text":"def get_dimension(emotion_name)","title":"get_dimension"},{"location":"lilacs.sentience.emotions/#get95emotion","text":"def get_emotion(emotion_name)","title":"get_emotion"},{"location":"lilacs.sentience.emotions/#random95emotion","text":"def random_emotion()","title":"random_emotion"},{"location":"lilacs.sentience.emotions/#module-lilacssentienceemotionsfeelings","text":"","title":"Module lilacs.sentience.emotions.feelings"},{"location":"lilacs.sentience.emotions/#feeling","text":"None","title":"Feeling"},{"location":"lilacs.sentience.emotions/#string95to95emotion","text":"def string_to_emotion(string='')","title":"string_to_emotion"},{"location":"lilacs.sentience.emotions/#get95feeling","text":"def get_feeling(name)","title":"get_feeling"},{"location":"lilacs.sentience.emotions/#get95feeling95from95emotions","text":"def get_feeling_from_emotions(emotion1, emotion2)","title":"get_feeling_from_emotions"},{"location":"lilacs.sentience.emotions/#random95feeling","text":"def random_feeling()","title":"random_feeling"},{"location":"lilacs.sentience.emotions/#module-lilacssentienceemotionsplutchik","text":"","title":"Module lilacs.sentience.emotions.plutchik"},{"location":"lilacs.sentience.emotions/#emotion","text":"None","title":"Emotion"},{"location":"lilacs.sentience.emotions/#emotion95from95flow","text":"def emotion_from_flow(self, flow)","title":"emotion_from_flow"},{"location":"lilacs.sentience.emotions/#string95to95emotion_1","text":"def string_to_emotion(string='')","title":"string_to_emotion"},{"location":"lilacs.sentience.emotions/#emotionaldimension","text":"None","title":"EmotionalDimension"},{"location":"lilacs.sentience.emotions/#neutrality","text":"None","title":"Neutrality"},{"location":"lilacs.sentience.emotions/#emotion95from95flow_1","text":"def emotion_from_flow(self, flow)","title":"emotion_from_flow"},{"location":"lilacs.sentience.emotions/#string95to95emotion_2","text":"def string_to_emotion(string='')","title":"string_to_emotion"},{"location":"lilacs.sentience.emotions/#module-lilacssentienceemotionsreference_maps","text":"","title":"Module lilacs.sentience.emotions.reference_maps"},{"location":"lilacs.sentience.emotions/#module-lilacssentienceemotionstag","text":"","title":"Module lilacs.sentience.emotions.tag"},{"location":"lilacs.sentience.emotions/#best95emotion","text":"def best_emotion(text, lang='en-us')","title":"best_emotion"},{"location":"lilacs.sentience.emotions/#tag","text":"def tag(text, lang='en-us')","title":"tag"},{"location":"lilacs.sentience.emotions/#test_2","text":"def test()","title":"test"},{"location":"lilacs.sentience.emotions.plutchik/","text":"Module lilacs.sentience.emotions.plutchik Emotion None emotion_from_flow def emotion_from_flow(self, flow) string_to_emotion def string_to_emotion(string='') EmotionalDimension None Neutrality None emotion_from_flow def emotion_from_flow(self, flow) string_to_emotion def string_to_emotion(string='')","title":"plutchik"},{"location":"lilacs.sentience.emotions.plutchik/#module-lilacssentienceemotionsplutchik","text":"","title":"Module lilacs.sentience.emotions.plutchik"},{"location":"lilacs.sentience.emotions.plutchik/#emotion","text":"None","title":"Emotion"},{"location":"lilacs.sentience.emotions.plutchik/#emotion95from95flow","text":"def emotion_from_flow(self, flow)","title":"emotion_from_flow"},{"location":"lilacs.sentience.emotions.plutchik/#string95to95emotion","text":"def string_to_emotion(string='')","title":"string_to_emotion"},{"location":"lilacs.sentience.emotions.plutchik/#emotionaldimension","text":"None","title":"EmotionalDimension"},{"location":"lilacs.sentience.emotions.plutchik/#neutrality","text":"None","title":"Neutrality"},{"location":"lilacs.sentience.emotions.plutchik/#emotion95from95flow_1","text":"def emotion_from_flow(self, flow)","title":"emotion_from_flow"},{"location":"lilacs.sentience.emotions.plutchik/#string95to95emotion_1","text":"def string_to_emotion(string='')","title":"string_to_emotion"},{"location":"lilacs.sentience.emotions.reference_maps/","text":"Module lilacs.sentience.emotions.reference_maps","title":"reference_maps"},{"location":"lilacs.sentience.emotions.reference_maps/#module-lilacssentienceemotionsreference_maps","text":"","title":"Module lilacs.sentience.emotions.reference_maps"},{"location":"lilacs.sentience.emotions.tag/","text":"Module lilacs.sentience.emotions.tag best_emotion def best_emotion(text, lang='en-us') tag def tag(text, lang='en-us') test def test()","title":"tag"},{"location":"lilacs.sentience.emotions.tag/#module-lilacssentienceemotionstag","text":"","title":"Module lilacs.sentience.emotions.tag"},{"location":"lilacs.sentience.emotions.tag/#best95emotion","text":"def best_emotion(text, lang='en-us')","title":"best_emotion"},{"location":"lilacs.sentience.emotions.tag/#tag","text":"def tag(text, lang='en-us')","title":"tag"},{"location":"lilacs.sentience.emotions.tag/#test","text":"def test()","title":"test"},{"location":"lilacs.sentience/","text":"Module lilacs.sentience Module lilacs.sentience.context BaseSituationalContext None execute def execute(self, data=None) register_accuracy_change def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return: register_availability_change def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return: register_influence_change def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return: register_meaning_change def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return: ComputationalContext None execute def execute(self, data=None) register_accuracy_change def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return: register_availability_change def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return: register_influence_change def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return: register_meaning_change def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return: DataChange None execute def execute(self, data=None) initialize def initialize(self) register_handler def register_handler(self, handler) EnvironmentalContext None execute def execute(self, data=None) register_accuracy_change def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return: register_availability_change def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return: register_influence_change def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return: register_meaning_change def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return: HistoricalContext None execute def execute(self, data=None) register_accuracy_change def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return: register_availability_change def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return: register_influence_change def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return: register_meaning_change def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return: SocialContext None execute def execute(self, data=None) register_accuracy_change def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return: register_availability_change def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return: register_influence_change def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return: register_meaning_change def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return: TaskContext None execute def execute(self, data=None) register_accuracy_change def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return: register_availability_change def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return: register_influence_change def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return: register_meaning_change def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return: Module lilacs.sentience.context.core ActionContext None EmotionContext None influence_handler def influence_handler(self, data) PastActionContext None PastEmotionContext None influence_handler def influence_handler(self, data) PastUserActionContext None PastUserEmotionContext None influence_handler def influence_handler(self, data) UserActionContext None UserEmotionContext None influence_handler def influence_handler(self, data) Module lilacs.sentience.emotions LILACSEmotionalReactor None emoji_reaction def emoji_reaction(text) emotion_analysis def emotion_analysis(text) politeness_analysis def politeness_analysis(text) sentiment_analysis def sentiment_analysis(text) Module lilacs.sentience.emotions.behaviour BehavioralReaction None can_solve def can_solve(self, data) execute def execute(self, data) from_data def from_data(self, data=None) test def test(self, data) wants_to_execute def wants_to_execute(self) Behaviour None Module lilacs.sentience.emotions.composite_emotions CompositeDimension None CompositeEmotion None array_to_emotion def array_to_emotion(arr) get_composite_from_emotions def get_composite_from_emotions(emotion1, emotion2) matrix_to_array def matrix_to_array(m) Module lilacs.sentience.emotions.deepmoji get_emoji_scores def get_emoji_scores(text) get_emojis def get_emojis(text) get_emotions def get_emotions(text) test def test() Module lilacs.sentience.emotions.emotions get_dimension def get_dimension(emotion_name) get_emotion def get_emotion(emotion_name) random_emotion def random_emotion() Module lilacs.sentience.emotions.feelings Feeling None string_to_emotion def string_to_emotion(string='') get_feeling def get_feeling(name) get_feeling_from_emotions def get_feeling_from_emotions(emotion1, emotion2) random_feeling def random_feeling() Module lilacs.sentience.emotions.plutchik Emotion None emotion_from_flow def emotion_from_flow(self, flow) string_to_emotion def string_to_emotion(string='') EmotionalDimension None Neutrality None emotion_from_flow def emotion_from_flow(self, flow) string_to_emotion def string_to_emotion(string='') Module lilacs.sentience.emotions.reference_maps Module lilacs.sentience.emotions.tag best_emotion def best_emotion(text, lang='en-us') tag def tag(text, lang='en-us') test def test() Module lilacs.sentience.neutransmitters Adrenaline None consume def consume(self, n=1) create def create(self, n=1) handle_total def handle_total(self, message) Dopamine None consume def consume(self, n=1) create def create(self, n=1) handle_total def handle_total(self, message) NeuroRepository None dimension_to_emotion_flow def dimension_to_emotion_flow(self, dimension_vector, octant) handle_decrease_adrenaline def handle_decrease_adrenaline(self, message) handle_decrease_dopamine def handle_decrease_dopamine(self, message) handle_decrease_serotonine def handle_decrease_serotonine(self, message) handle_increase_adrenaline def handle_increase_adrenaline(self, message) handle_increase_dopamine def handle_increase_dopamine(self, message) handle_increase_serotonine def handle_increase_serotonine(self, message) handle_total_adrenaline def handle_total_adrenaline(self, message) handle_total_dopamine def handle_total_dopamine(self, message) handle_total_serotonine def handle_total_serotonine(self, message) octant_to_dimension_vector def octant_to_dimension_vector(octant) octant_to_emotion def octant_to_emotion(octant) shutdown def shutdown(self) NOTES: cleanup and shutdown vec_to_octant def vec_to_octant(vec) NOTES: octant mappings Neurotransmitter None consume def consume(self, n=1) create def create(self, n=1) handle_total def handle_total(self, message) Serotonin None consume def consume(self, n=1) create def create(self, n=1) handle_total def handle_total(self, message) Module lilacs.sentience.personality Dirty12 None score def score(answers) test def test() test_random def test_random() Hexaco None score def score(answers) test def test() test_random def test_random()","title":"sentience"},{"location":"lilacs.sentience/#module-lilacssentience","text":"","title":"Module lilacs.sentience"},{"location":"lilacs.sentience/#module-lilacssentiencecontext","text":"","title":"Module lilacs.sentience.context"},{"location":"lilacs.sentience/#basesituationalcontext","text":"None","title":"BaseSituationalContext"},{"location":"lilacs.sentience/#execute","text":"def execute(self, data=None)","title":"execute"},{"location":"lilacs.sentience/#register95accuracy95change","text":"def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return:","title":"register_accuracy_change"},{"location":"lilacs.sentience/#register95availability95change","text":"def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return:","title":"register_availability_change"},{"location":"lilacs.sentience/#register95influence95change","text":"def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return:","title":"register_influence_change"},{"location":"lilacs.sentience/#register95meaning95change","text":"def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return:","title":"register_meaning_change"},{"location":"lilacs.sentience/#computationalcontext","text":"None","title":"ComputationalContext"},{"location":"lilacs.sentience/#execute_1","text":"def execute(self, data=None)","title":"execute"},{"location":"lilacs.sentience/#register95accuracy95change_1","text":"def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return:","title":"register_accuracy_change"},{"location":"lilacs.sentience/#register95availability95change_1","text":"def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return:","title":"register_availability_change"},{"location":"lilacs.sentience/#register95influence95change_1","text":"def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return:","title":"register_influence_change"},{"location":"lilacs.sentience/#register95meaning95change_1","text":"def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return:","title":"register_meaning_change"},{"location":"lilacs.sentience/#datachange","text":"None","title":"DataChange"},{"location":"lilacs.sentience/#execute_2","text":"def execute(self, data=None)","title":"execute"},{"location":"lilacs.sentience/#initialize","text":"def initialize(self)","title":"initialize"},{"location":"lilacs.sentience/#register95handler","text":"def register_handler(self, handler)","title":"register_handler"},{"location":"lilacs.sentience/#environmentalcontext","text":"None","title":"EnvironmentalContext"},{"location":"lilacs.sentience/#execute_3","text":"def execute(self, data=None)","title":"execute"},{"location":"lilacs.sentience/#register95accuracy95change_2","text":"def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return:","title":"register_accuracy_change"},{"location":"lilacs.sentience/#register95availability95change_2","text":"def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return:","title":"register_availability_change"},{"location":"lilacs.sentience/#register95influence95change_2","text":"def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return:","title":"register_influence_change"},{"location":"lilacs.sentience/#register95meaning95change_2","text":"def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return:","title":"register_meaning_change"},{"location":"lilacs.sentience/#historicalcontext","text":"None","title":"HistoricalContext"},{"location":"lilacs.sentience/#execute_4","text":"def execute(self, data=None)","title":"execute"},{"location":"lilacs.sentience/#register95accuracy95change_3","text":"def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return:","title":"register_accuracy_change"},{"location":"lilacs.sentience/#register95availability95change_3","text":"def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return:","title":"register_availability_change"},{"location":"lilacs.sentience/#register95influence95change_3","text":"def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return:","title":"register_influence_change"},{"location":"lilacs.sentience/#register95meaning95change_3","text":"def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return:","title":"register_meaning_change"},{"location":"lilacs.sentience/#socialcontext","text":"None","title":"SocialContext"},{"location":"lilacs.sentience/#execute_5","text":"def execute(self, data=None)","title":"execute"},{"location":"lilacs.sentience/#register95accuracy95change_4","text":"def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return:","title":"register_accuracy_change"},{"location":"lilacs.sentience/#register95availability95change_4","text":"def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return:","title":"register_availability_change"},{"location":"lilacs.sentience/#register95influence95change_4","text":"def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return:","title":"register_influence_change"},{"location":"lilacs.sentience/#register95meaning95change_4","text":"def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return:","title":"register_meaning_change"},{"location":"lilacs.sentience/#taskcontext","text":"None","title":"TaskContext"},{"location":"lilacs.sentience/#execute_6","text":"def execute(self, data=None)","title":"execute"},{"location":"lilacs.sentience/#register95accuracy95change_5","text":"def register_accuracy_change(self, change_name, handler, data=None) cues may be recognised more or less reliably in different contexts, often due to computational factors; for example, the accuracy of image analysis depends on image resolution. When sensor data are collected in uncontrolled conditions, the environmental factors significantly influence the accuracy of input cues: for example, image background affects the accuracy of object detection. Historical factors may degrade the accuracies, too, when the models become outdated; for example, growing hair may decrease the face recognition accuracy. :param change_name: :param handler: :param data: :return:","title":"register_accuracy_change"},{"location":"lilacs.sentience/#register95availability95change_5","text":"def register_availability_change(self, change_name, handler, data=None) The same input cues may be abundant in some situations and missing in others. Most often this happens in uncontrolled conditions: for example, results of video analysis may be unavailable if users bypass a camera. Social factors may cause incomplete data, too: if it is polite to stay silent, audio cues will be unavailable. :param change_name: :param handler: :param data: :return:","title":"register_availability_change"},{"location":"lilacs.sentience/#register95influence95change_5","text":"def register_influence_change(self, change_name, handler, data=None) Importance of the same input cues may vary in different contexts (often, also due to social factors): for example, presence of young children may strongly affect the choice of TV programmes to watch in one family, whereas adults may dominate in another family. Task factors play this role, too: for example, noise or illumination cues may be more or less important, depending on a search goal. :param change_name: :param handler: :param data: :return:","title":"register_influence_change"},{"location":"lilacs.sentience/#register95meaning95change_5","text":"def register_meaning_change(self, change_name, handler, data=None) meaning of cues depends on social factors: for example, whistling that indicates game highlight in basketball matches is a meaningless sound in tennis. Meaning of the cues may depend on historical factors, too (e.g., the users\u2019 laughter during a dialog may be interpreted as either happy or sarcastic, depending on the previous statements). :param change_name: :param handler: :param data: :return:","title":"register_meaning_change"},{"location":"lilacs.sentience/#module-lilacssentiencecontextcore","text":"","title":"Module lilacs.sentience.context.core"},{"location":"lilacs.sentience/#actioncontext","text":"None","title":"ActionContext"},{"location":"lilacs.sentience/#emotioncontext","text":"None","title":"EmotionContext"},{"location":"lilacs.sentience/#influence95handler","text":"def influence_handler(self, data)","title":"influence_handler"},{"location":"lilacs.sentience/#pastactioncontext","text":"None","title":"PastActionContext"},{"location":"lilacs.sentience/#pastemotioncontext","text":"None","title":"PastEmotionContext"},{"location":"lilacs.sentience/#influence95handler_1","text":"def influence_handler(self, data)","title":"influence_handler"},{"location":"lilacs.sentience/#pastuseractioncontext","text":"None","title":"PastUserActionContext"},{"location":"lilacs.sentience/#pastuseremotioncontext","text":"None","title":"PastUserEmotionContext"},{"location":"lilacs.sentience/#influence95handler_2","text":"def influence_handler(self, data)","title":"influence_handler"},{"location":"lilacs.sentience/#useractioncontext","text":"None","title":"UserActionContext"},{"location":"lilacs.sentience/#useremotioncontext","text":"None","title":"UserEmotionContext"},{"location":"lilacs.sentience/#influence95handler_3","text":"def influence_handler(self, data)","title":"influence_handler"},{"location":"lilacs.sentience/#module-lilacssentienceemotions","text":"","title":"Module lilacs.sentience.emotions"},{"location":"lilacs.sentience/#lilacsemotionalreactor","text":"None","title":"LILACSEmotionalReactor"},{"location":"lilacs.sentience/#emoji95reaction","text":"def emoji_reaction(text)","title":"emoji_reaction"},{"location":"lilacs.sentience/#emotion95analysis","text":"def emotion_analysis(text)","title":"emotion_analysis"},{"location":"lilacs.sentience/#politeness95analysis","text":"def politeness_analysis(text)","title":"politeness_analysis"},{"location":"lilacs.sentience/#sentiment95analysis","text":"def sentiment_analysis(text)","title":"sentiment_analysis"},{"location":"lilacs.sentience/#module-lilacssentienceemotionsbehaviour","text":"","title":"Module lilacs.sentience.emotions.behaviour"},{"location":"lilacs.sentience/#behavioralreaction","text":"None","title":"BehavioralReaction"},{"location":"lilacs.sentience/#can95solve","text":"def can_solve(self, data)","title":"can_solve"},{"location":"lilacs.sentience/#execute_7","text":"def execute(self, data)","title":"execute"},{"location":"lilacs.sentience/#from95data","text":"def from_data(self, data=None)","title":"from_data"},{"location":"lilacs.sentience/#test","text":"def test(self, data)","title":"test"},{"location":"lilacs.sentience/#wants95to95execute","text":"def wants_to_execute(self)","title":"wants_to_execute"},{"location":"lilacs.sentience/#behaviour","text":"None","title":"Behaviour"},{"location":"lilacs.sentience/#module-lilacssentienceemotionscomposite_emotions","text":"","title":"Module lilacs.sentience.emotions.composite_emotions"},{"location":"lilacs.sentience/#compositedimension","text":"None","title":"CompositeDimension"},{"location":"lilacs.sentience/#compositeemotion","text":"None","title":"CompositeEmotion"},{"location":"lilacs.sentience/#array95to95emotion","text":"def array_to_emotion(arr)","title":"array_to_emotion"},{"location":"lilacs.sentience/#get95composite95from95emotions","text":"def get_composite_from_emotions(emotion1, emotion2)","title":"get_composite_from_emotions"},{"location":"lilacs.sentience/#matrix95to95array","text":"def matrix_to_array(m)","title":"matrix_to_array"},{"location":"lilacs.sentience/#module-lilacssentienceemotionsdeepmoji","text":"","title":"Module lilacs.sentience.emotions.deepmoji"},{"location":"lilacs.sentience/#get95emoji95scores","text":"def get_emoji_scores(text)","title":"get_emoji_scores"},{"location":"lilacs.sentience/#get95emojis","text":"def get_emojis(text)","title":"get_emojis"},{"location":"lilacs.sentience/#get95emotions","text":"def get_emotions(text)","title":"get_emotions"},{"location":"lilacs.sentience/#test_1","text":"def test()","title":"test"},{"location":"lilacs.sentience/#module-lilacssentienceemotionsemotions","text":"","title":"Module lilacs.sentience.emotions.emotions"},{"location":"lilacs.sentience/#get95dimension","text":"def get_dimension(emotion_name)","title":"get_dimension"},{"location":"lilacs.sentience/#get95emotion","text":"def get_emotion(emotion_name)","title":"get_emotion"},{"location":"lilacs.sentience/#random95emotion","text":"def random_emotion()","title":"random_emotion"},{"location":"lilacs.sentience/#module-lilacssentienceemotionsfeelings","text":"","title":"Module lilacs.sentience.emotions.feelings"},{"location":"lilacs.sentience/#feeling","text":"None","title":"Feeling"},{"location":"lilacs.sentience/#string95to95emotion","text":"def string_to_emotion(string='')","title":"string_to_emotion"},{"location":"lilacs.sentience/#get95feeling","text":"def get_feeling(name)","title":"get_feeling"},{"location":"lilacs.sentience/#get95feeling95from95emotions","text":"def get_feeling_from_emotions(emotion1, emotion2)","title":"get_feeling_from_emotions"},{"location":"lilacs.sentience/#random95feeling","text":"def random_feeling()","title":"random_feeling"},{"location":"lilacs.sentience/#module-lilacssentienceemotionsplutchik","text":"","title":"Module lilacs.sentience.emotions.plutchik"},{"location":"lilacs.sentience/#emotion","text":"None","title":"Emotion"},{"location":"lilacs.sentience/#emotion95from95flow","text":"def emotion_from_flow(self, flow)","title":"emotion_from_flow"},{"location":"lilacs.sentience/#string95to95emotion_1","text":"def string_to_emotion(string='')","title":"string_to_emotion"},{"location":"lilacs.sentience/#emotionaldimension","text":"None","title":"EmotionalDimension"},{"location":"lilacs.sentience/#neutrality","text":"None","title":"Neutrality"},{"location":"lilacs.sentience/#emotion95from95flow_1","text":"def emotion_from_flow(self, flow)","title":"emotion_from_flow"},{"location":"lilacs.sentience/#string95to95emotion_2","text":"def string_to_emotion(string='')","title":"string_to_emotion"},{"location":"lilacs.sentience/#module-lilacssentienceemotionsreference_maps","text":"","title":"Module lilacs.sentience.emotions.reference_maps"},{"location":"lilacs.sentience/#module-lilacssentienceemotionstag","text":"","title":"Module lilacs.sentience.emotions.tag"},{"location":"lilacs.sentience/#best95emotion","text":"def best_emotion(text, lang='en-us')","title":"best_emotion"},{"location":"lilacs.sentience/#tag","text":"def tag(text, lang='en-us')","title":"tag"},{"location":"lilacs.sentience/#test_2","text":"def test()","title":"test"},{"location":"lilacs.sentience/#module-lilacssentienceneutransmitters","text":"","title":"Module lilacs.sentience.neutransmitters"},{"location":"lilacs.sentience/#adrenaline","text":"None","title":"Adrenaline"},{"location":"lilacs.sentience/#consume","text":"def consume(self, n=1)","title":"consume"},{"location":"lilacs.sentience/#create","text":"def create(self, n=1)","title":"create"},{"location":"lilacs.sentience/#handle95total","text":"def handle_total(self, message)","title":"handle_total"},{"location":"lilacs.sentience/#dopamine","text":"None","title":"Dopamine"},{"location":"lilacs.sentience/#consume_1","text":"def consume(self, n=1)","title":"consume"},{"location":"lilacs.sentience/#create_1","text":"def create(self, n=1)","title":"create"},{"location":"lilacs.sentience/#handle95total_1","text":"def handle_total(self, message)","title":"handle_total"},{"location":"lilacs.sentience/#neurorepository","text":"None","title":"NeuroRepository"},{"location":"lilacs.sentience/#dimension95to95emotion95flow","text":"def dimension_to_emotion_flow(self, dimension_vector, octant)","title":"dimension_to_emotion_flow"},{"location":"lilacs.sentience/#handle95decrease95adrenaline","text":"def handle_decrease_adrenaline(self, message)","title":"handle_decrease_adrenaline"},{"location":"lilacs.sentience/#handle95decrease95dopamine","text":"def handle_decrease_dopamine(self, message)","title":"handle_decrease_dopamine"},{"location":"lilacs.sentience/#handle95decrease95serotonine","text":"def handle_decrease_serotonine(self, message)","title":"handle_decrease_serotonine"},{"location":"lilacs.sentience/#handle95increase95adrenaline","text":"def handle_increase_adrenaline(self, message)","title":"handle_increase_adrenaline"},{"location":"lilacs.sentience/#handle95increase95dopamine","text":"def handle_increase_dopamine(self, message)","title":"handle_increase_dopamine"},{"location":"lilacs.sentience/#handle95increase95serotonine","text":"def handle_increase_serotonine(self, message)","title":"handle_increase_serotonine"},{"location":"lilacs.sentience/#handle95total95adrenaline","text":"def handle_total_adrenaline(self, message)","title":"handle_total_adrenaline"},{"location":"lilacs.sentience/#handle95total95dopamine","text":"def handle_total_dopamine(self, message)","title":"handle_total_dopamine"},{"location":"lilacs.sentience/#handle95total95serotonine","text":"def handle_total_serotonine(self, message)","title":"handle_total_serotonine"},{"location":"lilacs.sentience/#octant95to95dimension95vector","text":"def octant_to_dimension_vector(octant)","title":"octant_to_dimension_vector"},{"location":"lilacs.sentience/#octant95to95emotion","text":"def octant_to_emotion(octant)","title":"octant_to_emotion"},{"location":"lilacs.sentience/#shutdown","text":"def shutdown(self) NOTES: cleanup and shutdown","title":"shutdown"},{"location":"lilacs.sentience/#vec95to95octant","text":"def vec_to_octant(vec) NOTES: octant mappings","title":"vec_to_octant"},{"location":"lilacs.sentience/#neurotransmitter","text":"None","title":"Neurotransmitter"},{"location":"lilacs.sentience/#consume_2","text":"def consume(self, n=1)","title":"consume"},{"location":"lilacs.sentience/#create_2","text":"def create(self, n=1)","title":"create"},{"location":"lilacs.sentience/#handle95total_2","text":"def handle_total(self, message)","title":"handle_total"},{"location":"lilacs.sentience/#serotonin","text":"None","title":"Serotonin"},{"location":"lilacs.sentience/#consume_3","text":"def consume(self, n=1)","title":"consume"},{"location":"lilacs.sentience/#create_3","text":"def create(self, n=1)","title":"create"},{"location":"lilacs.sentience/#handle95total_3","text":"def handle_total(self, message)","title":"handle_total"},{"location":"lilacs.sentience/#module-lilacssentiencepersonality","text":"","title":"Module lilacs.sentience.personality"},{"location":"lilacs.sentience/#dirty12","text":"None","title":"Dirty12"},{"location":"lilacs.sentience/#score","text":"def score(answers)","title":"score"},{"location":"lilacs.sentience/#test_3","text":"def test()","title":"test"},{"location":"lilacs.sentience/#test95random","text":"def test_random()","title":"test_random"},{"location":"lilacs.sentience/#hexaco","text":"None","title":"Hexaco"},{"location":"lilacs.sentience/#score_1","text":"def score(answers)","title":"score"},{"location":"lilacs.sentience/#test_4","text":"def test()","title":"test"},{"location":"lilacs.sentience/#test95random_1","text":"def test_random()","title":"test_random"},{"location":"lilacs.sentience.neutransmitters/","text":"Module lilacs.sentience.neutransmitters Adrenaline None consume def consume(self, n=1) create def create(self, n=1) handle_total def handle_total(self, message) Dopamine None consume def consume(self, n=1) create def create(self, n=1) handle_total def handle_total(self, message) NeuroRepository None dimension_to_emotion_flow def dimension_to_emotion_flow(self, dimension_vector, octant) handle_decrease_adrenaline def handle_decrease_adrenaline(self, message) handle_decrease_dopamine def handle_decrease_dopamine(self, message) handle_decrease_serotonine def handle_decrease_serotonine(self, message) handle_increase_adrenaline def handle_increase_adrenaline(self, message) handle_increase_dopamine def handle_increase_dopamine(self, message) handle_increase_serotonine def handle_increase_serotonine(self, message) handle_total_adrenaline def handle_total_adrenaline(self, message) handle_total_dopamine def handle_total_dopamine(self, message) handle_total_serotonine def handle_total_serotonine(self, message) octant_to_dimension_vector def octant_to_dimension_vector(octant) octant_to_emotion def octant_to_emotion(octant) shutdown def shutdown(self) NOTES: cleanup and shutdown vec_to_octant def vec_to_octant(vec) NOTES: octant mappings Neurotransmitter None consume def consume(self, n=1) create def create(self, n=1) handle_total def handle_total(self, message) Serotonin None consume def consume(self, n=1) create def create(self, n=1) handle_total def handle_total(self, message)","title":"neutransmitters"},{"location":"lilacs.sentience.neutransmitters/#module-lilacssentienceneutransmitters","text":"","title":"Module lilacs.sentience.neutransmitters"},{"location":"lilacs.sentience.neutransmitters/#adrenaline","text":"None","title":"Adrenaline"},{"location":"lilacs.sentience.neutransmitters/#consume","text":"def consume(self, n=1)","title":"consume"},{"location":"lilacs.sentience.neutransmitters/#create","text":"def create(self, n=1)","title":"create"},{"location":"lilacs.sentience.neutransmitters/#handle95total","text":"def handle_total(self, message)","title":"handle_total"},{"location":"lilacs.sentience.neutransmitters/#dopamine","text":"None","title":"Dopamine"},{"location":"lilacs.sentience.neutransmitters/#consume_1","text":"def consume(self, n=1)","title":"consume"},{"location":"lilacs.sentience.neutransmitters/#create_1","text":"def create(self, n=1)","title":"create"},{"location":"lilacs.sentience.neutransmitters/#handle95total_1","text":"def handle_total(self, message)","title":"handle_total"},{"location":"lilacs.sentience.neutransmitters/#neurorepository","text":"None","title":"NeuroRepository"},{"location":"lilacs.sentience.neutransmitters/#dimension95to95emotion95flow","text":"def dimension_to_emotion_flow(self, dimension_vector, octant)","title":"dimension_to_emotion_flow"},{"location":"lilacs.sentience.neutransmitters/#handle95decrease95adrenaline","text":"def handle_decrease_adrenaline(self, message)","title":"handle_decrease_adrenaline"},{"location":"lilacs.sentience.neutransmitters/#handle95decrease95dopamine","text":"def handle_decrease_dopamine(self, message)","title":"handle_decrease_dopamine"},{"location":"lilacs.sentience.neutransmitters/#handle95decrease95serotonine","text":"def handle_decrease_serotonine(self, message)","title":"handle_decrease_serotonine"},{"location":"lilacs.sentience.neutransmitters/#handle95increase95adrenaline","text":"def handle_increase_adrenaline(self, message)","title":"handle_increase_adrenaline"},{"location":"lilacs.sentience.neutransmitters/#handle95increase95dopamine","text":"def handle_increase_dopamine(self, message)","title":"handle_increase_dopamine"},{"location":"lilacs.sentience.neutransmitters/#handle95increase95serotonine","text":"def handle_increase_serotonine(self, message)","title":"handle_increase_serotonine"},{"location":"lilacs.sentience.neutransmitters/#handle95total95adrenaline","text":"def handle_total_adrenaline(self, message)","title":"handle_total_adrenaline"},{"location":"lilacs.sentience.neutransmitters/#handle95total95dopamine","text":"def handle_total_dopamine(self, message)","title":"handle_total_dopamine"},{"location":"lilacs.sentience.neutransmitters/#handle95total95serotonine","text":"def handle_total_serotonine(self, message)","title":"handle_total_serotonine"},{"location":"lilacs.sentience.neutransmitters/#octant95to95dimension95vector","text":"def octant_to_dimension_vector(octant)","title":"octant_to_dimension_vector"},{"location":"lilacs.sentience.neutransmitters/#octant95to95emotion","text":"def octant_to_emotion(octant)","title":"octant_to_emotion"},{"location":"lilacs.sentience.neutransmitters/#shutdown","text":"def shutdown(self) NOTES: cleanup and shutdown","title":"shutdown"},{"location":"lilacs.sentience.neutransmitters/#vec95to95octant","text":"def vec_to_octant(vec) NOTES: octant mappings","title":"vec_to_octant"},{"location":"lilacs.sentience.neutransmitters/#neurotransmitter","text":"None","title":"Neurotransmitter"},{"location":"lilacs.sentience.neutransmitters/#consume_2","text":"def consume(self, n=1)","title":"consume"},{"location":"lilacs.sentience.neutransmitters/#create_2","text":"def create(self, n=1)","title":"create"},{"location":"lilacs.sentience.neutransmitters/#handle95total_2","text":"def handle_total(self, message)","title":"handle_total"},{"location":"lilacs.sentience.neutransmitters/#serotonin","text":"None","title":"Serotonin"},{"location":"lilacs.sentience.neutransmitters/#consume_3","text":"def consume(self, n=1)","title":"consume"},{"location":"lilacs.sentience.neutransmitters/#create_3","text":"def create(self, n=1)","title":"create"},{"location":"lilacs.sentience.neutransmitters/#handle95total_3","text":"def handle_total(self, message)","title":"handle_total"},{"location":"lilacs.sentience.personality/","text":"Module lilacs.sentience.personality Dirty12 None score def score(answers) test def test() test_random def test_random() Hexaco None score def score(answers) test def test() test_random def test_random()","title":"personality"},{"location":"lilacs.sentience.personality/#module-lilacssentiencepersonality","text":"","title":"Module lilacs.sentience.personality"},{"location":"lilacs.sentience.personality/#dirty12","text":"None","title":"Dirty12"},{"location":"lilacs.sentience.personality/#score","text":"def score(answers)","title":"score"},{"location":"lilacs.sentience.personality/#test","text":"def test()","title":"test"},{"location":"lilacs.sentience.personality/#test95random","text":"def test_random()","title":"test_random"},{"location":"lilacs.sentience.personality/#hexaco","text":"None","title":"Hexaco"},{"location":"lilacs.sentience.personality/#score_1","text":"def score(answers)","title":"score"},{"location":"lilacs.sentience.personality/#test_1","text":"def test()","title":"test"},{"location":"lilacs.sentience.personality/#test95random_1","text":"def test_random()","title":"test_random"},{"location":"lilacs.settings/","text":"Module lilacs.settings","title":"settings"},{"location":"lilacs.settings/#module-lilacssettings","text":"","title":"Module lilacs.settings"},{"location":"lilacs.util.date/","text":"Module lilacs.util.date DateTimeFormat None cache def cache(self, lang) date_format def date_format(self, dt, lang, now) date_time_format def date_time_format(self, dt, lang, now, use_24hour, use_ampm) year_format def year_format(self, dt, lang, bc) NUMBER_TUPLE number(x, xx, x0, x_in_x0, xxx, x00, x_in_x00, xx00, xx_in_xx00, x000, x_in_x000, x0_in_x000) future_time_delta def future_time_delta(future_date, anchor=None) Return a nice string representing a future datetime in english. If you need to explicitly set the reference that the future is relative to, just pass it in as a second datetime object. nice_date def nice_date(dt, lang='en-us', now=None) Format a datetime to a pronounceable date For example, generates 'tuesday, june the fifth, 2018' Args: dt (datetime): date to format (assumes already in local timezone) lang (string): the language to use, use Mycroft default language if not provided now (datetime): Current date. If provided, the returned date for speech will be shortened accordingly: No year is returned if now is in the same year as td, no month is returned if now is in the same month as td. If now and td is the same day, 'today' is returned. Returns: (str): The formatted date string nice_time def nice_time(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string nice_time_delta def nice_time_delta(time_delta, anchor=None) Get a timedelta or datetime object or a int() Epoch timestamp and return a pretty string like 'an hour ago', 'Yesterday', '3 months ago', 'just now', etc","title":"date"},{"location":"lilacs.util.date/#module-lilacsutildate","text":"","title":"Module lilacs.util.date"},{"location":"lilacs.util.date/#datetimeformat","text":"None","title":"DateTimeFormat"},{"location":"lilacs.util.date/#cache","text":"def cache(self, lang)","title":"cache"},{"location":"lilacs.util.date/#date95format","text":"def date_format(self, dt, lang, now)","title":"date_format"},{"location":"lilacs.util.date/#date95time95format","text":"def date_time_format(self, dt, lang, now, use_24hour, use_ampm)","title":"date_time_format"},{"location":"lilacs.util.date/#year95format","text":"def year_format(self, dt, lang, bc)","title":"year_format"},{"location":"lilacs.util.date/#number_tuple","text":"number(x, xx, x0, x_in_x0, xxx, x00, x_in_x00, xx00, xx_in_xx00, x000, x_in_x000, x0_in_x000)","title":"NUMBER_TUPLE"},{"location":"lilacs.util.date/#future95time95delta","text":"def future_time_delta(future_date, anchor=None) Return a nice string representing a future datetime in english. If you need to explicitly set the reference that the future is relative to, just pass it in as a second datetime object.","title":"future_time_delta"},{"location":"lilacs.util.date/#nice95date","text":"def nice_date(dt, lang='en-us', now=None) Format a datetime to a pronounceable date For example, generates 'tuesday, june the fifth, 2018' Args: dt (datetime): date to format (assumes already in local timezone) lang (string): the language to use, use Mycroft default language if not provided now (datetime): Current date. If provided, the returned date for speech will be shortened accordingly: No year is returned if now is in the same year as td, no month is returned if now is in the same month as td. If now and td is the same day, 'today' is returned. Returns: (str): The formatted date string","title":"nice_date"},{"location":"lilacs.util.date/#nice95time","text":"def nice_time(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time"},{"location":"lilacs.util.date/#nice95time95delta","text":"def nice_time_delta(time_delta, anchor=None) Get a timedelta or datetime object or a int() Epoch timestamp and return a pretty string like 'an hour ago', 'Yesterday', '3 months ago', 'just now', etc","title":"nice_time_delta"},{"location":"lilacs.util.format/","text":"Module lilacs.util.format convert_to_mixed_fraction def convert_to_mixed_fraction(number, denominators) Convert floats to components of a mixed fraction representation Returns the closest fractional representation using the provided denominators. For example, 4.500002 would become the whole number 4, the numerator 1 and the denominator 2 Args: number (float): number for convert denominators (iter of ints): denominators to use, default [1 .. 20] Returns: whole, numerator, denominator (int): Integers of the mixed fraction nice_number def nice_number(number, speech, denominators) English helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 and a half\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. pronounce_number def pronounce_number(num, places=2, short_scale=True, scientific=False) Convert a number to it's spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool): pronounce in scientific notation Returns: (str): The pronounced number","title":"format"},{"location":"lilacs.util.format/#module-lilacsutilformat","text":"","title":"Module lilacs.util.format"},{"location":"lilacs.util.format/#convert95to95mixed95fraction","text":"def convert_to_mixed_fraction(number, denominators) Convert floats to components of a mixed fraction representation Returns the closest fractional representation using the provided denominators. For example, 4.500002 would become the whole number 4, the numerator 1 and the denominator 2 Args: number (float): number for convert denominators (iter of ints): denominators to use, default [1 .. 20] Returns: whole, numerator, denominator (int): Integers of the mixed fraction","title":"convert_to_mixed_fraction"},{"location":"lilacs.util.format/#nice95number","text":"def nice_number(number, speech, denominators) English helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 and a half\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number"},{"location":"lilacs.util.format/#pronounce95number","text":"def pronounce_number(num, places=2, short_scale=True, scientific=False) Convert a number to it's spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool): pronounce in scientific notation Returns: (str): The pronounced number","title":"pronounce_number"},{"location":"lilacs.util.log/","text":"Module lilacs.util.log LOG Custom logger class that acts like logging.Logger The logger name is automatically generated by the module of the caller Usage: >>> LOG.debug('My message: %s', debug_str) 13:12:43.673 - : :1 - DEBUG - My message: hi >>> LOG('custom_name').debug('Another message') 13:13:10.462 - custom_name - DEBUG - Another message create_logger def create_logger(name) debug def debug(*args, **kwargs) Log 'msg % args' with severity 'DEBUG'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1) error def error(*args, **kwargs) Log 'msg % args' with severity 'ERROR'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1) exception def exception(*args, **kwargs) Convenience method for logging an ERROR with exception information. info def info(*args, **kwargs) Log 'msg % args' with severity 'INFO'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1) init def init() warning def warning(*args, **kwargs) Log 'msg % args' with severity 'WARNING'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1) getLogger def getLogger(name='MYCROFT') Depreciated. Use LOG instead","title":"log"},{"location":"lilacs.util.log/#module-lilacsutillog","text":"","title":"Module lilacs.util.log"},{"location":"lilacs.util.log/#log","text":"Custom logger class that acts like logging.Logger The logger name is automatically generated by the module of the caller Usage: >>> LOG.debug('My message: %s', debug_str) 13:12:43.673 - : :1 - DEBUG - My message: hi >>> LOG('custom_name').debug('Another message') 13:13:10.462 - custom_name - DEBUG - Another message","title":"LOG"},{"location":"lilacs.util.log/#create95logger","text":"def create_logger(name)","title":"create_logger"},{"location":"lilacs.util.log/#debug","text":"def debug(*args, **kwargs) Log 'msg % args' with severity 'DEBUG'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1)","title":"debug"},{"location":"lilacs.util.log/#error","text":"def error(*args, **kwargs) Log 'msg % args' with severity 'ERROR'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1)","title":"error"},{"location":"lilacs.util.log/#exception","text":"def exception(*args, **kwargs) Convenience method for logging an ERROR with exception information.","title":"exception"},{"location":"lilacs.util.log/#info","text":"def info(*args, **kwargs) Log 'msg % args' with severity 'INFO'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1)","title":"info"},{"location":"lilacs.util.log/#init","text":"def init()","title":"init"},{"location":"lilacs.util.log/#warning","text":"def warning(*args, **kwargs) Log 'msg % args' with severity 'WARNING'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1)","title":"warning"},{"location":"lilacs.util.log/#getlogger","text":"def getLogger(name='MYCROFT') Depreciated. Use LOG instead","title":"getLogger"},{"location":"lilacs.util/","text":"Module lilacs.util Module lilacs.util.date DateTimeFormat None cache def cache(self, lang) date_format def date_format(self, dt, lang, now) date_time_format def date_time_format(self, dt, lang, now, use_24hour, use_ampm) year_format def year_format(self, dt, lang, bc) NUMBER_TUPLE number(x, xx, x0, x_in_x0, xxx, x00, x_in_x00, xx00, xx_in_xx00, x000, x_in_x000, x0_in_x000) future_time_delta def future_time_delta(future_date, anchor=None) Return a nice string representing a future datetime in english. If you need to explicitly set the reference that the future is relative to, just pass it in as a second datetime object. nice_date def nice_date(dt, lang='en-us', now=None) Format a datetime to a pronounceable date For example, generates 'tuesday, june the fifth, 2018' Args: dt (datetime): date to format (assumes already in local timezone) lang (string): the language to use, use Mycroft default language if not provided now (datetime): Current date. If provided, the returned date for speech will be shortened accordingly: No year is returned if now is in the same year as td, no month is returned if now is in the same month as td. If now and td is the same day, 'today' is returned. Returns: (str): The formatted date string nice_time def nice_time(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string nice_time_delta def nice_time_delta(time_delta, anchor=None) Get a timedelta or datetime object or a int() Epoch timestamp and return a pretty string like 'an hour ago', 'Yesterday', '3 months ago', 'just now', etc Module lilacs.util.format convert_to_mixed_fraction def convert_to_mixed_fraction(number, denominators) Convert floats to components of a mixed fraction representation Returns the closest fractional representation using the provided denominators. For example, 4.500002 would become the whole number 4, the numerator 1 and the denominator 2 Args: number (float): number for convert denominators (iter of ints): denominators to use, default [1 .. 20] Returns: whole, numerator, denominator (int): Integers of the mixed fraction nice_number def nice_number(number, speech, denominators) English helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 and a half\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. pronounce_number def pronounce_number(num, places=2, short_scale=True, scientific=False) Convert a number to it's spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool): pronounce in scientific notation Returns: (str): The pronounced number Module lilacs.util.log LOG Custom logger class that acts like logging.Logger The logger name is automatically generated by the module of the caller Usage: >>> LOG.debug('My message: %s', debug_str) 13:12:43.673 - : :1 - DEBUG - My message: hi >>> LOG('custom_name').debug('Another message') 13:13:10.462 - custom_name - DEBUG - Another message create_logger def create_logger(name) debug def debug(*args, **kwargs) Log 'msg % args' with severity 'DEBUG'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1) error def error(*args, **kwargs) Log 'msg % args' with severity 'ERROR'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1) exception def exception(*args, **kwargs) Convenience method for logging an ERROR with exception information. info def info(*args, **kwargs) Log 'msg % args' with severity 'INFO'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1) init def init() warning def warning(*args, **kwargs) Log 'msg % args' with severity 'WARNING'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1) getLogger def getLogger(name='MYCROFT') Depreciated. Use LOG instead Module lilacs.util.parse extract_datetime def extract_datetime(string, currentDate) Convert a human date reference into an exact datetime Convert things like \"today\" \"tomorrow afternoon\" \"next Tuesday at 4pm\" \"August 3rd\" into a datetime. If a reference date is not provided, the current local time is used. Also consumes the words used to define the date returning the remaining string. For example, the string \"what is Tuesday's weather forecast\" returns the date for the forthcoming Tuesday relative to the reference date and the remainder string \"what is weather forecast\". Args: string (str): string containing date words currentDate (datetime): A reference date/time for \"tommorrow\", etc Returns: [datetime, str]: An array containing the datetime and the remaining text not consumed in the parsing. extract_number def extract_number(text, short_scale=True, ordinals=False) This function extracts a number from a text string, handles pronunciations in long scale and short scale https://en.wikipedia.org/wiki/Names_of_large_numbers Args: text (str): the string to normalize short_scale (bool): use short scale if True, long scale if False ordinals (bool): consider ordinal numbers, third=3 instead of 1/3 Returns: (int) or (float) or False: The extracted number or False if no number was found is_fractional def is_fractional(input_str, short_scale=True) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional short_scale (bool): use short scale if True, long scale if False Returns: (bool) or (float): False if not a fraction, otherwise the fraction is_numeric def is_numeric(input_str) Takes in a string and tests to see if it is a number. Args: text (str): string to test if a number Returns: (bool): True if a number, else False look_for_fractions def look_for_fractions(split_list) \" This function takes a list made by fraction & determines if a fraction. Args: split_list (list): list created by splitting on '/' Returns: (bool): False if not a fraction, otherwise True Module lilacs.util.time default_timezone def default_timezone(use_local=True) Get the default timezone Based on user location settings location.timezone.code or the default system value if no setting exists. Returns: (datetime.tzinfo): Definition of the default timezone get_timedelta def get_timedelta(dt, anchor=None) Get a datetime object or a int() Epoch timestamp and return a timedelta now_local def now_local(tz=None) Retrieve the current time Args: tz (datetime.tzinfo, optional): Timezone, default to user's settings Returns: (datetime): The current time now_utc def now_utc() Retrieve the current time in UTC Returns: (datetime): The current time in Universal Time, aka GMT to_local def to_local(dt) Convert a datetime to the user's local timezone Args: dt (datetime): A datetime (if no timezone, defaults to UTC) Returns: (datetime): time converted to the local timezone to_utc def to_utc(dt) Convert a datetime with timezone info to a UTC datetime Args: dt (datetime): A datetime (presumably in some local zone) Returns: (datetime): time converted to UTC","title":"util"},{"location":"lilacs.util/#module-lilacsutil","text":"","title":"Module lilacs.util"},{"location":"lilacs.util/#module-lilacsutildate","text":"","title":"Module lilacs.util.date"},{"location":"lilacs.util/#datetimeformat","text":"None","title":"DateTimeFormat"},{"location":"lilacs.util/#cache","text":"def cache(self, lang)","title":"cache"},{"location":"lilacs.util/#date95format","text":"def date_format(self, dt, lang, now)","title":"date_format"},{"location":"lilacs.util/#date95time95format","text":"def date_time_format(self, dt, lang, now, use_24hour, use_ampm)","title":"date_time_format"},{"location":"lilacs.util/#year95format","text":"def year_format(self, dt, lang, bc)","title":"year_format"},{"location":"lilacs.util/#number_tuple","text":"number(x, xx, x0, x_in_x0, xxx, x00, x_in_x00, xx00, xx_in_xx00, x000, x_in_x000, x0_in_x000)","title":"NUMBER_TUPLE"},{"location":"lilacs.util/#future95time95delta","text":"def future_time_delta(future_date, anchor=None) Return a nice string representing a future datetime in english. If you need to explicitly set the reference that the future is relative to, just pass it in as a second datetime object.","title":"future_time_delta"},{"location":"lilacs.util/#nice95date","text":"def nice_date(dt, lang='en-us', now=None) Format a datetime to a pronounceable date For example, generates 'tuesday, june the fifth, 2018' Args: dt (datetime): date to format (assumes already in local timezone) lang (string): the language to use, use Mycroft default language if not provided now (datetime): Current date. If provided, the returned date for speech will be shortened accordingly: No year is returned if now is in the same year as td, no month is returned if now is in the same month as td. If now and td is the same day, 'today' is returned. Returns: (str): The formatted date string","title":"nice_date"},{"location":"lilacs.util/#nice95time","text":"def nice_time(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time"},{"location":"lilacs.util/#nice95time95delta","text":"def nice_time_delta(time_delta, anchor=None) Get a timedelta or datetime object or a int() Epoch timestamp and return a pretty string like 'an hour ago', 'Yesterday', '3 months ago', 'just now', etc","title":"nice_time_delta"},{"location":"lilacs.util/#module-lilacsutilformat","text":"","title":"Module lilacs.util.format"},{"location":"lilacs.util/#convert95to95mixed95fraction","text":"def convert_to_mixed_fraction(number, denominators) Convert floats to components of a mixed fraction representation Returns the closest fractional representation using the provided denominators. For example, 4.500002 would become the whole number 4, the numerator 1 and the denominator 2 Args: number (float): number for convert denominators (iter of ints): denominators to use, default [1 .. 20] Returns: whole, numerator, denominator (int): Integers of the mixed fraction","title":"convert_to_mixed_fraction"},{"location":"lilacs.util/#nice95number","text":"def nice_number(number, speech, denominators) English helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 and a half\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number"},{"location":"lilacs.util/#pronounce95number","text":"def pronounce_number(num, places=2, short_scale=True, scientific=False) Convert a number to it's spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool): pronounce in scientific notation Returns: (str): The pronounced number","title":"pronounce_number"},{"location":"lilacs.util/#module-lilacsutillog","text":"","title":"Module lilacs.util.log"},{"location":"lilacs.util/#log","text":"Custom logger class that acts like logging.Logger The logger name is automatically generated by the module of the caller Usage: >>> LOG.debug('My message: %s', debug_str) 13:12:43.673 - : :1 - DEBUG - My message: hi >>> LOG('custom_name').debug('Another message') 13:13:10.462 - custom_name - DEBUG - Another message","title":"LOG"},{"location":"lilacs.util/#create95logger","text":"def create_logger(name)","title":"create_logger"},{"location":"lilacs.util/#debug","text":"def debug(*args, **kwargs) Log 'msg % args' with severity 'DEBUG'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1)","title":"debug"},{"location":"lilacs.util/#error","text":"def error(*args, **kwargs) Log 'msg % args' with severity 'ERROR'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1)","title":"error"},{"location":"lilacs.util/#exception","text":"def exception(*args, **kwargs) Convenience method for logging an ERROR with exception information.","title":"exception"},{"location":"lilacs.util/#info","text":"def info(*args, **kwargs) Log 'msg % args' with severity 'INFO'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1)","title":"info"},{"location":"lilacs.util/#init","text":"def init()","title":"init"},{"location":"lilacs.util/#warning","text":"def warning(*args, **kwargs) Log 'msg % args' with severity 'WARNING'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1)","title":"warning"},{"location":"lilacs.util/#getlogger","text":"def getLogger(name='MYCROFT') Depreciated. Use LOG instead","title":"getLogger"},{"location":"lilacs.util/#module-lilacsutilparse","text":"","title":"Module lilacs.util.parse"},{"location":"lilacs.util/#extract95datetime","text":"def extract_datetime(string, currentDate) Convert a human date reference into an exact datetime Convert things like \"today\" \"tomorrow afternoon\" \"next Tuesday at 4pm\" \"August 3rd\" into a datetime. If a reference date is not provided, the current local time is used. Also consumes the words used to define the date returning the remaining string. For example, the string \"what is Tuesday's weather forecast\" returns the date for the forthcoming Tuesday relative to the reference date and the remainder string \"what is weather forecast\". Args: string (str): string containing date words currentDate (datetime): A reference date/time for \"tommorrow\", etc Returns: [datetime, str]: An array containing the datetime and the remaining text not consumed in the parsing.","title":"extract_datetime"},{"location":"lilacs.util/#extract95number","text":"def extract_number(text, short_scale=True, ordinals=False) This function extracts a number from a text string, handles pronunciations in long scale and short scale https://en.wikipedia.org/wiki/Names_of_large_numbers Args: text (str): the string to normalize short_scale (bool): use short scale if True, long scale if False ordinals (bool): consider ordinal numbers, third=3 instead of 1/3 Returns: (int) or (float) or False: The extracted number or False if no number was found","title":"extract_number"},{"location":"lilacs.util/#is95fractional","text":"def is_fractional(input_str, short_scale=True) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional short_scale (bool): use short scale if True, long scale if False Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"is_fractional"},{"location":"lilacs.util/#is95numeric","text":"def is_numeric(input_str) Takes in a string and tests to see if it is a number. Args: text (str): string to test if a number Returns: (bool): True if a number, else False","title":"is_numeric"},{"location":"lilacs.util/#look95for95fractions","text":"def look_for_fractions(split_list) \" This function takes a list made by fraction & determines if a fraction. Args: split_list (list): list created by splitting on '/' Returns: (bool): False if not a fraction, otherwise True","title":"look_for_fractions"},{"location":"lilacs.util/#module-lilacsutiltime","text":"","title":"Module lilacs.util.time"},{"location":"lilacs.util/#default95timezone","text":"def default_timezone(use_local=True) Get the default timezone Based on user location settings location.timezone.code or the default system value if no setting exists. Returns: (datetime.tzinfo): Definition of the default timezone","title":"default_timezone"},{"location":"lilacs.util/#get95timedelta","text":"def get_timedelta(dt, anchor=None) Get a datetime object or a int() Epoch timestamp and return a timedelta","title":"get_timedelta"},{"location":"lilacs.util/#now95local","text":"def now_local(tz=None) Retrieve the current time Args: tz (datetime.tzinfo, optional): Timezone, default to user's settings Returns: (datetime): The current time","title":"now_local"},{"location":"lilacs.util/#now95utc","text":"def now_utc() Retrieve the current time in UTC Returns: (datetime): The current time in Universal Time, aka GMT","title":"now_utc"},{"location":"lilacs.util/#to95local","text":"def to_local(dt) Convert a datetime to the user's local timezone Args: dt (datetime): A datetime (if no timezone, defaults to UTC) Returns: (datetime): time converted to the local timezone","title":"to_local"},{"location":"lilacs.util/#to95utc","text":"def to_utc(dt) Convert a datetime with timezone info to a UTC datetime Args: dt (datetime): A datetime (presumably in some local zone) Returns: (datetime): time converted to UTC","title":"to_utc"},{"location":"lilacs.util.parse/","text":"Module lilacs.util.parse extract_datetime def extract_datetime(string, currentDate) Convert a human date reference into an exact datetime Convert things like \"today\" \"tomorrow afternoon\" \"next Tuesday at 4pm\" \"August 3rd\" into a datetime. If a reference date is not provided, the current local time is used. Also consumes the words used to define the date returning the remaining string. For example, the string \"what is Tuesday's weather forecast\" returns the date for the forthcoming Tuesday relative to the reference date and the remainder string \"what is weather forecast\". Args: string (str): string containing date words currentDate (datetime): A reference date/time for \"tommorrow\", etc Returns: [datetime, str]: An array containing the datetime and the remaining text not consumed in the parsing. extract_number def extract_number(text, short_scale=True, ordinals=False) This function extracts a number from a text string, handles pronunciations in long scale and short scale https://en.wikipedia.org/wiki/Names_of_large_numbers Args: text (str): the string to normalize short_scale (bool): use short scale if True, long scale if False ordinals (bool): consider ordinal numbers, third=3 instead of 1/3 Returns: (int) or (float) or False: The extracted number or False if no number was found is_fractional def is_fractional(input_str, short_scale=True) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional short_scale (bool): use short scale if True, long scale if False Returns: (bool) or (float): False if not a fraction, otherwise the fraction is_numeric def is_numeric(input_str) Takes in a string and tests to see if it is a number. Args: text (str): string to test if a number Returns: (bool): True if a number, else False look_for_fractions def look_for_fractions(split_list) \" This function takes a list made by fraction & determines if a fraction. Args: split_list (list): list created by splitting on '/' Returns: (bool): False if not a fraction, otherwise True","title":"parse"},{"location":"lilacs.util.parse/#module-lilacsutilparse","text":"","title":"Module lilacs.util.parse"},{"location":"lilacs.util.parse/#extract95datetime","text":"def extract_datetime(string, currentDate) Convert a human date reference into an exact datetime Convert things like \"today\" \"tomorrow afternoon\" \"next Tuesday at 4pm\" \"August 3rd\" into a datetime. If a reference date is not provided, the current local time is used. Also consumes the words used to define the date returning the remaining string. For example, the string \"what is Tuesday's weather forecast\" returns the date for the forthcoming Tuesday relative to the reference date and the remainder string \"what is weather forecast\". Args: string (str): string containing date words currentDate (datetime): A reference date/time for \"tommorrow\", etc Returns: [datetime, str]: An array containing the datetime and the remaining text not consumed in the parsing.","title":"extract_datetime"},{"location":"lilacs.util.parse/#extract95number","text":"def extract_number(text, short_scale=True, ordinals=False) This function extracts a number from a text string, handles pronunciations in long scale and short scale https://en.wikipedia.org/wiki/Names_of_large_numbers Args: text (str): the string to normalize short_scale (bool): use short scale if True, long scale if False ordinals (bool): consider ordinal numbers, third=3 instead of 1/3 Returns: (int) or (float) or False: The extracted number or False if no number was found","title":"extract_number"},{"location":"lilacs.util.parse/#is95fractional","text":"def is_fractional(input_str, short_scale=True) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional short_scale (bool): use short scale if True, long scale if False Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"is_fractional"},{"location":"lilacs.util.parse/#is95numeric","text":"def is_numeric(input_str) Takes in a string and tests to see if it is a number. Args: text (str): string to test if a number Returns: (bool): True if a number, else False","title":"is_numeric"},{"location":"lilacs.util.parse/#look95for95fractions","text":"def look_for_fractions(split_list) \" This function takes a list made by fraction & determines if a fraction. Args: split_list (list): list created by splitting on '/' Returns: (bool): False if not a fraction, otherwise True","title":"look_for_fractions"},{"location":"lilacs.util.time/","text":"Module lilacs.util.time default_timezone def default_timezone(use_local=True) Get the default timezone Based on user location settings location.timezone.code or the default system value if no setting exists. Returns: (datetime.tzinfo): Definition of the default timezone get_timedelta def get_timedelta(dt, anchor=None) Get a datetime object or a int() Epoch timestamp and return a timedelta now_local def now_local(tz=None) Retrieve the current time Args: tz (datetime.tzinfo, optional): Timezone, default to user's settings Returns: (datetime): The current time now_utc def now_utc() Retrieve the current time in UTC Returns: (datetime): The current time in Universal Time, aka GMT to_local def to_local(dt) Convert a datetime to the user's local timezone Args: dt (datetime): A datetime (if no timezone, defaults to UTC) Returns: (datetime): time converted to the local timezone to_utc def to_utc(dt) Convert a datetime with timezone info to a UTC datetime Args: dt (datetime): A datetime (presumably in some local zone) Returns: (datetime): time converted to UTC","title":"time"},{"location":"lilacs.util.time/#module-lilacsutiltime","text":"","title":"Module lilacs.util.time"},{"location":"lilacs.util.time/#default95timezone","text":"def default_timezone(use_local=True) Get the default timezone Based on user location settings location.timezone.code or the default system value if no setting exists. Returns: (datetime.tzinfo): Definition of the default timezone","title":"default_timezone"},{"location":"lilacs.util.time/#get95timedelta","text":"def get_timedelta(dt, anchor=None) Get a datetime object or a int() Epoch timestamp and return a timedelta","title":"get_timedelta"},{"location":"lilacs.util.time/#now95local","text":"def now_local(tz=None) Retrieve the current time Args: tz (datetime.tzinfo, optional): Timezone, default to user's settings Returns: (datetime): The current time","title":"now_local"},{"location":"lilacs.util.time/#now95utc","text":"def now_utc() Retrieve the current time in UTC Returns: (datetime): The current time in Universal Time, aka GMT","title":"now_utc"},{"location":"lilacs.util.time/#to95local","text":"def to_local(dt) Convert a datetime to the user's local timezone Args: dt (datetime): A datetime (if no timezone, defaults to UTC) Returns: (datetime): time converted to the local timezone","title":"to_local"},{"location":"lilacs.util.time/#to95utc","text":"def to_utc(dt) Convert a datetime with timezone info to a UTC datetime Args: dt (datetime): A datetime (presumably in some local zone) Returns: (datetime): time converted to UTC","title":"to_utc"}]}